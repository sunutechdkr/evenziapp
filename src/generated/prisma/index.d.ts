
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Registration
 * 
 */
export type Registration = $Result.DefaultSelection<Prisma.$RegistrationPayload>
/**
 * Model Ticket
 * 
 */
export type Ticket = $Result.DefaultSelection<Prisma.$TicketPayload>
/**
 * Model event_sessions
 * 
 */
export type event_sessions = $Result.DefaultSelection<Prisma.$event_sessionsPayload>
/**
 * Model Sponsor
 * 
 */
export type Sponsor = $Result.DefaultSelection<Prisma.$SponsorPayload>
/**
 * Model SessionParticipant
 * 
 */
export type SessionParticipant = $Result.DefaultSelection<Prisma.$SessionParticipantPayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model OtpCode
 * 
 */
export type OtpCode = $Result.DefaultSelection<Prisma.$OtpCodePayload>
/**
 * Model Badge
 * 
 */
export type Badge = $Result.DefaultSelection<Prisma.$BadgePayload>
/**
 * Model BadgeTemplate
 * 
 */
export type BadgeTemplate = $Result.DefaultSelection<Prisma.$BadgeTemplatePayload>
/**
 * Model ParticipantBadge
 * 
 */
export type ParticipantBadge = $Result.DefaultSelection<Prisma.$ParticipantBadgePayload>
/**
 * Model EmailCampaign
 * 
 */
export type EmailCampaign = $Result.DefaultSelection<Prisma.$EmailCampaignPayload>
/**
 * Model EmailTemplate
 * 
 */
export type EmailTemplate = $Result.DefaultSelection<Prisma.$EmailTemplatePayload>
/**
 * Model EmailLog
 * 
 */
export type EmailLog = $Result.DefaultSelection<Prisma.$EmailLogPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model UserEventScore
 * 
 */
export type UserEventScore = $Result.DefaultSelection<Prisma.$UserEventScorePayload>
/**
 * Model UserMatchProfile
 * 
 */
export type UserMatchProfile = $Result.DefaultSelection<Prisma.$UserMatchProfilePayload>
/**
 * Model MatchSuggestion
 * 
 */
export type MatchSuggestion = $Result.DefaultSelection<Prisma.$MatchSuggestionPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.registration`: Exposes CRUD operations for the **Registration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Registrations
    * const registrations = await prisma.registration.findMany()
    * ```
    */
  get registration(): Prisma.RegistrationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ticket`: Exposes CRUD operations for the **Ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.ticket.findMany()
    * ```
    */
  get ticket(): Prisma.TicketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event_sessions`: Exposes CRUD operations for the **event_sessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Event_sessions
    * const event_sessions = await prisma.event_sessions.findMany()
    * ```
    */
  get event_sessions(): Prisma.event_sessionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sponsor`: Exposes CRUD operations for the **Sponsor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sponsors
    * const sponsors = await prisma.sponsor.findMany()
    * ```
    */
  get sponsor(): Prisma.SponsorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sessionParticipant`: Exposes CRUD operations for the **SessionParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionParticipants
    * const sessionParticipants = await prisma.sessionParticipant.findMany()
    * ```
    */
  get sessionParticipant(): Prisma.SessionParticipantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.otpCode`: Exposes CRUD operations for the **OtpCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OtpCodes
    * const otpCodes = await prisma.otpCode.findMany()
    * ```
    */
  get otpCode(): Prisma.OtpCodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.badge`: Exposes CRUD operations for the **Badge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Badges
    * const badges = await prisma.badge.findMany()
    * ```
    */
  get badge(): Prisma.BadgeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.badgeTemplate`: Exposes CRUD operations for the **BadgeTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BadgeTemplates
    * const badgeTemplates = await prisma.badgeTemplate.findMany()
    * ```
    */
  get badgeTemplate(): Prisma.BadgeTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.participantBadge`: Exposes CRUD operations for the **ParticipantBadge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParticipantBadges
    * const participantBadges = await prisma.participantBadge.findMany()
    * ```
    */
  get participantBadge(): Prisma.ParticipantBadgeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailCampaign`: Exposes CRUD operations for the **EmailCampaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailCampaigns
    * const emailCampaigns = await prisma.emailCampaign.findMany()
    * ```
    */
  get emailCampaign(): Prisma.EmailCampaignDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailTemplate`: Exposes CRUD operations for the **EmailTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailTemplates
    * const emailTemplates = await prisma.emailTemplate.findMany()
    * ```
    */
  get emailTemplate(): Prisma.EmailTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailLog`: Exposes CRUD operations for the **EmailLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailLogs
    * const emailLogs = await prisma.emailLog.findMany()
    * ```
    */
  get emailLog(): Prisma.EmailLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userEventScore`: Exposes CRUD operations for the **UserEventScore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserEventScores
    * const userEventScores = await prisma.userEventScore.findMany()
    * ```
    */
  get userEventScore(): Prisma.UserEventScoreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userMatchProfile`: Exposes CRUD operations for the **UserMatchProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserMatchProfiles
    * const userMatchProfiles = await prisma.userMatchProfile.findMany()
    * ```
    */
  get userMatchProfile(): Prisma.UserMatchProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.matchSuggestion`: Exposes CRUD operations for the **MatchSuggestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchSuggestions
    * const matchSuggestions = await prisma.matchSuggestion.findMany()
    * ```
    */
  get matchSuggestion(): Prisma.MatchSuggestionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.0
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    Event: 'Event',
    Registration: 'Registration',
    Ticket: 'Ticket',
    event_sessions: 'event_sessions',
    Sponsor: 'Sponsor',
    SessionParticipant: 'SessionParticipant',
    Appointment: 'Appointment',
    OtpCode: 'OtpCode',
    Badge: 'Badge',
    BadgeTemplate: 'BadgeTemplate',
    ParticipantBadge: 'ParticipantBadge',
    EmailCampaign: 'EmailCampaign',
    EmailTemplate: 'EmailTemplate',
    EmailLog: 'EmailLog',
    Game: 'Game',
    UserEventScore: 'UserEventScore',
    UserMatchProfile: 'UserMatchProfile',
    MatchSuggestion: 'MatchSuggestion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "account" | "session" | "verificationToken" | "event" | "registration" | "ticket" | "event_sessions" | "sponsor" | "sessionParticipant" | "appointment" | "otpCode" | "badge" | "badgeTemplate" | "participantBadge" | "emailCampaign" | "emailTemplate" | "emailLog" | "game" | "userEventScore" | "userMatchProfile" | "matchSuggestion"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Registration: {
        payload: Prisma.$RegistrationPayload<ExtArgs>
        fields: Prisma.RegistrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegistrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegistrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          findFirst: {
            args: Prisma.RegistrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegistrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          findMany: {
            args: Prisma.RegistrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>[]
          }
          create: {
            args: Prisma.RegistrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          createMany: {
            args: Prisma.RegistrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegistrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>[]
          }
          delete: {
            args: Prisma.RegistrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          update: {
            args: Prisma.RegistrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          deleteMany: {
            args: Prisma.RegistrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegistrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RegistrationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>[]
          }
          upsert: {
            args: Prisma.RegistrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          aggregate: {
            args: Prisma.RegistrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegistration>
          }
          groupBy: {
            args: Prisma.RegistrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegistrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegistrationCountArgs<ExtArgs>
            result: $Utils.Optional<RegistrationCountAggregateOutputType> | number
          }
        }
      }
      Ticket: {
        payload: Prisma.$TicketPayload<ExtArgs>
        fields: Prisma.TicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findFirst: {
            args: Prisma.TicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findMany: {
            args: Prisma.TicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          create: {
            args: Prisma.TicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          createMany: {
            args: Prisma.TicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          delete: {
            args: Prisma.TicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          update: {
            args: Prisma.TicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          deleteMany: {
            args: Prisma.TicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TicketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          upsert: {
            args: Prisma.TicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          aggregate: {
            args: Prisma.TicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket>
          }
          groupBy: {
            args: Prisma.TicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketCountArgs<ExtArgs>
            result: $Utils.Optional<TicketCountAggregateOutputType> | number
          }
        }
      }
      event_sessions: {
        payload: Prisma.$event_sessionsPayload<ExtArgs>
        fields: Prisma.event_sessionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.event_sessionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_sessionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.event_sessionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_sessionsPayload>
          }
          findFirst: {
            args: Prisma.event_sessionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_sessionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.event_sessionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_sessionsPayload>
          }
          findMany: {
            args: Prisma.event_sessionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_sessionsPayload>[]
          }
          create: {
            args: Prisma.event_sessionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_sessionsPayload>
          }
          createMany: {
            args: Prisma.event_sessionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.event_sessionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_sessionsPayload>[]
          }
          delete: {
            args: Prisma.event_sessionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_sessionsPayload>
          }
          update: {
            args: Prisma.event_sessionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_sessionsPayload>
          }
          deleteMany: {
            args: Prisma.event_sessionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.event_sessionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.event_sessionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_sessionsPayload>[]
          }
          upsert: {
            args: Prisma.event_sessionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_sessionsPayload>
          }
          aggregate: {
            args: Prisma.Event_sessionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent_sessions>
          }
          groupBy: {
            args: Prisma.event_sessionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Event_sessionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.event_sessionsCountArgs<ExtArgs>
            result: $Utils.Optional<Event_sessionsCountAggregateOutputType> | number
          }
        }
      }
      Sponsor: {
        payload: Prisma.$SponsorPayload<ExtArgs>
        fields: Prisma.SponsorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SponsorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SponsorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          findFirst: {
            args: Prisma.SponsorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SponsorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          findMany: {
            args: Prisma.SponsorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>[]
          }
          create: {
            args: Prisma.SponsorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          createMany: {
            args: Prisma.SponsorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SponsorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>[]
          }
          delete: {
            args: Prisma.SponsorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          update: {
            args: Prisma.SponsorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          deleteMany: {
            args: Prisma.SponsorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SponsorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SponsorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>[]
          }
          upsert: {
            args: Prisma.SponsorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          aggregate: {
            args: Prisma.SponsorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSponsor>
          }
          groupBy: {
            args: Prisma.SponsorGroupByArgs<ExtArgs>
            result: $Utils.Optional<SponsorGroupByOutputType>[]
          }
          count: {
            args: Prisma.SponsorCountArgs<ExtArgs>
            result: $Utils.Optional<SponsorCountAggregateOutputType> | number
          }
        }
      }
      SessionParticipant: {
        payload: Prisma.$SessionParticipantPayload<ExtArgs>
        fields: Prisma.SessionParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          findFirst: {
            args: Prisma.SessionParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          findMany: {
            args: Prisma.SessionParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>[]
          }
          create: {
            args: Prisma.SessionParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          createMany: {
            args: Prisma.SessionParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>[]
          }
          delete: {
            args: Prisma.SessionParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          update: {
            args: Prisma.SessionParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          deleteMany: {
            args: Prisma.SessionParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionParticipantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>[]
          }
          upsert: {
            args: Prisma.SessionParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionParticipantPayload>
          }
          aggregate: {
            args: Prisma.SessionParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionParticipant>
          }
          groupBy: {
            args: Prisma.SessionParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<SessionParticipantCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      OtpCode: {
        payload: Prisma.$OtpCodePayload<ExtArgs>
        fields: Prisma.OtpCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OtpCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OtpCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpCodePayload>
          }
          findFirst: {
            args: Prisma.OtpCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OtpCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpCodePayload>
          }
          findMany: {
            args: Prisma.OtpCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpCodePayload>[]
          }
          create: {
            args: Prisma.OtpCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpCodePayload>
          }
          createMany: {
            args: Prisma.OtpCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OtpCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpCodePayload>[]
          }
          delete: {
            args: Prisma.OtpCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpCodePayload>
          }
          update: {
            args: Prisma.OtpCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpCodePayload>
          }
          deleteMany: {
            args: Prisma.OtpCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OtpCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OtpCodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpCodePayload>[]
          }
          upsert: {
            args: Prisma.OtpCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpCodePayload>
          }
          aggregate: {
            args: Prisma.OtpCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOtpCode>
          }
          groupBy: {
            args: Prisma.OtpCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<OtpCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.OtpCodeCountArgs<ExtArgs>
            result: $Utils.Optional<OtpCodeCountAggregateOutputType> | number
          }
        }
      }
      Badge: {
        payload: Prisma.$BadgePayload<ExtArgs>
        fields: Prisma.BadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findFirst: {
            args: Prisma.BadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findMany: {
            args: Prisma.BadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          create: {
            args: Prisma.BadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          createMany: {
            args: Prisma.BadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          delete: {
            args: Prisma.BadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          update: {
            args: Prisma.BadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          deleteMany: {
            args: Prisma.BadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BadgeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          upsert: {
            args: Prisma.BadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          aggregate: {
            args: Prisma.BadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBadge>
          }
          groupBy: {
            args: Prisma.BadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BadgeCountArgs<ExtArgs>
            result: $Utils.Optional<BadgeCountAggregateOutputType> | number
          }
        }
      }
      BadgeTemplate: {
        payload: Prisma.$BadgeTemplatePayload<ExtArgs>
        fields: Prisma.BadgeTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BadgeTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgeTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BadgeTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgeTemplatePayload>
          }
          findFirst: {
            args: Prisma.BadgeTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgeTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BadgeTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgeTemplatePayload>
          }
          findMany: {
            args: Prisma.BadgeTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgeTemplatePayload>[]
          }
          create: {
            args: Prisma.BadgeTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgeTemplatePayload>
          }
          createMany: {
            args: Prisma.BadgeTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BadgeTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgeTemplatePayload>[]
          }
          delete: {
            args: Prisma.BadgeTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgeTemplatePayload>
          }
          update: {
            args: Prisma.BadgeTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgeTemplatePayload>
          }
          deleteMany: {
            args: Prisma.BadgeTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BadgeTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BadgeTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgeTemplatePayload>[]
          }
          upsert: {
            args: Prisma.BadgeTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgeTemplatePayload>
          }
          aggregate: {
            args: Prisma.BadgeTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBadgeTemplate>
          }
          groupBy: {
            args: Prisma.BadgeTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<BadgeTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.BadgeTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<BadgeTemplateCountAggregateOutputType> | number
          }
        }
      }
      ParticipantBadge: {
        payload: Prisma.$ParticipantBadgePayload<ExtArgs>
        fields: Prisma.ParticipantBadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParticipantBadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantBadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParticipantBadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantBadgePayload>
          }
          findFirst: {
            args: Prisma.ParticipantBadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantBadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParticipantBadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantBadgePayload>
          }
          findMany: {
            args: Prisma.ParticipantBadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantBadgePayload>[]
          }
          create: {
            args: Prisma.ParticipantBadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantBadgePayload>
          }
          createMany: {
            args: Prisma.ParticipantBadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParticipantBadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantBadgePayload>[]
          }
          delete: {
            args: Prisma.ParticipantBadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantBadgePayload>
          }
          update: {
            args: Prisma.ParticipantBadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantBadgePayload>
          }
          deleteMany: {
            args: Prisma.ParticipantBadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParticipantBadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ParticipantBadgeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantBadgePayload>[]
          }
          upsert: {
            args: Prisma.ParticipantBadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParticipantBadgePayload>
          }
          aggregate: {
            args: Prisma.ParticipantBadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParticipantBadge>
          }
          groupBy: {
            args: Prisma.ParticipantBadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParticipantBadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParticipantBadgeCountArgs<ExtArgs>
            result: $Utils.Optional<ParticipantBadgeCountAggregateOutputType> | number
          }
        }
      }
      EmailCampaign: {
        payload: Prisma.$EmailCampaignPayload<ExtArgs>
        fields: Prisma.EmailCampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailCampaignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailCampaignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          findFirst: {
            args: Prisma.EmailCampaignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailCampaignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          findMany: {
            args: Prisma.EmailCampaignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>[]
          }
          create: {
            args: Prisma.EmailCampaignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          createMany: {
            args: Prisma.EmailCampaignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailCampaignCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>[]
          }
          delete: {
            args: Prisma.EmailCampaignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          update: {
            args: Prisma.EmailCampaignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          deleteMany: {
            args: Prisma.EmailCampaignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailCampaignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailCampaignUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>[]
          }
          upsert: {
            args: Prisma.EmailCampaignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          aggregate: {
            args: Prisma.EmailCampaignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailCampaign>
          }
          groupBy: {
            args: Prisma.EmailCampaignGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailCampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailCampaignCountArgs<ExtArgs>
            result: $Utils.Optional<EmailCampaignCountAggregateOutputType> | number
          }
        }
      }
      EmailTemplate: {
        payload: Prisma.$EmailTemplatePayload<ExtArgs>
        fields: Prisma.EmailTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          findFirst: {
            args: Prisma.EmailTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          findMany: {
            args: Prisma.EmailTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          create: {
            args: Prisma.EmailTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          createMany: {
            args: Prisma.EmailTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          delete: {
            args: Prisma.EmailTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          update: {
            args: Prisma.EmailTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          deleteMany: {
            args: Prisma.EmailTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>[]
          }
          upsert: {
            args: Prisma.EmailTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTemplatePayload>
          }
          aggregate: {
            args: Prisma.EmailTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailTemplate>
          }
          groupBy: {
            args: Prisma.EmailTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<EmailTemplateCountAggregateOutputType> | number
          }
        }
      }
      EmailLog: {
        payload: Prisma.$EmailLogPayload<ExtArgs>
        fields: Prisma.EmailLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          findFirst: {
            args: Prisma.EmailLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          findMany: {
            args: Prisma.EmailLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>[]
          }
          create: {
            args: Prisma.EmailLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          createMany: {
            args: Prisma.EmailLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>[]
          }
          delete: {
            args: Prisma.EmailLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          update: {
            args: Prisma.EmailLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          deleteMany: {
            args: Prisma.EmailLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>[]
          }
          upsert: {
            args: Prisma.EmailLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          aggregate: {
            args: Prisma.EmailLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailLog>
          }
          groupBy: {
            args: Prisma.EmailLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailLogCountArgs<ExtArgs>
            result: $Utils.Optional<EmailLogCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      UserEventScore: {
        payload: Prisma.$UserEventScorePayload<ExtArgs>
        fields: Prisma.UserEventScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserEventScoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEventScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserEventScoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEventScorePayload>
          }
          findFirst: {
            args: Prisma.UserEventScoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEventScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserEventScoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEventScorePayload>
          }
          findMany: {
            args: Prisma.UserEventScoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEventScorePayload>[]
          }
          create: {
            args: Prisma.UserEventScoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEventScorePayload>
          }
          createMany: {
            args: Prisma.UserEventScoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserEventScoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEventScorePayload>[]
          }
          delete: {
            args: Prisma.UserEventScoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEventScorePayload>
          }
          update: {
            args: Prisma.UserEventScoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEventScorePayload>
          }
          deleteMany: {
            args: Prisma.UserEventScoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserEventScoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserEventScoreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEventScorePayload>[]
          }
          upsert: {
            args: Prisma.UserEventScoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserEventScorePayload>
          }
          aggregate: {
            args: Prisma.UserEventScoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserEventScore>
          }
          groupBy: {
            args: Prisma.UserEventScoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserEventScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserEventScoreCountArgs<ExtArgs>
            result: $Utils.Optional<UserEventScoreCountAggregateOutputType> | number
          }
        }
      }
      UserMatchProfile: {
        payload: Prisma.$UserMatchProfilePayload<ExtArgs>
        fields: Prisma.UserMatchProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserMatchProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserMatchProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchProfilePayload>
          }
          findFirst: {
            args: Prisma.UserMatchProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserMatchProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchProfilePayload>
          }
          findMany: {
            args: Prisma.UserMatchProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchProfilePayload>[]
          }
          create: {
            args: Prisma.UserMatchProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchProfilePayload>
          }
          createMany: {
            args: Prisma.UserMatchProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserMatchProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchProfilePayload>[]
          }
          delete: {
            args: Prisma.UserMatchProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchProfilePayload>
          }
          update: {
            args: Prisma.UserMatchProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserMatchProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserMatchProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserMatchProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchProfilePayload>[]
          }
          upsert: {
            args: Prisma.UserMatchProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMatchProfilePayload>
          }
          aggregate: {
            args: Prisma.UserMatchProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserMatchProfile>
          }
          groupBy: {
            args: Prisma.UserMatchProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserMatchProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserMatchProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserMatchProfileCountAggregateOutputType> | number
          }
        }
      }
      MatchSuggestion: {
        payload: Prisma.$MatchSuggestionPayload<ExtArgs>
        fields: Prisma.MatchSuggestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchSuggestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchSuggestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchSuggestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchSuggestionPayload>
          }
          findFirst: {
            args: Prisma.MatchSuggestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchSuggestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchSuggestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchSuggestionPayload>
          }
          findMany: {
            args: Prisma.MatchSuggestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchSuggestionPayload>[]
          }
          create: {
            args: Prisma.MatchSuggestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchSuggestionPayload>
          }
          createMany: {
            args: Prisma.MatchSuggestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchSuggestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchSuggestionPayload>[]
          }
          delete: {
            args: Prisma.MatchSuggestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchSuggestionPayload>
          }
          update: {
            args: Prisma.MatchSuggestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchSuggestionPayload>
          }
          deleteMany: {
            args: Prisma.MatchSuggestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchSuggestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchSuggestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchSuggestionPayload>[]
          }
          upsert: {
            args: Prisma.MatchSuggestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchSuggestionPayload>
          }
          aggregate: {
            args: Prisma.MatchSuggestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchSuggestion>
          }
          groupBy: {
            args: Prisma.MatchSuggestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchSuggestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchSuggestionCountArgs<ExtArgs>
            result: $Utils.Optional<MatchSuggestionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
    event?: EventOmit
    registration?: RegistrationOmit
    ticket?: TicketOmit
    event_sessions?: event_sessionsOmit
    sponsor?: SponsorOmit
    sessionParticipant?: SessionParticipantOmit
    appointment?: AppointmentOmit
    otpCode?: OtpCodeOmit
    badge?: BadgeOmit
    badgeTemplate?: BadgeTemplateOmit
    participantBadge?: ParticipantBadgeOmit
    emailCampaign?: EmailCampaignOmit
    emailTemplate?: EmailTemplateOmit
    emailLog?: EmailLogOmit
    game?: GameOmit
    userEventScore?: UserEventScoreOmit
    userMatchProfile?: UserMatchProfileOmit
    matchSuggestion?: MatchSuggestionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    events: number
    suggestedFor: number
    suggestions: number
    sessions: number
    matchProfiles: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    events?: boolean | UserCountOutputTypeCountEventsArgs
    suggestedFor?: boolean | UserCountOutputTypeCountSuggestedForArgs
    suggestions?: boolean | UserCountOutputTypeCountSuggestionsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    matchProfiles?: boolean | UserCountOutputTypeCountMatchProfilesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSuggestedForArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchSuggestionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSuggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchSuggestionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatchProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMatchProfileWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    appointments: number
    badgeTemplates: number
    badges: number
    emailCampaigns: number
    emailTemplates: number
    event_sessions: number
    games: number
    matchSuggestions: number
    participantBadges: number
    registrations: number
    sponsors: number
    tickets: number
    userEventScores: number
    matchProfiles: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | EventCountOutputTypeCountAppointmentsArgs
    badgeTemplates?: boolean | EventCountOutputTypeCountBadgeTemplatesArgs
    badges?: boolean | EventCountOutputTypeCountBadgesArgs
    emailCampaigns?: boolean | EventCountOutputTypeCountEmailCampaignsArgs
    emailTemplates?: boolean | EventCountOutputTypeCountEmailTemplatesArgs
    event_sessions?: boolean | EventCountOutputTypeCountEvent_sessionsArgs
    games?: boolean | EventCountOutputTypeCountGamesArgs
    matchSuggestions?: boolean | EventCountOutputTypeCountMatchSuggestionsArgs
    participantBadges?: boolean | EventCountOutputTypeCountParticipantBadgesArgs
    registrations?: boolean | EventCountOutputTypeCountRegistrationsArgs
    sponsors?: boolean | EventCountOutputTypeCountSponsorsArgs
    tickets?: boolean | EventCountOutputTypeCountTicketsArgs
    userEventScores?: boolean | EventCountOutputTypeCountUserEventScoresArgs
    matchProfiles?: boolean | EventCountOutputTypeCountMatchProfilesArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountBadgeTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BadgeTemplateWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BadgeWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEmailCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailCampaignWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEmailTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailTemplateWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEvent_sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: event_sessionsWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountMatchSuggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchSuggestionWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountParticipantBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParticipantBadgeWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistrationWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountSponsorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SponsorWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountUserEventScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserEventScoreWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountMatchProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMatchProfileWhereInput
  }


  /**
   * Count Type RegistrationCountOutputType
   */

  export type RegistrationCountOutputType = {
    receivedAppointments: number
    sentAppointments: number
    games: number
    participantBadges: number
    sessions: number
    userEventScores: number
  }

  export type RegistrationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receivedAppointments?: boolean | RegistrationCountOutputTypeCountReceivedAppointmentsArgs
    sentAppointments?: boolean | RegistrationCountOutputTypeCountSentAppointmentsArgs
    games?: boolean | RegistrationCountOutputTypeCountGamesArgs
    participantBadges?: boolean | RegistrationCountOutputTypeCountParticipantBadgesArgs
    sessions?: boolean | RegistrationCountOutputTypeCountSessionsArgs
    userEventScores?: boolean | RegistrationCountOutputTypeCountUserEventScoresArgs
  }

  // Custom InputTypes
  /**
   * RegistrationCountOutputType without action
   */
  export type RegistrationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationCountOutputType
     */
    select?: RegistrationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegistrationCountOutputType without action
   */
  export type RegistrationCountOutputTypeCountReceivedAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * RegistrationCountOutputType without action
   */
  export type RegistrationCountOutputTypeCountSentAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * RegistrationCountOutputType without action
   */
  export type RegistrationCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }

  /**
   * RegistrationCountOutputType without action
   */
  export type RegistrationCountOutputTypeCountParticipantBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParticipantBadgeWhereInput
  }

  /**
   * RegistrationCountOutputType without action
   */
  export type RegistrationCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionParticipantWhereInput
  }

  /**
   * RegistrationCountOutputType without action
   */
  export type RegistrationCountOutputTypeCountUserEventScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserEventScoreWhereInput
  }


  /**
   * Count Type TicketCountOutputType
   */

  export type TicketCountOutputType = {
    registrations: number
  }

  export type TicketCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations?: boolean | TicketCountOutputTypeCountRegistrationsArgs
  }

  // Custom InputTypes
  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketCountOutputType
     */
    select?: TicketCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketCountOutputType without action
   */
  export type TicketCountOutputTypeCountRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistrationWhereInput
  }


  /**
   * Count Type Event_sessionsCountOutputType
   */

  export type Event_sessionsCountOutputType = {
    participants: number
  }

  export type Event_sessionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | Event_sessionsCountOutputTypeCountParticipantsArgs
  }

  // Custom InputTypes
  /**
   * Event_sessionsCountOutputType without action
   */
  export type Event_sessionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event_sessionsCountOutputType
     */
    select?: Event_sessionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Event_sessionsCountOutputType without action
   */
  export type Event_sessionsCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionParticipantWhereInput
  }


  /**
   * Count Type BadgeTemplateCountOutputType
   */

  export type BadgeTemplateCountOutputType = {
    participantBadges: number
  }

  export type BadgeTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participantBadges?: boolean | BadgeTemplateCountOutputTypeCountParticipantBadgesArgs
  }

  // Custom InputTypes
  /**
   * BadgeTemplateCountOutputType without action
   */
  export type BadgeTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplateCountOutputType
     */
    select?: BadgeTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BadgeTemplateCountOutputType without action
   */
  export type BadgeTemplateCountOutputTypeCountParticipantBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParticipantBadgeWhereInput
  }


  /**
   * Count Type EmailCampaignCountOutputType
   */

  export type EmailCampaignCountOutputType = {
    emailLogs: number
  }

  export type EmailCampaignCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    emailLogs?: boolean | EmailCampaignCountOutputTypeCountEmailLogsArgs
  }

  // Custom InputTypes
  /**
   * EmailCampaignCountOutputType without action
   */
  export type EmailCampaignCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaignCountOutputType
     */
    select?: EmailCampaignCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmailCampaignCountOutputType without action
   */
  export type EmailCampaignCountOutputTypeCountEmailLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
    lastLogin: Date | null
    phone: string | null
    plan: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
    lastLogin: Date | null
    phone: string | null
    plan: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    password: number
    createdAt: number
    updatedAt: number
    permissions: number
    role: number
    lastLogin: number
    phone: number
    plan: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    lastLogin?: true
    phone?: true
    plan?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    lastLogin?: true
    phone?: true
    plan?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    permissions?: true
    role?: true
    lastLogin?: true
    phone?: true
    plan?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    permissions: string[]
    role: string
    lastLogin: Date | null
    phone: string | null
    plan: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    permissions?: boolean
    role?: boolean
    lastLogin?: boolean
    phone?: boolean
    plan?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    suggestedFor?: boolean | User$suggestedForArgs<ExtArgs>
    suggestions?: boolean | User$suggestionsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    matchProfiles?: boolean | User$matchProfilesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    permissions?: boolean
    role?: boolean
    lastLogin?: boolean
    phone?: boolean
    plan?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    permissions?: boolean
    role?: boolean
    lastLogin?: boolean
    phone?: boolean
    plan?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    permissions?: boolean
    role?: boolean
    lastLogin?: boolean
    phone?: boolean
    plan?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "password" | "createdAt" | "updatedAt" | "permissions" | "role" | "lastLogin" | "phone" | "plan", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    suggestedFor?: boolean | User$suggestedForArgs<ExtArgs>
    suggestions?: boolean | User$suggestionsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    matchProfiles?: boolean | User$matchProfilesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      suggestedFor: Prisma.$MatchSuggestionPayload<ExtArgs>[]
      suggestions: Prisma.$MatchSuggestionPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      matchProfiles: Prisma.$UserMatchProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string | null
      emailVerified: Date | null
      image: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date
      permissions: string[]
      role: string
      lastLogin: Date | null
      phone: string | null
      plan: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    events<T extends User$eventsArgs<ExtArgs> = {}>(args?: Subset<T, User$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    suggestedFor<T extends User$suggestedForArgs<ExtArgs> = {}>(args?: Subset<T, User$suggestedForArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    suggestions<T extends User$suggestionsArgs<ExtArgs> = {}>(args?: Subset<T, User$suggestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchProfiles<T extends User$matchProfilesArgs<ExtArgs> = {}>(args?: Subset<T, User$matchProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly permissions: FieldRef<"User", 'String[]'>
    readonly role: FieldRef<"User", 'String'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly phone: FieldRef<"User", 'String'>
    readonly plan: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.events
   */
  export type User$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * User.suggestedFor
   */
  export type User$suggestedForArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    where?: MatchSuggestionWhereInput
    orderBy?: MatchSuggestionOrderByWithRelationInput | MatchSuggestionOrderByWithRelationInput[]
    cursor?: MatchSuggestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchSuggestionScalarFieldEnum | MatchSuggestionScalarFieldEnum[]
  }

  /**
   * User.suggestions
   */
  export type User$suggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    where?: MatchSuggestionWhereInput
    orderBy?: MatchSuggestionOrderByWithRelationInput | MatchSuggestionOrderByWithRelationInput[]
    cursor?: MatchSuggestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchSuggestionScalarFieldEnum | MatchSuggestionScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.matchProfiles
   */
  export type User$matchProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
    where?: UserMatchProfileWhereInput
    orderBy?: UserMatchProfileOrderByWithRelationInput | UserMatchProfileOrderByWithRelationInput[]
    cursor?: UserMatchProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMatchProfileScalarFieldEnum | UserMatchProfileScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    location: string | null
    slug: string | null
    banner: string | null
    startDate: Date | null
    endDate: Date | null
    startTime: string | null
    endTime: string | null
    sector: string | null
    type: string | null
    format: string | null
    timezone: string | null
    videoUrl: string | null
    supportEmail: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    logo: string | null
    archived: boolean | null
    archivedAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    location: string | null
    slug: string | null
    banner: string | null
    startDate: Date | null
    endDate: Date | null
    startTime: string | null
    endTime: string | null
    sector: string | null
    type: string | null
    format: string | null
    timezone: string | null
    videoUrl: string | null
    supportEmail: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    logo: string | null
    archived: boolean | null
    archivedAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    name: number
    description: number
    location: number
    slug: number
    banner: number
    startDate: number
    endDate: number
    startTime: number
    endTime: number
    sector: number
    type: number
    format: number
    timezone: number
    videoUrl: number
    supportEmail: number
    createdAt: number
    updatedAt: number
    userId: number
    logo: number
    archived: number
    archivedAt: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    location?: true
    slug?: true
    banner?: true
    startDate?: true
    endDate?: true
    startTime?: true
    endTime?: true
    sector?: true
    type?: true
    format?: true
    timezone?: true
    videoUrl?: true
    supportEmail?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    logo?: true
    archived?: true
    archivedAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    location?: true
    slug?: true
    banner?: true
    startDate?: true
    endDate?: true
    startTime?: true
    endTime?: true
    sector?: true
    type?: true
    format?: true
    timezone?: true
    videoUrl?: true
    supportEmail?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    logo?: true
    archived?: true
    archivedAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    location?: true
    slug?: true
    banner?: true
    startDate?: true
    endDate?: true
    startTime?: true
    endTime?: true
    sector?: true
    type?: true
    format?: true
    timezone?: true
    videoUrl?: true
    supportEmail?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    logo?: true
    archived?: true
    archivedAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    name: string
    description: string | null
    location: string
    slug: string
    banner: string | null
    startDate: Date
    endDate: Date
    startTime: string | null
    endTime: string | null
    sector: string | null
    type: string | null
    format: string | null
    timezone: string | null
    videoUrl: string | null
    supportEmail: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    logo: string | null
    archived: boolean
    archivedAt: Date | null
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    location?: boolean
    slug?: boolean
    banner?: boolean
    startDate?: boolean
    endDate?: boolean
    startTime?: boolean
    endTime?: boolean
    sector?: boolean
    type?: boolean
    format?: boolean
    timezone?: boolean
    videoUrl?: boolean
    supportEmail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    logo?: boolean
    archived?: boolean
    archivedAt?: boolean
    appointments?: boolean | Event$appointmentsArgs<ExtArgs>
    badgeTemplates?: boolean | Event$badgeTemplatesArgs<ExtArgs>
    badges?: boolean | Event$badgesArgs<ExtArgs>
    emailCampaigns?: boolean | Event$emailCampaignsArgs<ExtArgs>
    emailTemplates?: boolean | Event$emailTemplatesArgs<ExtArgs>
    event_sessions?: boolean | Event$event_sessionsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    games?: boolean | Event$gamesArgs<ExtArgs>
    matchSuggestions?: boolean | Event$matchSuggestionsArgs<ExtArgs>
    participantBadges?: boolean | Event$participantBadgesArgs<ExtArgs>
    registrations?: boolean | Event$registrationsArgs<ExtArgs>
    sponsors?: boolean | Event$sponsorsArgs<ExtArgs>
    tickets?: boolean | Event$ticketsArgs<ExtArgs>
    userEventScores?: boolean | Event$userEventScoresArgs<ExtArgs>
    matchProfiles?: boolean | Event$matchProfilesArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    location?: boolean
    slug?: boolean
    banner?: boolean
    startDate?: boolean
    endDate?: boolean
    startTime?: boolean
    endTime?: boolean
    sector?: boolean
    type?: boolean
    format?: boolean
    timezone?: boolean
    videoUrl?: boolean
    supportEmail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    logo?: boolean
    archived?: boolean
    archivedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    location?: boolean
    slug?: boolean
    banner?: boolean
    startDate?: boolean
    endDate?: boolean
    startTime?: boolean
    endTime?: boolean
    sector?: boolean
    type?: boolean
    format?: boolean
    timezone?: boolean
    videoUrl?: boolean
    supportEmail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    logo?: boolean
    archived?: boolean
    archivedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    location?: boolean
    slug?: boolean
    banner?: boolean
    startDate?: boolean
    endDate?: boolean
    startTime?: boolean
    endTime?: boolean
    sector?: boolean
    type?: boolean
    format?: boolean
    timezone?: boolean
    videoUrl?: boolean
    supportEmail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    logo?: boolean
    archived?: boolean
    archivedAt?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "location" | "slug" | "banner" | "startDate" | "endDate" | "startTime" | "endTime" | "sector" | "type" | "format" | "timezone" | "videoUrl" | "supportEmail" | "createdAt" | "updatedAt" | "userId" | "logo" | "archived" | "archivedAt", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | Event$appointmentsArgs<ExtArgs>
    badgeTemplates?: boolean | Event$badgeTemplatesArgs<ExtArgs>
    badges?: boolean | Event$badgesArgs<ExtArgs>
    emailCampaigns?: boolean | Event$emailCampaignsArgs<ExtArgs>
    emailTemplates?: boolean | Event$emailTemplatesArgs<ExtArgs>
    event_sessions?: boolean | Event$event_sessionsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    games?: boolean | Event$gamesArgs<ExtArgs>
    matchSuggestions?: boolean | Event$matchSuggestionsArgs<ExtArgs>
    participantBadges?: boolean | Event$participantBadgesArgs<ExtArgs>
    registrations?: boolean | Event$registrationsArgs<ExtArgs>
    sponsors?: boolean | Event$sponsorsArgs<ExtArgs>
    tickets?: boolean | Event$ticketsArgs<ExtArgs>
    userEventScores?: boolean | Event$userEventScoresArgs<ExtArgs>
    matchProfiles?: boolean | Event$matchProfilesArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      badgeTemplates: Prisma.$BadgeTemplatePayload<ExtArgs>[]
      badges: Prisma.$BadgePayload<ExtArgs>[]
      emailCampaigns: Prisma.$EmailCampaignPayload<ExtArgs>[]
      emailTemplates: Prisma.$EmailTemplatePayload<ExtArgs>[]
      event_sessions: Prisma.$event_sessionsPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      games: Prisma.$GamePayload<ExtArgs>[]
      matchSuggestions: Prisma.$MatchSuggestionPayload<ExtArgs>[]
      participantBadges: Prisma.$ParticipantBadgePayload<ExtArgs>[]
      registrations: Prisma.$RegistrationPayload<ExtArgs>[]
      sponsors: Prisma.$SponsorPayload<ExtArgs>[]
      tickets: Prisma.$TicketPayload<ExtArgs>[]
      userEventScores: Prisma.$UserEventScorePayload<ExtArgs>[]
      matchProfiles: Prisma.$UserMatchProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      location: string
      slug: string
      banner: string | null
      startDate: Date
      endDate: Date
      startTime: string | null
      endTime: string | null
      sector: string | null
      type: string | null
      format: string | null
      timezone: string | null
      videoUrl: string | null
      supportEmail: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
      logo: string | null
      archived: boolean
      archivedAt: Date | null
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    appointments<T extends Event$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Event$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    badgeTemplates<T extends Event$badgeTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Event$badgeTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    badges<T extends Event$badgesArgs<ExtArgs> = {}>(args?: Subset<T, Event$badgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emailCampaigns<T extends Event$emailCampaignsArgs<ExtArgs> = {}>(args?: Subset<T, Event$emailCampaignsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emailTemplates<T extends Event$emailTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Event$emailTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    event_sessions<T extends Event$event_sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Event$event_sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    games<T extends Event$gamesArgs<ExtArgs> = {}>(args?: Subset<T, Event$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchSuggestions<T extends Event$matchSuggestionsArgs<ExtArgs> = {}>(args?: Subset<T, Event$matchSuggestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participantBadges<T extends Event$participantBadgesArgs<ExtArgs> = {}>(args?: Subset<T, Event$participantBadgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    registrations<T extends Event$registrationsArgs<ExtArgs> = {}>(args?: Subset<T, Event$registrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sponsors<T extends Event$sponsorsArgs<ExtArgs> = {}>(args?: Subset<T, Event$sponsorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tickets<T extends Event$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Event$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userEventScores<T extends Event$userEventScoresArgs<ExtArgs> = {}>(args?: Subset<T, Event$userEventScoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchProfiles<T extends Event$matchProfilesArgs<ExtArgs> = {}>(args?: Subset<T, Event$matchProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly name: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly location: FieldRef<"Event", 'String'>
    readonly slug: FieldRef<"Event", 'String'>
    readonly banner: FieldRef<"Event", 'String'>
    readonly startDate: FieldRef<"Event", 'DateTime'>
    readonly endDate: FieldRef<"Event", 'DateTime'>
    readonly startTime: FieldRef<"Event", 'String'>
    readonly endTime: FieldRef<"Event", 'String'>
    readonly sector: FieldRef<"Event", 'String'>
    readonly type: FieldRef<"Event", 'String'>
    readonly format: FieldRef<"Event", 'String'>
    readonly timezone: FieldRef<"Event", 'String'>
    readonly videoUrl: FieldRef<"Event", 'String'>
    readonly supportEmail: FieldRef<"Event", 'String'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
    readonly userId: FieldRef<"Event", 'String'>
    readonly logo: FieldRef<"Event", 'String'>
    readonly archived: FieldRef<"Event", 'Boolean'>
    readonly archivedAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event updateManyAndReturn
   */
  export type EventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Event.appointments
   */
  export type Event$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Event.badgeTemplates
   */
  export type Event$badgeTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateInclude<ExtArgs> | null
    where?: BadgeTemplateWhereInput
    orderBy?: BadgeTemplateOrderByWithRelationInput | BadgeTemplateOrderByWithRelationInput[]
    cursor?: BadgeTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BadgeTemplateScalarFieldEnum | BadgeTemplateScalarFieldEnum[]
  }

  /**
   * Event.badges
   */
  export type Event$badgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    where?: BadgeWhereInput
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    cursor?: BadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Event.emailCampaigns
   */
  export type Event$emailCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    where?: EmailCampaignWhereInput
    orderBy?: EmailCampaignOrderByWithRelationInput | EmailCampaignOrderByWithRelationInput[]
    cursor?: EmailCampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailCampaignScalarFieldEnum | EmailCampaignScalarFieldEnum[]
  }

  /**
   * Event.emailTemplates
   */
  export type Event$emailTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    where?: EmailTemplateWhereInput
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    cursor?: EmailTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * Event.event_sessions
   */
  export type Event$event_sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsInclude<ExtArgs> | null
    where?: event_sessionsWhereInput
    orderBy?: event_sessionsOrderByWithRelationInput | event_sessionsOrderByWithRelationInput[]
    cursor?: event_sessionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Event_sessionsScalarFieldEnum | Event_sessionsScalarFieldEnum[]
  }

  /**
   * Event.games
   */
  export type Event$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Event.matchSuggestions
   */
  export type Event$matchSuggestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    where?: MatchSuggestionWhereInput
    orderBy?: MatchSuggestionOrderByWithRelationInput | MatchSuggestionOrderByWithRelationInput[]
    cursor?: MatchSuggestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchSuggestionScalarFieldEnum | MatchSuggestionScalarFieldEnum[]
  }

  /**
   * Event.participantBadges
   */
  export type Event$participantBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    where?: ParticipantBadgeWhereInput
    orderBy?: ParticipantBadgeOrderByWithRelationInput | ParticipantBadgeOrderByWithRelationInput[]
    cursor?: ParticipantBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParticipantBadgeScalarFieldEnum | ParticipantBadgeScalarFieldEnum[]
  }

  /**
   * Event.registrations
   */
  export type Event$registrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    where?: RegistrationWhereInput
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    cursor?: RegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * Event.sponsors
   */
  export type Event$sponsorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    where?: SponsorWhereInput
    orderBy?: SponsorOrderByWithRelationInput | SponsorOrderByWithRelationInput[]
    cursor?: SponsorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SponsorScalarFieldEnum | SponsorScalarFieldEnum[]
  }

  /**
   * Event.tickets
   */
  export type Event$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Event.userEventScores
   */
  export type Event$userEventScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
    where?: UserEventScoreWhereInput
    orderBy?: UserEventScoreOrderByWithRelationInput | UserEventScoreOrderByWithRelationInput[]
    cursor?: UserEventScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserEventScoreScalarFieldEnum | UserEventScoreScalarFieldEnum[]
  }

  /**
   * Event.matchProfiles
   */
  export type Event$matchProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
    where?: UserMatchProfileWhereInput
    orderBy?: UserMatchProfileOrderByWithRelationInput | UserMatchProfileOrderByWithRelationInput[]
    cursor?: UserMatchProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMatchProfileScalarFieldEnum | UserMatchProfileScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Registration
   */

  export type AggregateRegistration = {
    _count: RegistrationCountAggregateOutputType | null
    _min: RegistrationMinAggregateOutputType | null
    _max: RegistrationMaxAggregateOutputType | null
  }

  export type RegistrationMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    type: string | null
    eventId: string | null
    ticketId: string | null
    qrCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    checkedIn: boolean | null
    checkInTime: Date | null
    shortCode: string | null
    company: string | null
    jobTitle: string | null
  }

  export type RegistrationMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    type: string | null
    eventId: string | null
    ticketId: string | null
    qrCode: string | null
    createdAt: Date | null
    updatedAt: Date | null
    checkedIn: boolean | null
    checkInTime: Date | null
    shortCode: string | null
    company: string | null
    jobTitle: string | null
  }

  export type RegistrationCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    phone: number
    type: number
    eventId: number
    ticketId: number
    qrCode: number
    createdAt: number
    updatedAt: number
    checkedIn: number
    checkInTime: number
    shortCode: number
    company: number
    jobTitle: number
    _all: number
  }


  export type RegistrationMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    type?: true
    eventId?: true
    ticketId?: true
    qrCode?: true
    createdAt?: true
    updatedAt?: true
    checkedIn?: true
    checkInTime?: true
    shortCode?: true
    company?: true
    jobTitle?: true
  }

  export type RegistrationMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    type?: true
    eventId?: true
    ticketId?: true
    qrCode?: true
    createdAt?: true
    updatedAt?: true
    checkedIn?: true
    checkInTime?: true
    shortCode?: true
    company?: true
    jobTitle?: true
  }

  export type RegistrationCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    type?: true
    eventId?: true
    ticketId?: true
    qrCode?: true
    createdAt?: true
    updatedAt?: true
    checkedIn?: true
    checkInTime?: true
    shortCode?: true
    company?: true
    jobTitle?: true
    _all?: true
  }

  export type RegistrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registration to aggregate.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Registrations
    **/
    _count?: true | RegistrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistrationMaxAggregateInputType
  }

  export type GetRegistrationAggregateType<T extends RegistrationAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistration[P]>
      : GetScalarType<T[P], AggregateRegistration[P]>
  }




  export type RegistrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistrationWhereInput
    orderBy?: RegistrationOrderByWithAggregationInput | RegistrationOrderByWithAggregationInput[]
    by: RegistrationScalarFieldEnum[] | RegistrationScalarFieldEnum
    having?: RegistrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistrationCountAggregateInputType | true
    _min?: RegistrationMinAggregateInputType
    _max?: RegistrationMaxAggregateInputType
  }

  export type RegistrationGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type: string
    eventId: string
    ticketId: string | null
    qrCode: string
    createdAt: Date
    updatedAt: Date
    checkedIn: boolean
    checkInTime: Date | null
    shortCode: string | null
    company: string | null
    jobTitle: string | null
    _count: RegistrationCountAggregateOutputType | null
    _min: RegistrationMinAggregateOutputType | null
    _max: RegistrationMaxAggregateOutputType | null
  }

  type GetRegistrationGroupByPayload<T extends RegistrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistrationGroupByOutputType[P]>
            : GetScalarType<T[P], RegistrationGroupByOutputType[P]>
        }
      >
    >


  export type RegistrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    type?: boolean
    eventId?: boolean
    ticketId?: boolean
    qrCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    checkedIn?: boolean
    checkInTime?: boolean
    shortCode?: boolean
    company?: boolean
    jobTitle?: boolean
    receivedAppointments?: boolean | Registration$receivedAppointmentsArgs<ExtArgs>
    sentAppointments?: boolean | Registration$sentAppointmentsArgs<ExtArgs>
    games?: boolean | Registration$gamesArgs<ExtArgs>
    participantBadges?: boolean | Registration$participantBadgesArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    ticket?: boolean | Registration$ticketArgs<ExtArgs>
    sessions?: boolean | Registration$sessionsArgs<ExtArgs>
    userEventScores?: boolean | Registration$userEventScoresArgs<ExtArgs>
    _count?: boolean | RegistrationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registration"]>

  export type RegistrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    type?: boolean
    eventId?: boolean
    ticketId?: boolean
    qrCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    checkedIn?: boolean
    checkInTime?: boolean
    shortCode?: boolean
    company?: boolean
    jobTitle?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    ticket?: boolean | Registration$ticketArgs<ExtArgs>
  }, ExtArgs["result"]["registration"]>

  export type RegistrationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    type?: boolean
    eventId?: boolean
    ticketId?: boolean
    qrCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    checkedIn?: boolean
    checkInTime?: boolean
    shortCode?: boolean
    company?: boolean
    jobTitle?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    ticket?: boolean | Registration$ticketArgs<ExtArgs>
  }, ExtArgs["result"]["registration"]>

  export type RegistrationSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    type?: boolean
    eventId?: boolean
    ticketId?: boolean
    qrCode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    checkedIn?: boolean
    checkInTime?: boolean
    shortCode?: boolean
    company?: boolean
    jobTitle?: boolean
  }

  export type RegistrationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "phone" | "type" | "eventId" | "ticketId" | "qrCode" | "createdAt" | "updatedAt" | "checkedIn" | "checkInTime" | "shortCode" | "company" | "jobTitle", ExtArgs["result"]["registration"]>
  export type RegistrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    receivedAppointments?: boolean | Registration$receivedAppointmentsArgs<ExtArgs>
    sentAppointments?: boolean | Registration$sentAppointmentsArgs<ExtArgs>
    games?: boolean | Registration$gamesArgs<ExtArgs>
    participantBadges?: boolean | Registration$participantBadgesArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    ticket?: boolean | Registration$ticketArgs<ExtArgs>
    sessions?: boolean | Registration$sessionsArgs<ExtArgs>
    userEventScores?: boolean | Registration$userEventScoresArgs<ExtArgs>
    _count?: boolean | RegistrationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RegistrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    ticket?: boolean | Registration$ticketArgs<ExtArgs>
  }
  export type RegistrationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    ticket?: boolean | Registration$ticketArgs<ExtArgs>
  }

  export type $RegistrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Registration"
    objects: {
      receivedAppointments: Prisma.$AppointmentPayload<ExtArgs>[]
      sentAppointments: Prisma.$AppointmentPayload<ExtArgs>[]
      games: Prisma.$GamePayload<ExtArgs>[]
      participantBadges: Prisma.$ParticipantBadgePayload<ExtArgs>[]
      event: Prisma.$EventPayload<ExtArgs>
      ticket: Prisma.$TicketPayload<ExtArgs> | null
      sessions: Prisma.$SessionParticipantPayload<ExtArgs>[]
      userEventScores: Prisma.$UserEventScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string
      phone: string
      type: string
      eventId: string
      ticketId: string | null
      qrCode: string
      createdAt: Date
      updatedAt: Date
      checkedIn: boolean
      checkInTime: Date | null
      shortCode: string | null
      company: string | null
      jobTitle: string | null
    }, ExtArgs["result"]["registration"]>
    composites: {}
  }

  type RegistrationGetPayload<S extends boolean | null | undefined | RegistrationDefaultArgs> = $Result.GetResult<Prisma.$RegistrationPayload, S>

  type RegistrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RegistrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegistrationCountAggregateInputType | true
    }

  export interface RegistrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Registration'], meta: { name: 'Registration' } }
    /**
     * Find zero or one Registration that matches the filter.
     * @param {RegistrationFindUniqueArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegistrationFindUniqueArgs>(args: SelectSubset<T, RegistrationFindUniqueArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Registration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RegistrationFindUniqueOrThrowArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegistrationFindUniqueOrThrowArgs>(args: SelectSubset<T, RegistrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationFindFirstArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegistrationFindFirstArgs>(args?: SelectSubset<T, RegistrationFindFirstArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationFindFirstOrThrowArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegistrationFindFirstOrThrowArgs>(args?: SelectSubset<T, RegistrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Registrations
     * const registrations = await prisma.registration.findMany()
     * 
     * // Get first 10 Registrations
     * const registrations = await prisma.registration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registrationWithIdOnly = await prisma.registration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegistrationFindManyArgs>(args?: SelectSubset<T, RegistrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Registration.
     * @param {RegistrationCreateArgs} args - Arguments to create a Registration.
     * @example
     * // Create one Registration
     * const Registration = await prisma.registration.create({
     *   data: {
     *     // ... data to create a Registration
     *   }
     * })
     * 
     */
    create<T extends RegistrationCreateArgs>(args: SelectSubset<T, RegistrationCreateArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Registrations.
     * @param {RegistrationCreateManyArgs} args - Arguments to create many Registrations.
     * @example
     * // Create many Registrations
     * const registration = await prisma.registration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegistrationCreateManyArgs>(args?: SelectSubset<T, RegistrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Registrations and returns the data saved in the database.
     * @param {RegistrationCreateManyAndReturnArgs} args - Arguments to create many Registrations.
     * @example
     * // Create many Registrations
     * const registration = await prisma.registration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Registrations and only return the `id`
     * const registrationWithIdOnly = await prisma.registration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegistrationCreateManyAndReturnArgs>(args?: SelectSubset<T, RegistrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Registration.
     * @param {RegistrationDeleteArgs} args - Arguments to delete one Registration.
     * @example
     * // Delete one Registration
     * const Registration = await prisma.registration.delete({
     *   where: {
     *     // ... filter to delete one Registration
     *   }
     * })
     * 
     */
    delete<T extends RegistrationDeleteArgs>(args: SelectSubset<T, RegistrationDeleteArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Registration.
     * @param {RegistrationUpdateArgs} args - Arguments to update one Registration.
     * @example
     * // Update one Registration
     * const registration = await prisma.registration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegistrationUpdateArgs>(args: SelectSubset<T, RegistrationUpdateArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Registrations.
     * @param {RegistrationDeleteManyArgs} args - Arguments to filter Registrations to delete.
     * @example
     * // Delete a few Registrations
     * const { count } = await prisma.registration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegistrationDeleteManyArgs>(args?: SelectSubset<T, RegistrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Registrations
     * const registration = await prisma.registration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegistrationUpdateManyArgs>(args: SelectSubset<T, RegistrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registrations and returns the data updated in the database.
     * @param {RegistrationUpdateManyAndReturnArgs} args - Arguments to update many Registrations.
     * @example
     * // Update many Registrations
     * const registration = await prisma.registration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Registrations and only return the `id`
     * const registrationWithIdOnly = await prisma.registration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RegistrationUpdateManyAndReturnArgs>(args: SelectSubset<T, RegistrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Registration.
     * @param {RegistrationUpsertArgs} args - Arguments to update or create a Registration.
     * @example
     * // Update or create a Registration
     * const registration = await prisma.registration.upsert({
     *   create: {
     *     // ... data to create a Registration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Registration we want to update
     *   }
     * })
     */
    upsert<T extends RegistrationUpsertArgs>(args: SelectSubset<T, RegistrationUpsertArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationCountArgs} args - Arguments to filter Registrations to count.
     * @example
     * // Count the number of Registrations
     * const count = await prisma.registration.count({
     *   where: {
     *     // ... the filter for the Registrations we want to count
     *   }
     * })
    **/
    count<T extends RegistrationCountArgs>(
      args?: Subset<T, RegistrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistrationAggregateArgs>(args: Subset<T, RegistrationAggregateArgs>): Prisma.PrismaPromise<GetRegistrationAggregateType<T>>

    /**
     * Group by Registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegistrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegistrationGroupByArgs['orderBy'] }
        : { orderBy?: RegistrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Registration model
   */
  readonly fields: RegistrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Registration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegistrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    receivedAppointments<T extends Registration$receivedAppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Registration$receivedAppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentAppointments<T extends Registration$sentAppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Registration$sentAppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    games<T extends Registration$gamesArgs<ExtArgs> = {}>(args?: Subset<T, Registration$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participantBadges<T extends Registration$participantBadgesArgs<ExtArgs> = {}>(args?: Subset<T, Registration$participantBadgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ticket<T extends Registration$ticketArgs<ExtArgs> = {}>(args?: Subset<T, Registration$ticketArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    sessions<T extends Registration$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Registration$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userEventScores<T extends Registration$userEventScoresArgs<ExtArgs> = {}>(args?: Subset<T, Registration$userEventScoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Registration model
   */
  interface RegistrationFieldRefs {
    readonly id: FieldRef<"Registration", 'String'>
    readonly firstName: FieldRef<"Registration", 'String'>
    readonly lastName: FieldRef<"Registration", 'String'>
    readonly email: FieldRef<"Registration", 'String'>
    readonly phone: FieldRef<"Registration", 'String'>
    readonly type: FieldRef<"Registration", 'String'>
    readonly eventId: FieldRef<"Registration", 'String'>
    readonly ticketId: FieldRef<"Registration", 'String'>
    readonly qrCode: FieldRef<"Registration", 'String'>
    readonly createdAt: FieldRef<"Registration", 'DateTime'>
    readonly updatedAt: FieldRef<"Registration", 'DateTime'>
    readonly checkedIn: FieldRef<"Registration", 'Boolean'>
    readonly checkInTime: FieldRef<"Registration", 'DateTime'>
    readonly shortCode: FieldRef<"Registration", 'String'>
    readonly company: FieldRef<"Registration", 'String'>
    readonly jobTitle: FieldRef<"Registration", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Registration findUnique
   */
  export type RegistrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where: RegistrationWhereUniqueInput
  }

  /**
   * Registration findUniqueOrThrow
   */
  export type RegistrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where: RegistrationWhereUniqueInput
  }

  /**
   * Registration findFirst
   */
  export type RegistrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registrations.
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registrations.
     */
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * Registration findFirstOrThrow
   */
  export type RegistrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registrations.
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registrations.
     */
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * Registration findMany
   */
  export type RegistrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter, which Registrations to fetch.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Registrations.
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * Registration create
   */
  export type RegistrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * The data needed to create a Registration.
     */
    data: XOR<RegistrationCreateInput, RegistrationUncheckedCreateInput>
  }

  /**
   * Registration createMany
   */
  export type RegistrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Registrations.
     */
    data: RegistrationCreateManyInput | RegistrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Registration createManyAndReturn
   */
  export type RegistrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * The data used to create many Registrations.
     */
    data: RegistrationCreateManyInput | RegistrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Registration update
   */
  export type RegistrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * The data needed to update a Registration.
     */
    data: XOR<RegistrationUpdateInput, RegistrationUncheckedUpdateInput>
    /**
     * Choose, which Registration to update.
     */
    where: RegistrationWhereUniqueInput
  }

  /**
   * Registration updateMany
   */
  export type RegistrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Registrations.
     */
    data: XOR<RegistrationUpdateManyMutationInput, RegistrationUncheckedUpdateManyInput>
    /**
     * Filter which Registrations to update
     */
    where?: RegistrationWhereInput
    /**
     * Limit how many Registrations to update.
     */
    limit?: number
  }

  /**
   * Registration updateManyAndReturn
   */
  export type RegistrationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * The data used to update Registrations.
     */
    data: XOR<RegistrationUpdateManyMutationInput, RegistrationUncheckedUpdateManyInput>
    /**
     * Filter which Registrations to update
     */
    where?: RegistrationWhereInput
    /**
     * Limit how many Registrations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Registration upsert
   */
  export type RegistrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * The filter to search for the Registration to update in case it exists.
     */
    where: RegistrationWhereUniqueInput
    /**
     * In case the Registration found by the `where` argument doesn't exist, create a new Registration with this data.
     */
    create: XOR<RegistrationCreateInput, RegistrationUncheckedCreateInput>
    /**
     * In case the Registration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegistrationUpdateInput, RegistrationUncheckedUpdateInput>
  }

  /**
   * Registration delete
   */
  export type RegistrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter which Registration to delete.
     */
    where: RegistrationWhereUniqueInput
  }

  /**
   * Registration deleteMany
   */
  export type RegistrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registrations to delete
     */
    where?: RegistrationWhereInput
    /**
     * Limit how many Registrations to delete.
     */
    limit?: number
  }

  /**
   * Registration.receivedAppointments
   */
  export type Registration$receivedAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Registration.sentAppointments
   */
  export type Registration$sentAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Registration.games
   */
  export type Registration$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Registration.participantBadges
   */
  export type Registration$participantBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    where?: ParticipantBadgeWhereInput
    orderBy?: ParticipantBadgeOrderByWithRelationInput | ParticipantBadgeOrderByWithRelationInput[]
    cursor?: ParticipantBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParticipantBadgeScalarFieldEnum | ParticipantBadgeScalarFieldEnum[]
  }

  /**
   * Registration.ticket
   */
  export type Registration$ticketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
  }

  /**
   * Registration.sessions
   */
  export type Registration$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    where?: SessionParticipantWhereInput
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    cursor?: SessionParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionParticipantScalarFieldEnum | SessionParticipantScalarFieldEnum[]
  }

  /**
   * Registration.userEventScores
   */
  export type Registration$userEventScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
    where?: UserEventScoreWhereInput
    orderBy?: UserEventScoreOrderByWithRelationInput | UserEventScoreOrderByWithRelationInput[]
    cursor?: UserEventScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserEventScoreScalarFieldEnum | UserEventScoreScalarFieldEnum[]
  }

  /**
   * Registration without action
   */
  export type RegistrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
  }


  /**
   * Model Ticket
   */

  export type AggregateTicket = {
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  export type TicketAvgAggregateOutputType = {
    price: Decimal | null
    quantity: number | null
    sold: number | null
  }

  export type TicketSumAggregateOutputType = {
    price: Decimal | null
    quantity: number | null
    sold: number | null
  }

  export type TicketMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    price: Decimal | null
    currency: string | null
    quantity: number | null
    sold: number | null
    status: string | null
    visibility: string | null
    validFrom: Date | null
    validUntil: Date | null
    group: string | null
    eventId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TicketMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    price: Decimal | null
    currency: string | null
    quantity: number | null
    sold: number | null
    status: string | null
    visibility: string | null
    validFrom: Date | null
    validUntil: Date | null
    group: string | null
    eventId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TicketCountAggregateOutputType = {
    id: number
    name: number
    description: number
    price: number
    currency: number
    quantity: number
    sold: number
    status: number
    visibility: number
    validFrom: number
    validUntil: number
    group: number
    eventId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TicketAvgAggregateInputType = {
    price?: true
    quantity?: true
    sold?: true
  }

  export type TicketSumAggregateInputType = {
    price?: true
    quantity?: true
    sold?: true
  }

  export type TicketMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    currency?: true
    quantity?: true
    sold?: true
    status?: true
    visibility?: true
    validFrom?: true
    validUntil?: true
    group?: true
    eventId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TicketMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    currency?: true
    quantity?: true
    sold?: true
    status?: true
    visibility?: true
    validFrom?: true
    validUntil?: true
    group?: true
    eventId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TicketCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    currency?: true
    quantity?: true
    sold?: true
    status?: true
    visibility?: true
    validFrom?: true
    validUntil?: true
    group?: true
    eventId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticket to aggregate.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketMaxAggregateInputType
  }

  export type GetTicketAggregateType<T extends TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket[P]>
      : GetScalarType<T[P], AggregateTicket[P]>
  }




  export type TicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithAggregationInput | TicketOrderByWithAggregationInput[]
    by: TicketScalarFieldEnum[] | TicketScalarFieldEnum
    having?: TicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketCountAggregateInputType | true
    _avg?: TicketAvgAggregateInputType
    _sum?: TicketSumAggregateInputType
    _min?: TicketMinAggregateInputType
    _max?: TicketMaxAggregateInputType
  }

  export type TicketGroupByOutputType = {
    id: string
    name: string
    description: string | null
    price: Decimal
    currency: string
    quantity: number | null
    sold: number
    status: string
    visibility: string
    validFrom: Date
    validUntil: Date
    group: string
    eventId: string
    createdAt: Date
    updatedAt: Date
    _count: TicketCountAggregateOutputType | null
    _avg: TicketAvgAggregateOutputType | null
    _sum: TicketSumAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  type GetTicketGroupByPayload<T extends TicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketGroupByOutputType[P]>
            : GetScalarType<T[P], TicketGroupByOutputType[P]>
        }
      >
    >


  export type TicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    currency?: boolean
    quantity?: boolean
    sold?: boolean
    status?: boolean
    visibility?: boolean
    validFrom?: boolean
    validUntil?: boolean
    group?: boolean
    eventId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    registrations?: boolean | Ticket$registrationsArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    _count?: boolean | TicketCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    currency?: boolean
    quantity?: boolean
    sold?: boolean
    status?: boolean
    visibility?: boolean
    validFrom?: boolean
    validUntil?: boolean
    group?: boolean
    eventId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    currency?: boolean
    quantity?: boolean
    sold?: boolean
    status?: boolean
    visibility?: boolean
    validFrom?: boolean
    validUntil?: boolean
    group?: boolean
    eventId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    currency?: boolean
    quantity?: boolean
    sold?: boolean
    status?: boolean
    visibility?: boolean
    validFrom?: boolean
    validUntil?: boolean
    group?: boolean
    eventId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TicketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "price" | "currency" | "quantity" | "sold" | "status" | "visibility" | "validFrom" | "validUntil" | "group" | "eventId" | "createdAt" | "updatedAt", ExtArgs["result"]["ticket"]>
  export type TicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations?: boolean | Ticket$registrationsArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    _count?: boolean | TicketCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type TicketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $TicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ticket"
    objects: {
      registrations: Prisma.$RegistrationPayload<ExtArgs>[]
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      price: Prisma.Decimal
      currency: string
      quantity: number | null
      sold: number
      status: string
      visibility: string
      validFrom: Date
      validUntil: Date
      group: string
      eventId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ticket"]>
    composites: {}
  }

  type TicketGetPayload<S extends boolean | null | undefined | TicketDefaultArgs> = $Result.GetResult<Prisma.$TicketPayload, S>

  type TicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TicketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TicketCountAggregateInputType | true
    }

  export interface TicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ticket'], meta: { name: 'Ticket' } }
    /**
     * Find zero or one Ticket that matches the filter.
     * @param {TicketFindUniqueArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketFindUniqueArgs>(args: SelectSubset<T, TicketFindUniqueArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ticket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TicketFindUniqueOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketFindFirstArgs>(args?: SelectSubset<T, TicketFindFirstArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.ticket.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.ticket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketWithIdOnly = await prisma.ticket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TicketFindManyArgs>(args?: SelectSubset<T, TicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ticket.
     * @param {TicketCreateArgs} args - Arguments to create a Ticket.
     * @example
     * // Create one Ticket
     * const Ticket = await prisma.ticket.create({
     *   data: {
     *     // ... data to create a Ticket
     *   }
     * })
     * 
     */
    create<T extends TicketCreateArgs>(args: SelectSubset<T, TicketCreateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tickets.
     * @param {TicketCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketCreateManyArgs>(args?: SelectSubset<T, TicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tickets and returns the data saved in the database.
     * @param {TicketCreateManyAndReturnArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const ticket = await prisma.ticket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tickets and only return the `id`
     * const ticketWithIdOnly = await prisma.ticket.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TicketCreateManyAndReturnArgs>(args?: SelectSubset<T, TicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ticket.
     * @param {TicketDeleteArgs} args - Arguments to delete one Ticket.
     * @example
     * // Delete one Ticket
     * const Ticket = await prisma.ticket.delete({
     *   where: {
     *     // ... filter to delete one Ticket
     *   }
     * })
     * 
     */
    delete<T extends TicketDeleteArgs>(args: SelectSubset<T, TicketDeleteArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ticket.
     * @param {TicketUpdateArgs} args - Arguments to update one Ticket.
     * @example
     * // Update one Ticket
     * const ticket = await prisma.ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketUpdateArgs>(args: SelectSubset<T, TicketUpdateArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tickets.
     * @param {TicketDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketDeleteManyArgs>(args?: SelectSubset<T, TicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketUpdateManyArgs>(args: SelectSubset<T, TicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets and returns the data updated in the database.
     * @param {TicketUpdateManyAndReturnArgs} args - Arguments to update many Tickets.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tickets and only return the `id`
     * const ticketWithIdOnly = await prisma.ticket.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TicketUpdateManyAndReturnArgs>(args: SelectSubset<T, TicketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ticket.
     * @param {TicketUpsertArgs} args - Arguments to update or create a Ticket.
     * @example
     * // Update or create a Ticket
     * const ticket = await prisma.ticket.upsert({
     *   create: {
     *     // ... data to create a Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket we want to update
     *   }
     * })
     */
    upsert<T extends TicketUpsertArgs>(args: SelectSubset<T, TicketUpsertArgs<ExtArgs>>): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.ticket.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketCountArgs>(
      args?: Subset<T, TicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketAggregateArgs>(args: Subset<T, TicketAggregateArgs>): Prisma.PrismaPromise<GetTicketAggregateType<T>>

    /**
     * Group by Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketGroupByArgs['orderBy'] }
        : { orderBy?: TicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ticket model
   */
  readonly fields: TicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrations<T extends Ticket$registrationsArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$registrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ticket model
   */
  interface TicketFieldRefs {
    readonly id: FieldRef<"Ticket", 'String'>
    readonly name: FieldRef<"Ticket", 'String'>
    readonly description: FieldRef<"Ticket", 'String'>
    readonly price: FieldRef<"Ticket", 'Decimal'>
    readonly currency: FieldRef<"Ticket", 'String'>
    readonly quantity: FieldRef<"Ticket", 'Int'>
    readonly sold: FieldRef<"Ticket", 'Int'>
    readonly status: FieldRef<"Ticket", 'String'>
    readonly visibility: FieldRef<"Ticket", 'String'>
    readonly validFrom: FieldRef<"Ticket", 'DateTime'>
    readonly validUntil: FieldRef<"Ticket", 'DateTime'>
    readonly group: FieldRef<"Ticket", 'String'>
    readonly eventId: FieldRef<"Ticket", 'String'>
    readonly createdAt: FieldRef<"Ticket", 'DateTime'>
    readonly updatedAt: FieldRef<"Ticket", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ticket findUnique
   */
  export type TicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findUniqueOrThrow
   */
  export type TicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket findFirst
   */
  export type TicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findFirstOrThrow
   */
  export type TicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket findMany
   */
  export type TicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }

  /**
   * Ticket create
   */
  export type TicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to create a Ticket.
     */
    data: XOR<TicketCreateInput, TicketUncheckedCreateInput>
  }

  /**
   * Ticket createMany
   */
  export type TicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tickets.
     */
    data: TicketCreateManyInput | TicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ticket createManyAndReturn
   */
  export type TicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * The data used to create many Tickets.
     */
    data: TicketCreateManyInput | TicketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ticket update
   */
  export type TicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to update a Ticket.
     */
    data: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
    /**
     * Choose, which Ticket to update.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket updateMany
   */
  export type TicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketWhereInput
    /**
     * Limit how many Tickets to update.
     */
    limit?: number
  }

  /**
   * Ticket updateManyAndReturn
   */
  export type TicketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketWhereInput
    /**
     * Limit how many Tickets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ticket upsert
   */
  export type TicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The filter to search for the Ticket to update in case it exists.
     */
    where: TicketWhereUniqueInput
    /**
     * In case the Ticket found by the `where` argument doesn't exist, create a new Ticket with this data.
     */
    create: XOR<TicketCreateInput, TicketUncheckedCreateInput>
    /**
     * In case the Ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
  }

  /**
   * Ticket delete
   */
  export type TicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter which Ticket to delete.
     */
    where: TicketWhereUniqueInput
  }

  /**
   * Ticket deleteMany
   */
  export type TicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to delete
     */
    where?: TicketWhereInput
    /**
     * Limit how many Tickets to delete.
     */
    limit?: number
  }

  /**
   * Ticket.registrations
   */
  export type Ticket$registrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Registration
     */
    omit?: RegistrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    where?: RegistrationWhereInput
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    cursor?: RegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * Ticket without action
   */
  export type TicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ticket
     */
    omit?: TicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketInclude<ExtArgs> | null
  }


  /**
   * Model event_sessions
   */

  export type AggregateEvent_sessions = {
    _count: Event_sessionsCountAggregateOutputType | null
    _avg: Event_sessionsAvgAggregateOutputType | null
    _sum: Event_sessionsSumAggregateOutputType | null
    _min: Event_sessionsMinAggregateOutputType | null
    _max: Event_sessionsMaxAggregateOutputType | null
  }

  export type Event_sessionsAvgAggregateOutputType = {
    capacity: number | null
  }

  export type Event_sessionsSumAggregateOutputType = {
    capacity: number | null
  }

  export type Event_sessionsMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    start_date: Date | null
    end_date: Date | null
    start_time: string | null
    end_time: string | null
    location: string | null
    speaker: string | null
    capacity: number | null
    event_id: string | null
    created_at: Date | null
    updated_at: Date | null
    banner: string | null
    format: string | null
    video_url: string | null
  }

  export type Event_sessionsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    start_date: Date | null
    end_date: Date | null
    start_time: string | null
    end_time: string | null
    location: string | null
    speaker: string | null
    capacity: number | null
    event_id: string | null
    created_at: Date | null
    updated_at: Date | null
    banner: string | null
    format: string | null
    video_url: string | null
  }

  export type Event_sessionsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    start_date: number
    end_date: number
    start_time: number
    end_time: number
    location: number
    speaker: number
    capacity: number
    event_id: number
    created_at: number
    updated_at: number
    banner: number
    format: number
    video_url: number
    _all: number
  }


  export type Event_sessionsAvgAggregateInputType = {
    capacity?: true
  }

  export type Event_sessionsSumAggregateInputType = {
    capacity?: true
  }

  export type Event_sessionsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    start_date?: true
    end_date?: true
    start_time?: true
    end_time?: true
    location?: true
    speaker?: true
    capacity?: true
    event_id?: true
    created_at?: true
    updated_at?: true
    banner?: true
    format?: true
    video_url?: true
  }

  export type Event_sessionsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    start_date?: true
    end_date?: true
    start_time?: true
    end_time?: true
    location?: true
    speaker?: true
    capacity?: true
    event_id?: true
    created_at?: true
    updated_at?: true
    banner?: true
    format?: true
    video_url?: true
  }

  export type Event_sessionsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    start_date?: true
    end_date?: true
    start_time?: true
    end_time?: true
    location?: true
    speaker?: true
    capacity?: true
    event_id?: true
    created_at?: true
    updated_at?: true
    banner?: true
    format?: true
    video_url?: true
    _all?: true
  }

  export type Event_sessionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which event_sessions to aggregate.
     */
    where?: event_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_sessions to fetch.
     */
    orderBy?: event_sessionsOrderByWithRelationInput | event_sessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: event_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned event_sessions
    **/
    _count?: true | Event_sessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Event_sessionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Event_sessionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Event_sessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Event_sessionsMaxAggregateInputType
  }

  export type GetEvent_sessionsAggregateType<T extends Event_sessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent_sessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent_sessions[P]>
      : GetScalarType<T[P], AggregateEvent_sessions[P]>
  }




  export type event_sessionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: event_sessionsWhereInput
    orderBy?: event_sessionsOrderByWithAggregationInput | event_sessionsOrderByWithAggregationInput[]
    by: Event_sessionsScalarFieldEnum[] | Event_sessionsScalarFieldEnum
    having?: event_sessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Event_sessionsCountAggregateInputType | true
    _avg?: Event_sessionsAvgAggregateInputType
    _sum?: Event_sessionsSumAggregateInputType
    _min?: Event_sessionsMinAggregateInputType
    _max?: Event_sessionsMaxAggregateInputType
  }

  export type Event_sessionsGroupByOutputType = {
    id: string
    title: string
    description: string | null
    start_date: Date
    end_date: Date
    start_time: string
    end_time: string
    location: string | null
    speaker: string | null
    capacity: number | null
    event_id: string
    created_at: Date
    updated_at: Date
    banner: string | null
    format: string | null
    video_url: string | null
    _count: Event_sessionsCountAggregateOutputType | null
    _avg: Event_sessionsAvgAggregateOutputType | null
    _sum: Event_sessionsSumAggregateOutputType | null
    _min: Event_sessionsMinAggregateOutputType | null
    _max: Event_sessionsMaxAggregateOutputType | null
  }

  type GetEvent_sessionsGroupByPayload<T extends event_sessionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Event_sessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Event_sessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Event_sessionsGroupByOutputType[P]>
            : GetScalarType<T[P], Event_sessionsGroupByOutputType[P]>
        }
      >
    >


  export type event_sessionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    start_date?: boolean
    end_date?: boolean
    start_time?: boolean
    end_time?: boolean
    location?: boolean
    speaker?: boolean
    capacity?: boolean
    event_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    banner?: boolean
    format?: boolean
    video_url?: boolean
    events?: boolean | EventDefaultArgs<ExtArgs>
    participants?: boolean | event_sessions$participantsArgs<ExtArgs>
    _count?: boolean | Event_sessionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event_sessions"]>

  export type event_sessionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    start_date?: boolean
    end_date?: boolean
    start_time?: boolean
    end_time?: boolean
    location?: boolean
    speaker?: boolean
    capacity?: boolean
    event_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    banner?: boolean
    format?: boolean
    video_url?: boolean
    events?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event_sessions"]>

  export type event_sessionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    start_date?: boolean
    end_date?: boolean
    start_time?: boolean
    end_time?: boolean
    location?: boolean
    speaker?: boolean
    capacity?: boolean
    event_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    banner?: boolean
    format?: boolean
    video_url?: boolean
    events?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event_sessions"]>

  export type event_sessionsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    start_date?: boolean
    end_date?: boolean
    start_time?: boolean
    end_time?: boolean
    location?: boolean
    speaker?: boolean
    capacity?: boolean
    event_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    banner?: boolean
    format?: boolean
    video_url?: boolean
  }

  export type event_sessionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "start_date" | "end_date" | "start_time" | "end_time" | "location" | "speaker" | "capacity" | "event_id" | "created_at" | "updated_at" | "banner" | "format" | "video_url", ExtArgs["result"]["event_sessions"]>
  export type event_sessionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | EventDefaultArgs<ExtArgs>
    participants?: boolean | event_sessions$participantsArgs<ExtArgs>
    _count?: boolean | Event_sessionsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type event_sessionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type event_sessionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $event_sessionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "event_sessions"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>
      participants: Prisma.$SessionParticipantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      start_date: Date
      end_date: Date
      start_time: string
      end_time: string
      location: string | null
      speaker: string | null
      capacity: number | null
      event_id: string
      created_at: Date
      updated_at: Date
      banner: string | null
      format: string | null
      video_url: string | null
    }, ExtArgs["result"]["event_sessions"]>
    composites: {}
  }

  type event_sessionsGetPayload<S extends boolean | null | undefined | event_sessionsDefaultArgs> = $Result.GetResult<Prisma.$event_sessionsPayload, S>

  type event_sessionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<event_sessionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Event_sessionsCountAggregateInputType | true
    }

  export interface event_sessionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['event_sessions'], meta: { name: 'event_sessions' } }
    /**
     * Find zero or one Event_sessions that matches the filter.
     * @param {event_sessionsFindUniqueArgs} args - Arguments to find a Event_sessions
     * @example
     * // Get one Event_sessions
     * const event_sessions = await prisma.event_sessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends event_sessionsFindUniqueArgs>(args: SelectSubset<T, event_sessionsFindUniqueArgs<ExtArgs>>): Prisma__event_sessionsClient<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event_sessions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {event_sessionsFindUniqueOrThrowArgs} args - Arguments to find a Event_sessions
     * @example
     * // Get one Event_sessions
     * const event_sessions = await prisma.event_sessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends event_sessionsFindUniqueOrThrowArgs>(args: SelectSubset<T, event_sessionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__event_sessionsClient<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event_sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_sessionsFindFirstArgs} args - Arguments to find a Event_sessions
     * @example
     * // Get one Event_sessions
     * const event_sessions = await prisma.event_sessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends event_sessionsFindFirstArgs>(args?: SelectSubset<T, event_sessionsFindFirstArgs<ExtArgs>>): Prisma__event_sessionsClient<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event_sessions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_sessionsFindFirstOrThrowArgs} args - Arguments to find a Event_sessions
     * @example
     * // Get one Event_sessions
     * const event_sessions = await prisma.event_sessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends event_sessionsFindFirstOrThrowArgs>(args?: SelectSubset<T, event_sessionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__event_sessionsClient<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Event_sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_sessionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Event_sessions
     * const event_sessions = await prisma.event_sessions.findMany()
     * 
     * // Get first 10 Event_sessions
     * const event_sessions = await prisma.event_sessions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const event_sessionsWithIdOnly = await prisma.event_sessions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends event_sessionsFindManyArgs>(args?: SelectSubset<T, event_sessionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event_sessions.
     * @param {event_sessionsCreateArgs} args - Arguments to create a Event_sessions.
     * @example
     * // Create one Event_sessions
     * const Event_sessions = await prisma.event_sessions.create({
     *   data: {
     *     // ... data to create a Event_sessions
     *   }
     * })
     * 
     */
    create<T extends event_sessionsCreateArgs>(args: SelectSubset<T, event_sessionsCreateArgs<ExtArgs>>): Prisma__event_sessionsClient<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Event_sessions.
     * @param {event_sessionsCreateManyArgs} args - Arguments to create many Event_sessions.
     * @example
     * // Create many Event_sessions
     * const event_sessions = await prisma.event_sessions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends event_sessionsCreateManyArgs>(args?: SelectSubset<T, event_sessionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Event_sessions and returns the data saved in the database.
     * @param {event_sessionsCreateManyAndReturnArgs} args - Arguments to create many Event_sessions.
     * @example
     * // Create many Event_sessions
     * const event_sessions = await prisma.event_sessions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Event_sessions and only return the `id`
     * const event_sessionsWithIdOnly = await prisma.event_sessions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends event_sessionsCreateManyAndReturnArgs>(args?: SelectSubset<T, event_sessionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event_sessions.
     * @param {event_sessionsDeleteArgs} args - Arguments to delete one Event_sessions.
     * @example
     * // Delete one Event_sessions
     * const Event_sessions = await prisma.event_sessions.delete({
     *   where: {
     *     // ... filter to delete one Event_sessions
     *   }
     * })
     * 
     */
    delete<T extends event_sessionsDeleteArgs>(args: SelectSubset<T, event_sessionsDeleteArgs<ExtArgs>>): Prisma__event_sessionsClient<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event_sessions.
     * @param {event_sessionsUpdateArgs} args - Arguments to update one Event_sessions.
     * @example
     * // Update one Event_sessions
     * const event_sessions = await prisma.event_sessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends event_sessionsUpdateArgs>(args: SelectSubset<T, event_sessionsUpdateArgs<ExtArgs>>): Prisma__event_sessionsClient<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Event_sessions.
     * @param {event_sessionsDeleteManyArgs} args - Arguments to filter Event_sessions to delete.
     * @example
     * // Delete a few Event_sessions
     * const { count } = await prisma.event_sessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends event_sessionsDeleteManyArgs>(args?: SelectSubset<T, event_sessionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Event_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_sessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Event_sessions
     * const event_sessions = await prisma.event_sessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends event_sessionsUpdateManyArgs>(args: SelectSubset<T, event_sessionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Event_sessions and returns the data updated in the database.
     * @param {event_sessionsUpdateManyAndReturnArgs} args - Arguments to update many Event_sessions.
     * @example
     * // Update many Event_sessions
     * const event_sessions = await prisma.event_sessions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Event_sessions and only return the `id`
     * const event_sessionsWithIdOnly = await prisma.event_sessions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends event_sessionsUpdateManyAndReturnArgs>(args: SelectSubset<T, event_sessionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event_sessions.
     * @param {event_sessionsUpsertArgs} args - Arguments to update or create a Event_sessions.
     * @example
     * // Update or create a Event_sessions
     * const event_sessions = await prisma.event_sessions.upsert({
     *   create: {
     *     // ... data to create a Event_sessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event_sessions we want to update
     *   }
     * })
     */
    upsert<T extends event_sessionsUpsertArgs>(args: SelectSubset<T, event_sessionsUpsertArgs<ExtArgs>>): Prisma__event_sessionsClient<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Event_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_sessionsCountArgs} args - Arguments to filter Event_sessions to count.
     * @example
     * // Count the number of Event_sessions
     * const count = await prisma.event_sessions.count({
     *   where: {
     *     // ... the filter for the Event_sessions we want to count
     *   }
     * })
    **/
    count<T extends event_sessionsCountArgs>(
      args?: Subset<T, event_sessionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Event_sessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Event_sessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Event_sessionsAggregateArgs>(args: Subset<T, Event_sessionsAggregateArgs>): Prisma.PrismaPromise<GetEvent_sessionsAggregateType<T>>

    /**
     * Group by Event_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_sessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends event_sessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: event_sessionsGroupByArgs['orderBy'] }
        : { orderBy?: event_sessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, event_sessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEvent_sessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the event_sessions model
   */
  readonly fields: event_sessionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for event_sessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__event_sessionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    participants<T extends event_sessions$participantsArgs<ExtArgs> = {}>(args?: Subset<T, event_sessions$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the event_sessions model
   */
  interface event_sessionsFieldRefs {
    readonly id: FieldRef<"event_sessions", 'String'>
    readonly title: FieldRef<"event_sessions", 'String'>
    readonly description: FieldRef<"event_sessions", 'String'>
    readonly start_date: FieldRef<"event_sessions", 'DateTime'>
    readonly end_date: FieldRef<"event_sessions", 'DateTime'>
    readonly start_time: FieldRef<"event_sessions", 'String'>
    readonly end_time: FieldRef<"event_sessions", 'String'>
    readonly location: FieldRef<"event_sessions", 'String'>
    readonly speaker: FieldRef<"event_sessions", 'String'>
    readonly capacity: FieldRef<"event_sessions", 'Int'>
    readonly event_id: FieldRef<"event_sessions", 'String'>
    readonly created_at: FieldRef<"event_sessions", 'DateTime'>
    readonly updated_at: FieldRef<"event_sessions", 'DateTime'>
    readonly banner: FieldRef<"event_sessions", 'String'>
    readonly format: FieldRef<"event_sessions", 'String'>
    readonly video_url: FieldRef<"event_sessions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * event_sessions findUnique
   */
  export type event_sessionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsInclude<ExtArgs> | null
    /**
     * Filter, which event_sessions to fetch.
     */
    where: event_sessionsWhereUniqueInput
  }

  /**
   * event_sessions findUniqueOrThrow
   */
  export type event_sessionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsInclude<ExtArgs> | null
    /**
     * Filter, which event_sessions to fetch.
     */
    where: event_sessionsWhereUniqueInput
  }

  /**
   * event_sessions findFirst
   */
  export type event_sessionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsInclude<ExtArgs> | null
    /**
     * Filter, which event_sessions to fetch.
     */
    where?: event_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_sessions to fetch.
     */
    orderBy?: event_sessionsOrderByWithRelationInput | event_sessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for event_sessions.
     */
    cursor?: event_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of event_sessions.
     */
    distinct?: Event_sessionsScalarFieldEnum | Event_sessionsScalarFieldEnum[]
  }

  /**
   * event_sessions findFirstOrThrow
   */
  export type event_sessionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsInclude<ExtArgs> | null
    /**
     * Filter, which event_sessions to fetch.
     */
    where?: event_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_sessions to fetch.
     */
    orderBy?: event_sessionsOrderByWithRelationInput | event_sessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for event_sessions.
     */
    cursor?: event_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of event_sessions.
     */
    distinct?: Event_sessionsScalarFieldEnum | Event_sessionsScalarFieldEnum[]
  }

  /**
   * event_sessions findMany
   */
  export type event_sessionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsInclude<ExtArgs> | null
    /**
     * Filter, which event_sessions to fetch.
     */
    where?: event_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_sessions to fetch.
     */
    orderBy?: event_sessionsOrderByWithRelationInput | event_sessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing event_sessions.
     */
    cursor?: event_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_sessions.
     */
    skip?: number
    distinct?: Event_sessionsScalarFieldEnum | Event_sessionsScalarFieldEnum[]
  }

  /**
   * event_sessions create
   */
  export type event_sessionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsInclude<ExtArgs> | null
    /**
     * The data needed to create a event_sessions.
     */
    data: XOR<event_sessionsCreateInput, event_sessionsUncheckedCreateInput>
  }

  /**
   * event_sessions createMany
   */
  export type event_sessionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many event_sessions.
     */
    data: event_sessionsCreateManyInput | event_sessionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * event_sessions createManyAndReturn
   */
  export type event_sessionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * The data used to create many event_sessions.
     */
    data: event_sessionsCreateManyInput | event_sessionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * event_sessions update
   */
  export type event_sessionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsInclude<ExtArgs> | null
    /**
     * The data needed to update a event_sessions.
     */
    data: XOR<event_sessionsUpdateInput, event_sessionsUncheckedUpdateInput>
    /**
     * Choose, which event_sessions to update.
     */
    where: event_sessionsWhereUniqueInput
  }

  /**
   * event_sessions updateMany
   */
  export type event_sessionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update event_sessions.
     */
    data: XOR<event_sessionsUpdateManyMutationInput, event_sessionsUncheckedUpdateManyInput>
    /**
     * Filter which event_sessions to update
     */
    where?: event_sessionsWhereInput
    /**
     * Limit how many event_sessions to update.
     */
    limit?: number
  }

  /**
   * event_sessions updateManyAndReturn
   */
  export type event_sessionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * The data used to update event_sessions.
     */
    data: XOR<event_sessionsUpdateManyMutationInput, event_sessionsUncheckedUpdateManyInput>
    /**
     * Filter which event_sessions to update
     */
    where?: event_sessionsWhereInput
    /**
     * Limit how many event_sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * event_sessions upsert
   */
  export type event_sessionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsInclude<ExtArgs> | null
    /**
     * The filter to search for the event_sessions to update in case it exists.
     */
    where: event_sessionsWhereUniqueInput
    /**
     * In case the event_sessions found by the `where` argument doesn't exist, create a new event_sessions with this data.
     */
    create: XOR<event_sessionsCreateInput, event_sessionsUncheckedCreateInput>
    /**
     * In case the event_sessions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<event_sessionsUpdateInput, event_sessionsUncheckedUpdateInput>
  }

  /**
   * event_sessions delete
   */
  export type event_sessionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsInclude<ExtArgs> | null
    /**
     * Filter which event_sessions to delete.
     */
    where: event_sessionsWhereUniqueInput
  }

  /**
   * event_sessions deleteMany
   */
  export type event_sessionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which event_sessions to delete
     */
    where?: event_sessionsWhereInput
    /**
     * Limit how many event_sessions to delete.
     */
    limit?: number
  }

  /**
   * event_sessions.participants
   */
  export type event_sessions$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    where?: SessionParticipantWhereInput
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    cursor?: SessionParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionParticipantScalarFieldEnum | SessionParticipantScalarFieldEnum[]
  }

  /**
   * event_sessions without action
   */
  export type event_sessionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_sessions
     */
    select?: event_sessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_sessions
     */
    omit?: event_sessionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_sessionsInclude<ExtArgs> | null
  }


  /**
   * Model Sponsor
   */

  export type AggregateSponsor = {
    _count: SponsorCountAggregateOutputType | null
    _min: SponsorMinAggregateOutputType | null
    _max: SponsorMaxAggregateOutputType | null
  }

  export type SponsorMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    logo: string | null
    website: string | null
    level: string | null
    visible: boolean | null
    eventId: string | null
    location: string | null
    address: string | null
    phone: string | null
    mobile: string | null
    email: string | null
    linkedinUrl: string | null
    twitterUrl: string | null
    facebookUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SponsorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    logo: string | null
    website: string | null
    level: string | null
    visible: boolean | null
    eventId: string | null
    location: string | null
    address: string | null
    phone: string | null
    mobile: string | null
    email: string | null
    linkedinUrl: string | null
    twitterUrl: string | null
    facebookUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SponsorCountAggregateOutputType = {
    id: number
    name: number
    description: number
    logo: number
    website: number
    level: number
    visible: number
    eventId: number
    location: number
    address: number
    phone: number
    mobile: number
    email: number
    linkedinUrl: number
    twitterUrl: number
    facebookUrl: number
    documents: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SponsorMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    logo?: true
    website?: true
    level?: true
    visible?: true
    eventId?: true
    location?: true
    address?: true
    phone?: true
    mobile?: true
    email?: true
    linkedinUrl?: true
    twitterUrl?: true
    facebookUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SponsorMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    logo?: true
    website?: true
    level?: true
    visible?: true
    eventId?: true
    location?: true
    address?: true
    phone?: true
    mobile?: true
    email?: true
    linkedinUrl?: true
    twitterUrl?: true
    facebookUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SponsorCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    logo?: true
    website?: true
    level?: true
    visible?: true
    eventId?: true
    location?: true
    address?: true
    phone?: true
    mobile?: true
    email?: true
    linkedinUrl?: true
    twitterUrl?: true
    facebookUrl?: true
    documents?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SponsorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sponsor to aggregate.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: SponsorOrderByWithRelationInput | SponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sponsors
    **/
    _count?: true | SponsorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SponsorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SponsorMaxAggregateInputType
  }

  export type GetSponsorAggregateType<T extends SponsorAggregateArgs> = {
        [P in keyof T & keyof AggregateSponsor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSponsor[P]>
      : GetScalarType<T[P], AggregateSponsor[P]>
  }




  export type SponsorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SponsorWhereInput
    orderBy?: SponsorOrderByWithAggregationInput | SponsorOrderByWithAggregationInput[]
    by: SponsorScalarFieldEnum[] | SponsorScalarFieldEnum
    having?: SponsorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SponsorCountAggregateInputType | true
    _min?: SponsorMinAggregateInputType
    _max?: SponsorMaxAggregateInputType
  }

  export type SponsorGroupByOutputType = {
    id: string
    name: string
    description: string | null
    logo: string | null
    website: string | null
    level: string
    visible: boolean
    eventId: string
    location: string | null
    address: string | null
    phone: string | null
    mobile: string | null
    email: string | null
    linkedinUrl: string | null
    twitterUrl: string | null
    facebookUrl: string | null
    documents: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: SponsorCountAggregateOutputType | null
    _min: SponsorMinAggregateOutputType | null
    _max: SponsorMaxAggregateOutputType | null
  }

  type GetSponsorGroupByPayload<T extends SponsorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SponsorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SponsorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SponsorGroupByOutputType[P]>
            : GetScalarType<T[P], SponsorGroupByOutputType[P]>
        }
      >
    >


  export type SponsorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    logo?: boolean
    website?: boolean
    level?: boolean
    visible?: boolean
    eventId?: boolean
    location?: boolean
    address?: boolean
    phone?: boolean
    mobile?: boolean
    email?: boolean
    linkedinUrl?: boolean
    twitterUrl?: boolean
    facebookUrl?: boolean
    documents?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sponsor"]>

  export type SponsorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    logo?: boolean
    website?: boolean
    level?: boolean
    visible?: boolean
    eventId?: boolean
    location?: boolean
    address?: boolean
    phone?: boolean
    mobile?: boolean
    email?: boolean
    linkedinUrl?: boolean
    twitterUrl?: boolean
    facebookUrl?: boolean
    documents?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sponsor"]>

  export type SponsorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    logo?: boolean
    website?: boolean
    level?: boolean
    visible?: boolean
    eventId?: boolean
    location?: boolean
    address?: boolean
    phone?: boolean
    mobile?: boolean
    email?: boolean
    linkedinUrl?: boolean
    twitterUrl?: boolean
    facebookUrl?: boolean
    documents?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sponsor"]>

  export type SponsorSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    logo?: boolean
    website?: boolean
    level?: boolean
    visible?: boolean
    eventId?: boolean
    location?: boolean
    address?: boolean
    phone?: boolean
    mobile?: boolean
    email?: boolean
    linkedinUrl?: boolean
    twitterUrl?: boolean
    facebookUrl?: boolean
    documents?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SponsorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "logo" | "website" | "level" | "visible" | "eventId" | "location" | "address" | "phone" | "mobile" | "email" | "linkedinUrl" | "twitterUrl" | "facebookUrl" | "documents" | "createdAt" | "updatedAt", ExtArgs["result"]["sponsor"]>
  export type SponsorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type SponsorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type SponsorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $SponsorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sponsor"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      logo: string | null
      website: string | null
      level: string
      visible: boolean
      eventId: string
      location: string | null
      address: string | null
      phone: string | null
      mobile: string | null
      email: string | null
      linkedinUrl: string | null
      twitterUrl: string | null
      facebookUrl: string | null
      documents: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sponsor"]>
    composites: {}
  }

  type SponsorGetPayload<S extends boolean | null | undefined | SponsorDefaultArgs> = $Result.GetResult<Prisma.$SponsorPayload, S>

  type SponsorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SponsorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SponsorCountAggregateInputType | true
    }

  export interface SponsorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sponsor'], meta: { name: 'Sponsor' } }
    /**
     * Find zero or one Sponsor that matches the filter.
     * @param {SponsorFindUniqueArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SponsorFindUniqueArgs>(args: SelectSubset<T, SponsorFindUniqueArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sponsor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SponsorFindUniqueOrThrowArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SponsorFindUniqueOrThrowArgs>(args: SelectSubset<T, SponsorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sponsor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorFindFirstArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SponsorFindFirstArgs>(args?: SelectSubset<T, SponsorFindFirstArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sponsor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorFindFirstOrThrowArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SponsorFindFirstOrThrowArgs>(args?: SelectSubset<T, SponsorFindFirstOrThrowArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sponsors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sponsors
     * const sponsors = await prisma.sponsor.findMany()
     * 
     * // Get first 10 Sponsors
     * const sponsors = await prisma.sponsor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sponsorWithIdOnly = await prisma.sponsor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SponsorFindManyArgs>(args?: SelectSubset<T, SponsorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sponsor.
     * @param {SponsorCreateArgs} args - Arguments to create a Sponsor.
     * @example
     * // Create one Sponsor
     * const Sponsor = await prisma.sponsor.create({
     *   data: {
     *     // ... data to create a Sponsor
     *   }
     * })
     * 
     */
    create<T extends SponsorCreateArgs>(args: SelectSubset<T, SponsorCreateArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sponsors.
     * @param {SponsorCreateManyArgs} args - Arguments to create many Sponsors.
     * @example
     * // Create many Sponsors
     * const sponsor = await prisma.sponsor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SponsorCreateManyArgs>(args?: SelectSubset<T, SponsorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sponsors and returns the data saved in the database.
     * @param {SponsorCreateManyAndReturnArgs} args - Arguments to create many Sponsors.
     * @example
     * // Create many Sponsors
     * const sponsor = await prisma.sponsor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sponsors and only return the `id`
     * const sponsorWithIdOnly = await prisma.sponsor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SponsorCreateManyAndReturnArgs>(args?: SelectSubset<T, SponsorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sponsor.
     * @param {SponsorDeleteArgs} args - Arguments to delete one Sponsor.
     * @example
     * // Delete one Sponsor
     * const Sponsor = await prisma.sponsor.delete({
     *   where: {
     *     // ... filter to delete one Sponsor
     *   }
     * })
     * 
     */
    delete<T extends SponsorDeleteArgs>(args: SelectSubset<T, SponsorDeleteArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sponsor.
     * @param {SponsorUpdateArgs} args - Arguments to update one Sponsor.
     * @example
     * // Update one Sponsor
     * const sponsor = await prisma.sponsor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SponsorUpdateArgs>(args: SelectSubset<T, SponsorUpdateArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sponsors.
     * @param {SponsorDeleteManyArgs} args - Arguments to filter Sponsors to delete.
     * @example
     * // Delete a few Sponsors
     * const { count } = await prisma.sponsor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SponsorDeleteManyArgs>(args?: SelectSubset<T, SponsorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sponsors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sponsors
     * const sponsor = await prisma.sponsor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SponsorUpdateManyArgs>(args: SelectSubset<T, SponsorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sponsors and returns the data updated in the database.
     * @param {SponsorUpdateManyAndReturnArgs} args - Arguments to update many Sponsors.
     * @example
     * // Update many Sponsors
     * const sponsor = await prisma.sponsor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sponsors and only return the `id`
     * const sponsorWithIdOnly = await prisma.sponsor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SponsorUpdateManyAndReturnArgs>(args: SelectSubset<T, SponsorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sponsor.
     * @param {SponsorUpsertArgs} args - Arguments to update or create a Sponsor.
     * @example
     * // Update or create a Sponsor
     * const sponsor = await prisma.sponsor.upsert({
     *   create: {
     *     // ... data to create a Sponsor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sponsor we want to update
     *   }
     * })
     */
    upsert<T extends SponsorUpsertArgs>(args: SelectSubset<T, SponsorUpsertArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sponsors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorCountArgs} args - Arguments to filter Sponsors to count.
     * @example
     * // Count the number of Sponsors
     * const count = await prisma.sponsor.count({
     *   where: {
     *     // ... the filter for the Sponsors we want to count
     *   }
     * })
    **/
    count<T extends SponsorCountArgs>(
      args?: Subset<T, SponsorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SponsorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sponsor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SponsorAggregateArgs>(args: Subset<T, SponsorAggregateArgs>): Prisma.PrismaPromise<GetSponsorAggregateType<T>>

    /**
     * Group by Sponsor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SponsorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SponsorGroupByArgs['orderBy'] }
        : { orderBy?: SponsorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SponsorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSponsorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sponsor model
   */
  readonly fields: SponsorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sponsor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SponsorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sponsor model
   */
  interface SponsorFieldRefs {
    readonly id: FieldRef<"Sponsor", 'String'>
    readonly name: FieldRef<"Sponsor", 'String'>
    readonly description: FieldRef<"Sponsor", 'String'>
    readonly logo: FieldRef<"Sponsor", 'String'>
    readonly website: FieldRef<"Sponsor", 'String'>
    readonly level: FieldRef<"Sponsor", 'String'>
    readonly visible: FieldRef<"Sponsor", 'Boolean'>
    readonly eventId: FieldRef<"Sponsor", 'String'>
    readonly location: FieldRef<"Sponsor", 'String'>
    readonly address: FieldRef<"Sponsor", 'String'>
    readonly phone: FieldRef<"Sponsor", 'String'>
    readonly mobile: FieldRef<"Sponsor", 'String'>
    readonly email: FieldRef<"Sponsor", 'String'>
    readonly linkedinUrl: FieldRef<"Sponsor", 'String'>
    readonly twitterUrl: FieldRef<"Sponsor", 'String'>
    readonly facebookUrl: FieldRef<"Sponsor", 'String'>
    readonly documents: FieldRef<"Sponsor", 'Json'>
    readonly createdAt: FieldRef<"Sponsor", 'DateTime'>
    readonly updatedAt: FieldRef<"Sponsor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sponsor findUnique
   */
  export type SponsorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where: SponsorWhereUniqueInput
  }

  /**
   * Sponsor findUniqueOrThrow
   */
  export type SponsorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where: SponsorWhereUniqueInput
  }

  /**
   * Sponsor findFirst
   */
  export type SponsorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: SponsorOrderByWithRelationInput | SponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sponsors.
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sponsors.
     */
    distinct?: SponsorScalarFieldEnum | SponsorScalarFieldEnum[]
  }

  /**
   * Sponsor findFirstOrThrow
   */
  export type SponsorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: SponsorOrderByWithRelationInput | SponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sponsors.
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sponsors.
     */
    distinct?: SponsorScalarFieldEnum | SponsorScalarFieldEnum[]
  }

  /**
   * Sponsor findMany
   */
  export type SponsorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter, which Sponsors to fetch.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: SponsorOrderByWithRelationInput | SponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sponsors.
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    distinct?: SponsorScalarFieldEnum | SponsorScalarFieldEnum[]
  }

  /**
   * Sponsor create
   */
  export type SponsorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * The data needed to create a Sponsor.
     */
    data: XOR<SponsorCreateInput, SponsorUncheckedCreateInput>
  }

  /**
   * Sponsor createMany
   */
  export type SponsorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sponsors.
     */
    data: SponsorCreateManyInput | SponsorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sponsor createManyAndReturn
   */
  export type SponsorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * The data used to create many Sponsors.
     */
    data: SponsorCreateManyInput | SponsorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sponsor update
   */
  export type SponsorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * The data needed to update a Sponsor.
     */
    data: XOR<SponsorUpdateInput, SponsorUncheckedUpdateInput>
    /**
     * Choose, which Sponsor to update.
     */
    where: SponsorWhereUniqueInput
  }

  /**
   * Sponsor updateMany
   */
  export type SponsorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sponsors.
     */
    data: XOR<SponsorUpdateManyMutationInput, SponsorUncheckedUpdateManyInput>
    /**
     * Filter which Sponsors to update
     */
    where?: SponsorWhereInput
    /**
     * Limit how many Sponsors to update.
     */
    limit?: number
  }

  /**
   * Sponsor updateManyAndReturn
   */
  export type SponsorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * The data used to update Sponsors.
     */
    data: XOR<SponsorUpdateManyMutationInput, SponsorUncheckedUpdateManyInput>
    /**
     * Filter which Sponsors to update
     */
    where?: SponsorWhereInput
    /**
     * Limit how many Sponsors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sponsor upsert
   */
  export type SponsorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * The filter to search for the Sponsor to update in case it exists.
     */
    where: SponsorWhereUniqueInput
    /**
     * In case the Sponsor found by the `where` argument doesn't exist, create a new Sponsor with this data.
     */
    create: XOR<SponsorCreateInput, SponsorUncheckedCreateInput>
    /**
     * In case the Sponsor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SponsorUpdateInput, SponsorUncheckedUpdateInput>
  }

  /**
   * Sponsor delete
   */
  export type SponsorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter which Sponsor to delete.
     */
    where: SponsorWhereUniqueInput
  }

  /**
   * Sponsor deleteMany
   */
  export type SponsorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sponsors to delete
     */
    where?: SponsorWhereInput
    /**
     * Limit how many Sponsors to delete.
     */
    limit?: number
  }

  /**
   * Sponsor without action
   */
  export type SponsorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
  }


  /**
   * Model SessionParticipant
   */

  export type AggregateSessionParticipant = {
    _count: SessionParticipantCountAggregateOutputType | null
    _min: SessionParticipantMinAggregateOutputType | null
    _max: SessionParticipantMaxAggregateOutputType | null
  }

  export type SessionParticipantMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    participantId: string | null
    registeredAt: Date | null
    attendedSession: boolean | null
    attendanceTime: Date | null
  }

  export type SessionParticipantMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    participantId: string | null
    registeredAt: Date | null
    attendedSession: boolean | null
    attendanceTime: Date | null
  }

  export type SessionParticipantCountAggregateOutputType = {
    id: number
    sessionId: number
    participantId: number
    registeredAt: number
    attendedSession: number
    attendanceTime: number
    _all: number
  }


  export type SessionParticipantMinAggregateInputType = {
    id?: true
    sessionId?: true
    participantId?: true
    registeredAt?: true
    attendedSession?: true
    attendanceTime?: true
  }

  export type SessionParticipantMaxAggregateInputType = {
    id?: true
    sessionId?: true
    participantId?: true
    registeredAt?: true
    attendedSession?: true
    attendanceTime?: true
  }

  export type SessionParticipantCountAggregateInputType = {
    id?: true
    sessionId?: true
    participantId?: true
    registeredAt?: true
    attendedSession?: true
    attendanceTime?: true
    _all?: true
  }

  export type SessionParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionParticipant to aggregate.
     */
    where?: SessionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionParticipants to fetch.
     */
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionParticipants
    **/
    _count?: true | SessionParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionParticipantMaxAggregateInputType
  }

  export type GetSessionParticipantAggregateType<T extends SessionParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionParticipant[P]>
      : GetScalarType<T[P], AggregateSessionParticipant[P]>
  }




  export type SessionParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionParticipantWhereInput
    orderBy?: SessionParticipantOrderByWithAggregationInput | SessionParticipantOrderByWithAggregationInput[]
    by: SessionParticipantScalarFieldEnum[] | SessionParticipantScalarFieldEnum
    having?: SessionParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionParticipantCountAggregateInputType | true
    _min?: SessionParticipantMinAggregateInputType
    _max?: SessionParticipantMaxAggregateInputType
  }

  export type SessionParticipantGroupByOutputType = {
    id: string
    sessionId: string
    participantId: string
    registeredAt: Date
    attendedSession: boolean
    attendanceTime: Date | null
    _count: SessionParticipantCountAggregateOutputType | null
    _min: SessionParticipantMinAggregateOutputType | null
    _max: SessionParticipantMaxAggregateOutputType | null
  }

  type GetSessionParticipantGroupByPayload<T extends SessionParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], SessionParticipantGroupByOutputType[P]>
        }
      >
    >


  export type SessionParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    participantId?: boolean
    registeredAt?: boolean
    attendedSession?: boolean
    attendanceTime?: boolean
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
    session?: boolean | event_sessionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionParticipant"]>

  export type SessionParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    participantId?: boolean
    registeredAt?: boolean
    attendedSession?: boolean
    attendanceTime?: boolean
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
    session?: boolean | event_sessionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionParticipant"]>

  export type SessionParticipantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    participantId?: boolean
    registeredAt?: boolean
    attendedSession?: boolean
    attendanceTime?: boolean
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
    session?: boolean | event_sessionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionParticipant"]>

  export type SessionParticipantSelectScalar = {
    id?: boolean
    sessionId?: boolean
    participantId?: boolean
    registeredAt?: boolean
    attendedSession?: boolean
    attendanceTime?: boolean
  }

  export type SessionParticipantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "participantId" | "registeredAt" | "attendedSession" | "attendanceTime", ExtArgs["result"]["sessionParticipant"]>
  export type SessionParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
    session?: boolean | event_sessionsDefaultArgs<ExtArgs>
  }
  export type SessionParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
    session?: boolean | event_sessionsDefaultArgs<ExtArgs>
  }
  export type SessionParticipantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
    session?: boolean | event_sessionsDefaultArgs<ExtArgs>
  }

  export type $SessionParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionParticipant"
    objects: {
      participant: Prisma.$RegistrationPayload<ExtArgs>
      session: Prisma.$event_sessionsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      participantId: string
      registeredAt: Date
      attendedSession: boolean
      attendanceTime: Date | null
    }, ExtArgs["result"]["sessionParticipant"]>
    composites: {}
  }

  type SessionParticipantGetPayload<S extends boolean | null | undefined | SessionParticipantDefaultArgs> = $Result.GetResult<Prisma.$SessionParticipantPayload, S>

  type SessionParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionParticipantCountAggregateInputType | true
    }

  export interface SessionParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionParticipant'], meta: { name: 'SessionParticipant' } }
    /**
     * Find zero or one SessionParticipant that matches the filter.
     * @param {SessionParticipantFindUniqueArgs} args - Arguments to find a SessionParticipant
     * @example
     * // Get one SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionParticipantFindUniqueArgs>(args: SelectSubset<T, SessionParticipantFindUniqueArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SessionParticipant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionParticipantFindUniqueOrThrowArgs} args - Arguments to find a SessionParticipant
     * @example
     * // Get one SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantFindFirstArgs} args - Arguments to find a SessionParticipant
     * @example
     * // Get one SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionParticipantFindFirstArgs>(args?: SelectSubset<T, SessionParticipantFindFirstArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantFindFirstOrThrowArgs} args - Arguments to find a SessionParticipant
     * @example
     * // Get one SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SessionParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionParticipants
     * const sessionParticipants = await prisma.sessionParticipant.findMany()
     * 
     * // Get first 10 SessionParticipants
     * const sessionParticipants = await prisma.sessionParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionParticipantWithIdOnly = await prisma.sessionParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionParticipantFindManyArgs>(args?: SelectSubset<T, SessionParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SessionParticipant.
     * @param {SessionParticipantCreateArgs} args - Arguments to create a SessionParticipant.
     * @example
     * // Create one SessionParticipant
     * const SessionParticipant = await prisma.sessionParticipant.create({
     *   data: {
     *     // ... data to create a SessionParticipant
     *   }
     * })
     * 
     */
    create<T extends SessionParticipantCreateArgs>(args: SelectSubset<T, SessionParticipantCreateArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SessionParticipants.
     * @param {SessionParticipantCreateManyArgs} args - Arguments to create many SessionParticipants.
     * @example
     * // Create many SessionParticipants
     * const sessionParticipant = await prisma.sessionParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionParticipantCreateManyArgs>(args?: SelectSubset<T, SessionParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionParticipants and returns the data saved in the database.
     * @param {SessionParticipantCreateManyAndReturnArgs} args - Arguments to create many SessionParticipants.
     * @example
     * // Create many SessionParticipants
     * const sessionParticipant = await prisma.sessionParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionParticipants and only return the `id`
     * const sessionParticipantWithIdOnly = await prisma.sessionParticipant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SessionParticipant.
     * @param {SessionParticipantDeleteArgs} args - Arguments to delete one SessionParticipant.
     * @example
     * // Delete one SessionParticipant
     * const SessionParticipant = await prisma.sessionParticipant.delete({
     *   where: {
     *     // ... filter to delete one SessionParticipant
     *   }
     * })
     * 
     */
    delete<T extends SessionParticipantDeleteArgs>(args: SelectSubset<T, SessionParticipantDeleteArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SessionParticipant.
     * @param {SessionParticipantUpdateArgs} args - Arguments to update one SessionParticipant.
     * @example
     * // Update one SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionParticipantUpdateArgs>(args: SelectSubset<T, SessionParticipantUpdateArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SessionParticipants.
     * @param {SessionParticipantDeleteManyArgs} args - Arguments to filter SessionParticipants to delete.
     * @example
     * // Delete a few SessionParticipants
     * const { count } = await prisma.sessionParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionParticipantDeleteManyArgs>(args?: SelectSubset<T, SessionParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionParticipants
     * const sessionParticipant = await prisma.sessionParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionParticipantUpdateManyArgs>(args: SelectSubset<T, SessionParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionParticipants and returns the data updated in the database.
     * @param {SessionParticipantUpdateManyAndReturnArgs} args - Arguments to update many SessionParticipants.
     * @example
     * // Update many SessionParticipants
     * const sessionParticipant = await prisma.sessionParticipant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SessionParticipants and only return the `id`
     * const sessionParticipantWithIdOnly = await prisma.sessionParticipant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionParticipantUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SessionParticipant.
     * @param {SessionParticipantUpsertArgs} args - Arguments to update or create a SessionParticipant.
     * @example
     * // Update or create a SessionParticipant
     * const sessionParticipant = await prisma.sessionParticipant.upsert({
     *   create: {
     *     // ... data to create a SessionParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionParticipant we want to update
     *   }
     * })
     */
    upsert<T extends SessionParticipantUpsertArgs>(args: SelectSubset<T, SessionParticipantUpsertArgs<ExtArgs>>): Prisma__SessionParticipantClient<$Result.GetResult<Prisma.$SessionParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SessionParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantCountArgs} args - Arguments to filter SessionParticipants to count.
     * @example
     * // Count the number of SessionParticipants
     * const count = await prisma.sessionParticipant.count({
     *   where: {
     *     // ... the filter for the SessionParticipants we want to count
     *   }
     * })
    **/
    count<T extends SessionParticipantCountArgs>(
      args?: Subset<T, SessionParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionParticipantAggregateArgs>(args: Subset<T, SessionParticipantAggregateArgs>): Prisma.PrismaPromise<GetSessionParticipantAggregateType<T>>

    /**
     * Group by SessionParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionParticipantGroupByArgs['orderBy'] }
        : { orderBy?: SessionParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionParticipant model
   */
  readonly fields: SessionParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participant<T extends RegistrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegistrationDefaultArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    session<T extends event_sessionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, event_sessionsDefaultArgs<ExtArgs>>): Prisma__event_sessionsClient<$Result.GetResult<Prisma.$event_sessionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionParticipant model
   */
  interface SessionParticipantFieldRefs {
    readonly id: FieldRef<"SessionParticipant", 'String'>
    readonly sessionId: FieldRef<"SessionParticipant", 'String'>
    readonly participantId: FieldRef<"SessionParticipant", 'String'>
    readonly registeredAt: FieldRef<"SessionParticipant", 'DateTime'>
    readonly attendedSession: FieldRef<"SessionParticipant", 'Boolean'>
    readonly attendanceTime: FieldRef<"SessionParticipant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SessionParticipant findUnique
   */
  export type SessionParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which SessionParticipant to fetch.
     */
    where: SessionParticipantWhereUniqueInput
  }

  /**
   * SessionParticipant findUniqueOrThrow
   */
  export type SessionParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which SessionParticipant to fetch.
     */
    where: SessionParticipantWhereUniqueInput
  }

  /**
   * SessionParticipant findFirst
   */
  export type SessionParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which SessionParticipant to fetch.
     */
    where?: SessionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionParticipants to fetch.
     */
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionParticipants.
     */
    cursor?: SessionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionParticipants.
     */
    distinct?: SessionParticipantScalarFieldEnum | SessionParticipantScalarFieldEnum[]
  }

  /**
   * SessionParticipant findFirstOrThrow
   */
  export type SessionParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which SessionParticipant to fetch.
     */
    where?: SessionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionParticipants to fetch.
     */
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionParticipants.
     */
    cursor?: SessionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionParticipants.
     */
    distinct?: SessionParticipantScalarFieldEnum | SessionParticipantScalarFieldEnum[]
  }

  /**
   * SessionParticipant findMany
   */
  export type SessionParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter, which SessionParticipants to fetch.
     */
    where?: SessionParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionParticipants to fetch.
     */
    orderBy?: SessionParticipantOrderByWithRelationInput | SessionParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionParticipants.
     */
    cursor?: SessionParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionParticipants.
     */
    skip?: number
    distinct?: SessionParticipantScalarFieldEnum | SessionParticipantScalarFieldEnum[]
  }

  /**
   * SessionParticipant create
   */
  export type SessionParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a SessionParticipant.
     */
    data: XOR<SessionParticipantCreateInput, SessionParticipantUncheckedCreateInput>
  }

  /**
   * SessionParticipant createMany
   */
  export type SessionParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionParticipants.
     */
    data: SessionParticipantCreateManyInput | SessionParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionParticipant createManyAndReturn
   */
  export type SessionParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * The data used to create many SessionParticipants.
     */
    data: SessionParticipantCreateManyInput | SessionParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionParticipant update
   */
  export type SessionParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a SessionParticipant.
     */
    data: XOR<SessionParticipantUpdateInput, SessionParticipantUncheckedUpdateInput>
    /**
     * Choose, which SessionParticipant to update.
     */
    where: SessionParticipantWhereUniqueInput
  }

  /**
   * SessionParticipant updateMany
   */
  export type SessionParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionParticipants.
     */
    data: XOR<SessionParticipantUpdateManyMutationInput, SessionParticipantUncheckedUpdateManyInput>
    /**
     * Filter which SessionParticipants to update
     */
    where?: SessionParticipantWhereInput
    /**
     * Limit how many SessionParticipants to update.
     */
    limit?: number
  }

  /**
   * SessionParticipant updateManyAndReturn
   */
  export type SessionParticipantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * The data used to update SessionParticipants.
     */
    data: XOR<SessionParticipantUpdateManyMutationInput, SessionParticipantUncheckedUpdateManyInput>
    /**
     * Filter which SessionParticipants to update
     */
    where?: SessionParticipantWhereInput
    /**
     * Limit how many SessionParticipants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionParticipant upsert
   */
  export type SessionParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the SessionParticipant to update in case it exists.
     */
    where: SessionParticipantWhereUniqueInput
    /**
     * In case the SessionParticipant found by the `where` argument doesn't exist, create a new SessionParticipant with this data.
     */
    create: XOR<SessionParticipantCreateInput, SessionParticipantUncheckedCreateInput>
    /**
     * In case the SessionParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionParticipantUpdateInput, SessionParticipantUncheckedUpdateInput>
  }

  /**
   * SessionParticipant delete
   */
  export type SessionParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
    /**
     * Filter which SessionParticipant to delete.
     */
    where: SessionParticipantWhereUniqueInput
  }

  /**
   * SessionParticipant deleteMany
   */
  export type SessionParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionParticipants to delete
     */
    where?: SessionParticipantWhereInput
    /**
     * Limit how many SessionParticipants to delete.
     */
    limit?: number
  }

  /**
   * SessionParticipant without action
   */
  export type SessionParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionParticipant
     */
    select?: SessionParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionParticipant
     */
    omit?: SessionParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionParticipantInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    requesterId: string | null
    recipientId: string | null
    status: string | null
    message: string | null
    proposedTime: Date | null
    confirmedTime: Date | null
    location: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    requesterId: string | null
    recipientId: string | null
    status: string | null
    message: string | null
    proposedTime: Date | null
    confirmedTime: Date | null
    location: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    eventId: number
    requesterId: number
    recipientId: number
    status: number
    message: number
    proposedTime: number
    confirmedTime: number
    location: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointmentMinAggregateInputType = {
    id?: true
    eventId?: true
    requesterId?: true
    recipientId?: true
    status?: true
    message?: true
    proposedTime?: true
    confirmedTime?: true
    location?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    eventId?: true
    requesterId?: true
    recipientId?: true
    status?: true
    message?: true
    proposedTime?: true
    confirmedTime?: true
    location?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    eventId?: true
    requesterId?: true
    recipientId?: true
    status?: true
    message?: true
    proposedTime?: true
    confirmedTime?: true
    location?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: string
    eventId: string
    requesterId: string
    recipientId: string
    status: string
    message: string | null
    proposedTime: Date | null
    confirmedTime: Date | null
    location: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    requesterId?: boolean
    recipientId?: boolean
    status?: boolean
    message?: boolean
    proposedTime?: boolean
    confirmedTime?: boolean
    location?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    recipient?: boolean | RegistrationDefaultArgs<ExtArgs>
    requester?: boolean | RegistrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    requesterId?: boolean
    recipientId?: boolean
    status?: boolean
    message?: boolean
    proposedTime?: boolean
    confirmedTime?: boolean
    location?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    recipient?: boolean | RegistrationDefaultArgs<ExtArgs>
    requester?: boolean | RegistrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    requesterId?: boolean
    recipientId?: boolean
    status?: boolean
    message?: boolean
    proposedTime?: boolean
    confirmedTime?: boolean
    location?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    recipient?: boolean | RegistrationDefaultArgs<ExtArgs>
    requester?: boolean | RegistrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    eventId?: boolean
    requesterId?: boolean
    recipientId?: boolean
    status?: boolean
    message?: boolean
    proposedTime?: boolean
    confirmedTime?: boolean
    location?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "requesterId" | "recipientId" | "status" | "message" | "proposedTime" | "confirmedTime" | "location" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["appointment"]>
  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    recipient?: boolean | RegistrationDefaultArgs<ExtArgs>
    requester?: boolean | RegistrationDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    recipient?: boolean | RegistrationDefaultArgs<ExtArgs>
    requester?: boolean | RegistrationDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    recipient?: boolean | RegistrationDefaultArgs<ExtArgs>
    requester?: boolean | RegistrationDefaultArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      recipient: Prisma.$RegistrationPayload<ExtArgs>
      requester: Prisma.$RegistrationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      requesterId: string
      recipientId: string
      status: string
      message: string | null
      proposedTime: Date | null
      confirmedTime: Date | null
      location: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments and returns the data updated in the database.
     * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    recipient<T extends RegistrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegistrationDefaultArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    requester<T extends RegistrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegistrationDefaultArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'String'>
    readonly eventId: FieldRef<"Appointment", 'String'>
    readonly requesterId: FieldRef<"Appointment", 'String'>
    readonly recipientId: FieldRef<"Appointment", 'String'>
    readonly status: FieldRef<"Appointment", 'String'>
    readonly message: FieldRef<"Appointment", 'String'>
    readonly proposedTime: FieldRef<"Appointment", 'DateTime'>
    readonly confirmedTime: FieldRef<"Appointment", 'DateTime'>
    readonly location: FieldRef<"Appointment", 'String'>
    readonly notes: FieldRef<"Appointment", 'String'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appointment createManyAndReturn
   */
  export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
  }

  /**
   * Appointment updateManyAndReturn
   */
  export type AppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to delete.
     */
    limit?: number
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model OtpCode
   */

  export type AggregateOtpCode = {
    _count: OtpCodeCountAggregateOutputType | null
    _min: OtpCodeMinAggregateOutputType | null
    _max: OtpCodeMaxAggregateOutputType | null
  }

  export type OtpCodeMinAggregateOutputType = {
    id: string | null
    email: string | null
    code: string | null
    event_id: string | null
    expires_at: Date | null
    used: boolean | null
    created_at: Date | null
  }

  export type OtpCodeMaxAggregateOutputType = {
    id: string | null
    email: string | null
    code: string | null
    event_id: string | null
    expires_at: Date | null
    used: boolean | null
    created_at: Date | null
  }

  export type OtpCodeCountAggregateOutputType = {
    id: number
    email: number
    code: number
    event_id: number
    expires_at: number
    used: number
    created_at: number
    _all: number
  }


  export type OtpCodeMinAggregateInputType = {
    id?: true
    email?: true
    code?: true
    event_id?: true
    expires_at?: true
    used?: true
    created_at?: true
  }

  export type OtpCodeMaxAggregateInputType = {
    id?: true
    email?: true
    code?: true
    event_id?: true
    expires_at?: true
    used?: true
    created_at?: true
  }

  export type OtpCodeCountAggregateInputType = {
    id?: true
    email?: true
    code?: true
    event_id?: true
    expires_at?: true
    used?: true
    created_at?: true
    _all?: true
  }

  export type OtpCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtpCode to aggregate.
     */
    where?: OtpCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpCodes to fetch.
     */
    orderBy?: OtpCodeOrderByWithRelationInput | OtpCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OtpCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OtpCodes
    **/
    _count?: true | OtpCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtpCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtpCodeMaxAggregateInputType
  }

  export type GetOtpCodeAggregateType<T extends OtpCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateOtpCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtpCode[P]>
      : GetScalarType<T[P], AggregateOtpCode[P]>
  }




  export type OtpCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpCodeWhereInput
    orderBy?: OtpCodeOrderByWithAggregationInput | OtpCodeOrderByWithAggregationInput[]
    by: OtpCodeScalarFieldEnum[] | OtpCodeScalarFieldEnum
    having?: OtpCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtpCodeCountAggregateInputType | true
    _min?: OtpCodeMinAggregateInputType
    _max?: OtpCodeMaxAggregateInputType
  }

  export type OtpCodeGroupByOutputType = {
    id: string
    email: string
    code: string
    event_id: string | null
    expires_at: Date
    used: boolean
    created_at: Date
    _count: OtpCodeCountAggregateOutputType | null
    _min: OtpCodeMinAggregateOutputType | null
    _max: OtpCodeMaxAggregateOutputType | null
  }

  type GetOtpCodeGroupByPayload<T extends OtpCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OtpCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtpCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtpCodeGroupByOutputType[P]>
            : GetScalarType<T[P], OtpCodeGroupByOutputType[P]>
        }
      >
    >


  export type OtpCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    code?: boolean
    event_id?: boolean
    expires_at?: boolean
    used?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["otpCode"]>

  export type OtpCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    code?: boolean
    event_id?: boolean
    expires_at?: boolean
    used?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["otpCode"]>

  export type OtpCodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    code?: boolean
    event_id?: boolean
    expires_at?: boolean
    used?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["otpCode"]>

  export type OtpCodeSelectScalar = {
    id?: boolean
    email?: boolean
    code?: boolean
    event_id?: boolean
    expires_at?: boolean
    used?: boolean
    created_at?: boolean
  }

  export type OtpCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "code" | "event_id" | "expires_at" | "used" | "created_at", ExtArgs["result"]["otpCode"]>

  export type $OtpCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OtpCode"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      code: string
      event_id: string | null
      expires_at: Date
      used: boolean
      created_at: Date
    }, ExtArgs["result"]["otpCode"]>
    composites: {}
  }

  type OtpCodeGetPayload<S extends boolean | null | undefined | OtpCodeDefaultArgs> = $Result.GetResult<Prisma.$OtpCodePayload, S>

  type OtpCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OtpCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OtpCodeCountAggregateInputType | true
    }

  export interface OtpCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OtpCode'], meta: { name: 'OtpCode' } }
    /**
     * Find zero or one OtpCode that matches the filter.
     * @param {OtpCodeFindUniqueArgs} args - Arguments to find a OtpCode
     * @example
     * // Get one OtpCode
     * const otpCode = await prisma.otpCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OtpCodeFindUniqueArgs>(args: SelectSubset<T, OtpCodeFindUniqueArgs<ExtArgs>>): Prisma__OtpCodeClient<$Result.GetResult<Prisma.$OtpCodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OtpCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OtpCodeFindUniqueOrThrowArgs} args - Arguments to find a OtpCode
     * @example
     * // Get one OtpCode
     * const otpCode = await prisma.otpCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OtpCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, OtpCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OtpCodeClient<$Result.GetResult<Prisma.$OtpCodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OtpCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCodeFindFirstArgs} args - Arguments to find a OtpCode
     * @example
     * // Get one OtpCode
     * const otpCode = await prisma.otpCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OtpCodeFindFirstArgs>(args?: SelectSubset<T, OtpCodeFindFirstArgs<ExtArgs>>): Prisma__OtpCodeClient<$Result.GetResult<Prisma.$OtpCodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OtpCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCodeFindFirstOrThrowArgs} args - Arguments to find a OtpCode
     * @example
     * // Get one OtpCode
     * const otpCode = await prisma.otpCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OtpCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, OtpCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__OtpCodeClient<$Result.GetResult<Prisma.$OtpCodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OtpCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OtpCodes
     * const otpCodes = await prisma.otpCode.findMany()
     * 
     * // Get first 10 OtpCodes
     * const otpCodes = await prisma.otpCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const otpCodeWithIdOnly = await prisma.otpCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OtpCodeFindManyArgs>(args?: SelectSubset<T, OtpCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpCodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OtpCode.
     * @param {OtpCodeCreateArgs} args - Arguments to create a OtpCode.
     * @example
     * // Create one OtpCode
     * const OtpCode = await prisma.otpCode.create({
     *   data: {
     *     // ... data to create a OtpCode
     *   }
     * })
     * 
     */
    create<T extends OtpCodeCreateArgs>(args: SelectSubset<T, OtpCodeCreateArgs<ExtArgs>>): Prisma__OtpCodeClient<$Result.GetResult<Prisma.$OtpCodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OtpCodes.
     * @param {OtpCodeCreateManyArgs} args - Arguments to create many OtpCodes.
     * @example
     * // Create many OtpCodes
     * const otpCode = await prisma.otpCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OtpCodeCreateManyArgs>(args?: SelectSubset<T, OtpCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OtpCodes and returns the data saved in the database.
     * @param {OtpCodeCreateManyAndReturnArgs} args - Arguments to create many OtpCodes.
     * @example
     * // Create many OtpCodes
     * const otpCode = await prisma.otpCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OtpCodes and only return the `id`
     * const otpCodeWithIdOnly = await prisma.otpCode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OtpCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, OtpCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpCodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OtpCode.
     * @param {OtpCodeDeleteArgs} args - Arguments to delete one OtpCode.
     * @example
     * // Delete one OtpCode
     * const OtpCode = await prisma.otpCode.delete({
     *   where: {
     *     // ... filter to delete one OtpCode
     *   }
     * })
     * 
     */
    delete<T extends OtpCodeDeleteArgs>(args: SelectSubset<T, OtpCodeDeleteArgs<ExtArgs>>): Prisma__OtpCodeClient<$Result.GetResult<Prisma.$OtpCodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OtpCode.
     * @param {OtpCodeUpdateArgs} args - Arguments to update one OtpCode.
     * @example
     * // Update one OtpCode
     * const otpCode = await prisma.otpCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OtpCodeUpdateArgs>(args: SelectSubset<T, OtpCodeUpdateArgs<ExtArgs>>): Prisma__OtpCodeClient<$Result.GetResult<Prisma.$OtpCodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OtpCodes.
     * @param {OtpCodeDeleteManyArgs} args - Arguments to filter OtpCodes to delete.
     * @example
     * // Delete a few OtpCodes
     * const { count } = await prisma.otpCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OtpCodeDeleteManyArgs>(args?: SelectSubset<T, OtpCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OtpCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OtpCodes
     * const otpCode = await prisma.otpCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OtpCodeUpdateManyArgs>(args: SelectSubset<T, OtpCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OtpCodes and returns the data updated in the database.
     * @param {OtpCodeUpdateManyAndReturnArgs} args - Arguments to update many OtpCodes.
     * @example
     * // Update many OtpCodes
     * const otpCode = await prisma.otpCode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OtpCodes and only return the `id`
     * const otpCodeWithIdOnly = await prisma.otpCode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OtpCodeUpdateManyAndReturnArgs>(args: SelectSubset<T, OtpCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpCodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OtpCode.
     * @param {OtpCodeUpsertArgs} args - Arguments to update or create a OtpCode.
     * @example
     * // Update or create a OtpCode
     * const otpCode = await prisma.otpCode.upsert({
     *   create: {
     *     // ... data to create a OtpCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OtpCode we want to update
     *   }
     * })
     */
    upsert<T extends OtpCodeUpsertArgs>(args: SelectSubset<T, OtpCodeUpsertArgs<ExtArgs>>): Prisma__OtpCodeClient<$Result.GetResult<Prisma.$OtpCodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OtpCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCodeCountArgs} args - Arguments to filter OtpCodes to count.
     * @example
     * // Count the number of OtpCodes
     * const count = await prisma.otpCode.count({
     *   where: {
     *     // ... the filter for the OtpCodes we want to count
     *   }
     * })
    **/
    count<T extends OtpCodeCountArgs>(
      args?: Subset<T, OtpCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtpCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OtpCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtpCodeAggregateArgs>(args: Subset<T, OtpCodeAggregateArgs>): Prisma.PrismaPromise<GetOtpCodeAggregateType<T>>

    /**
     * Group by OtpCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtpCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtpCodeGroupByArgs['orderBy'] }
        : { orderBy?: OtpCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtpCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtpCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OtpCode model
   */
  readonly fields: OtpCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OtpCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OtpCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OtpCode model
   */
  interface OtpCodeFieldRefs {
    readonly id: FieldRef<"OtpCode", 'String'>
    readonly email: FieldRef<"OtpCode", 'String'>
    readonly code: FieldRef<"OtpCode", 'String'>
    readonly event_id: FieldRef<"OtpCode", 'String'>
    readonly expires_at: FieldRef<"OtpCode", 'DateTime'>
    readonly used: FieldRef<"OtpCode", 'Boolean'>
    readonly created_at: FieldRef<"OtpCode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OtpCode findUnique
   */
  export type OtpCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
    /**
     * Filter, which OtpCode to fetch.
     */
    where: OtpCodeWhereUniqueInput
  }

  /**
   * OtpCode findUniqueOrThrow
   */
  export type OtpCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
    /**
     * Filter, which OtpCode to fetch.
     */
    where: OtpCodeWhereUniqueInput
  }

  /**
   * OtpCode findFirst
   */
  export type OtpCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
    /**
     * Filter, which OtpCode to fetch.
     */
    where?: OtpCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpCodes to fetch.
     */
    orderBy?: OtpCodeOrderByWithRelationInput | OtpCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtpCodes.
     */
    cursor?: OtpCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtpCodes.
     */
    distinct?: OtpCodeScalarFieldEnum | OtpCodeScalarFieldEnum[]
  }

  /**
   * OtpCode findFirstOrThrow
   */
  export type OtpCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
    /**
     * Filter, which OtpCode to fetch.
     */
    where?: OtpCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpCodes to fetch.
     */
    orderBy?: OtpCodeOrderByWithRelationInput | OtpCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtpCodes.
     */
    cursor?: OtpCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtpCodes.
     */
    distinct?: OtpCodeScalarFieldEnum | OtpCodeScalarFieldEnum[]
  }

  /**
   * OtpCode findMany
   */
  export type OtpCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
    /**
     * Filter, which OtpCodes to fetch.
     */
    where?: OtpCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpCodes to fetch.
     */
    orderBy?: OtpCodeOrderByWithRelationInput | OtpCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OtpCodes.
     */
    cursor?: OtpCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpCodes.
     */
    skip?: number
    distinct?: OtpCodeScalarFieldEnum | OtpCodeScalarFieldEnum[]
  }

  /**
   * OtpCode create
   */
  export type OtpCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
    /**
     * The data needed to create a OtpCode.
     */
    data: XOR<OtpCodeCreateInput, OtpCodeUncheckedCreateInput>
  }

  /**
   * OtpCode createMany
   */
  export type OtpCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OtpCodes.
     */
    data: OtpCodeCreateManyInput | OtpCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OtpCode createManyAndReturn
   */
  export type OtpCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
    /**
     * The data used to create many OtpCodes.
     */
    data: OtpCodeCreateManyInput | OtpCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OtpCode update
   */
  export type OtpCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
    /**
     * The data needed to update a OtpCode.
     */
    data: XOR<OtpCodeUpdateInput, OtpCodeUncheckedUpdateInput>
    /**
     * Choose, which OtpCode to update.
     */
    where: OtpCodeWhereUniqueInput
  }

  /**
   * OtpCode updateMany
   */
  export type OtpCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OtpCodes.
     */
    data: XOR<OtpCodeUpdateManyMutationInput, OtpCodeUncheckedUpdateManyInput>
    /**
     * Filter which OtpCodes to update
     */
    where?: OtpCodeWhereInput
    /**
     * Limit how many OtpCodes to update.
     */
    limit?: number
  }

  /**
   * OtpCode updateManyAndReturn
   */
  export type OtpCodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
    /**
     * The data used to update OtpCodes.
     */
    data: XOR<OtpCodeUpdateManyMutationInput, OtpCodeUncheckedUpdateManyInput>
    /**
     * Filter which OtpCodes to update
     */
    where?: OtpCodeWhereInput
    /**
     * Limit how many OtpCodes to update.
     */
    limit?: number
  }

  /**
   * OtpCode upsert
   */
  export type OtpCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
    /**
     * The filter to search for the OtpCode to update in case it exists.
     */
    where: OtpCodeWhereUniqueInput
    /**
     * In case the OtpCode found by the `where` argument doesn't exist, create a new OtpCode with this data.
     */
    create: XOR<OtpCodeCreateInput, OtpCodeUncheckedCreateInput>
    /**
     * In case the OtpCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OtpCodeUpdateInput, OtpCodeUncheckedUpdateInput>
  }

  /**
   * OtpCode delete
   */
  export type OtpCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
    /**
     * Filter which OtpCode to delete.
     */
    where: OtpCodeWhereUniqueInput
  }

  /**
   * OtpCode deleteMany
   */
  export type OtpCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtpCodes to delete
     */
    where?: OtpCodeWhereInput
    /**
     * Limit how many OtpCodes to delete.
     */
    limit?: number
  }

  /**
   * OtpCode without action
   */
  export type OtpCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpCode
     */
    select?: OtpCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtpCode
     */
    omit?: OtpCodeOmit<ExtArgs> | null
  }


  /**
   * Model Badge
   */

  export type AggregateBadge = {
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  export type BadgeMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    name: string | null
    canvasData: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BadgeMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    name: string | null
    canvasData: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BadgeCountAggregateOutputType = {
    id: number
    eventId: number
    name: number
    canvasData: number
    isDefault: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BadgeMinAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    canvasData?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BadgeMaxAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    canvasData?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BadgeCountAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    canvasData?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badge to aggregate.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Badges
    **/
    _count?: true | BadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BadgeMaxAggregateInputType
  }

  export type GetBadgeAggregateType<T extends BadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBadge[P]>
      : GetScalarType<T[P], AggregateBadge[P]>
  }




  export type BadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BadgeWhereInput
    orderBy?: BadgeOrderByWithAggregationInput | BadgeOrderByWithAggregationInput[]
    by: BadgeScalarFieldEnum[] | BadgeScalarFieldEnum
    having?: BadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BadgeCountAggregateInputType | true
    _min?: BadgeMinAggregateInputType
    _max?: BadgeMaxAggregateInputType
  }

  export type BadgeGroupByOutputType = {
    id: string
    eventId: string
    name: string | null
    canvasData: string | null
    isDefault: boolean
    createdAt: Date
    updatedAt: Date
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  type GetBadgeGroupByPayload<T extends BadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BadgeGroupByOutputType[P]>
            : GetScalarType<T[P], BadgeGroupByOutputType[P]>
        }
      >
    >


  export type BadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    name?: boolean
    canvasData?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    name?: boolean
    canvasData?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    name?: boolean
    canvasData?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectScalar = {
    id?: boolean
    eventId?: boolean
    name?: boolean
    canvasData?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BadgeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "name" | "canvasData" | "isDefault" | "createdAt" | "updatedAt", ExtArgs["result"]["badge"]>
  export type BadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type BadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type BadgeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $BadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Badge"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      name: string | null
      canvasData: string | null
      isDefault: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["badge"]>
    composites: {}
  }

  type BadgeGetPayload<S extends boolean | null | undefined | BadgeDefaultArgs> = $Result.GetResult<Prisma.$BadgePayload, S>

  type BadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BadgeCountAggregateInputType | true
    }

  export interface BadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Badge'], meta: { name: 'Badge' } }
    /**
     * Find zero or one Badge that matches the filter.
     * @param {BadgeFindUniqueArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BadgeFindUniqueArgs>(args: SelectSubset<T, BadgeFindUniqueArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Badge that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BadgeFindUniqueOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, BadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Badge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BadgeFindFirstArgs>(args?: SelectSubset<T, BadgeFindFirstArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Badge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, BadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Badges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Badges
     * const badges = await prisma.badge.findMany()
     * 
     * // Get first 10 Badges
     * const badges = await prisma.badge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const badgeWithIdOnly = await prisma.badge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BadgeFindManyArgs>(args?: SelectSubset<T, BadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Badge.
     * @param {BadgeCreateArgs} args - Arguments to create a Badge.
     * @example
     * // Create one Badge
     * const Badge = await prisma.badge.create({
     *   data: {
     *     // ... data to create a Badge
     *   }
     * })
     * 
     */
    create<T extends BadgeCreateArgs>(args: SelectSubset<T, BadgeCreateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Badges.
     * @param {BadgeCreateManyArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BadgeCreateManyArgs>(args?: SelectSubset<T, BadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Badges and returns the data saved in the database.
     * @param {BadgeCreateManyAndReturnArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Badges and only return the `id`
     * const badgeWithIdOnly = await prisma.badge.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, BadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Badge.
     * @param {BadgeDeleteArgs} args - Arguments to delete one Badge.
     * @example
     * // Delete one Badge
     * const Badge = await prisma.badge.delete({
     *   where: {
     *     // ... filter to delete one Badge
     *   }
     * })
     * 
     */
    delete<T extends BadgeDeleteArgs>(args: SelectSubset<T, BadgeDeleteArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Badge.
     * @param {BadgeUpdateArgs} args - Arguments to update one Badge.
     * @example
     * // Update one Badge
     * const badge = await prisma.badge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BadgeUpdateArgs>(args: SelectSubset<T, BadgeUpdateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Badges.
     * @param {BadgeDeleteManyArgs} args - Arguments to filter Badges to delete.
     * @example
     * // Delete a few Badges
     * const { count } = await prisma.badge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BadgeDeleteManyArgs>(args?: SelectSubset<T, BadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Badges
     * const badge = await prisma.badge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BadgeUpdateManyArgs>(args: SelectSubset<T, BadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Badges and returns the data updated in the database.
     * @param {BadgeUpdateManyAndReturnArgs} args - Arguments to update many Badges.
     * @example
     * // Update many Badges
     * const badge = await prisma.badge.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Badges and only return the `id`
     * const badgeWithIdOnly = await prisma.badge.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BadgeUpdateManyAndReturnArgs>(args: SelectSubset<T, BadgeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Badge.
     * @param {BadgeUpsertArgs} args - Arguments to update or create a Badge.
     * @example
     * // Update or create a Badge
     * const badge = await prisma.badge.upsert({
     *   create: {
     *     // ... data to create a Badge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Badge we want to update
     *   }
     * })
     */
    upsert<T extends BadgeUpsertArgs>(args: SelectSubset<T, BadgeUpsertArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeCountArgs} args - Arguments to filter Badges to count.
     * @example
     * // Count the number of Badges
     * const count = await prisma.badge.count({
     *   where: {
     *     // ... the filter for the Badges we want to count
     *   }
     * })
    **/
    count<T extends BadgeCountArgs>(
      args?: Subset<T, BadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BadgeAggregateArgs>(args: Subset<T, BadgeAggregateArgs>): Prisma.PrismaPromise<GetBadgeAggregateType<T>>

    /**
     * Group by Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BadgeGroupByArgs['orderBy'] }
        : { orderBy?: BadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Badge model
   */
  readonly fields: BadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Badge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Badge model
   */
  interface BadgeFieldRefs {
    readonly id: FieldRef<"Badge", 'String'>
    readonly eventId: FieldRef<"Badge", 'String'>
    readonly name: FieldRef<"Badge", 'String'>
    readonly canvasData: FieldRef<"Badge", 'String'>
    readonly isDefault: FieldRef<"Badge", 'Boolean'>
    readonly createdAt: FieldRef<"Badge", 'DateTime'>
    readonly updatedAt: FieldRef<"Badge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Badge findUnique
   */
  export type BadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findUniqueOrThrow
   */
  export type BadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findFirst
   */
  export type BadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findFirstOrThrow
   */
  export type BadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findMany
   */
  export type BadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badges to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge create
   */
  export type BadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a Badge.
     */
    data: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
  }

  /**
   * Badge createMany
   */
  export type BadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge createManyAndReturn
   */
  export type BadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Badge update
   */
  export type BadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a Badge.
     */
    data: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
    /**
     * Choose, which Badge to update.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge updateMany
   */
  export type BadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Badges.
     */
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyInput>
    /**
     * Filter which Badges to update
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to update.
     */
    limit?: number
  }

  /**
   * Badge updateManyAndReturn
   */
  export type BadgeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * The data used to update Badges.
     */
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyInput>
    /**
     * Filter which Badges to update
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Badge upsert
   */
  export type BadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the Badge to update in case it exists.
     */
    where: BadgeWhereUniqueInput
    /**
     * In case the Badge found by the `where` argument doesn't exist, create a new Badge with this data.
     */
    create: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
    /**
     * In case the Badge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
  }

  /**
   * Badge delete
   */
  export type BadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter which Badge to delete.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge deleteMany
   */
  export type BadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badges to delete
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to delete.
     */
    limit?: number
  }

  /**
   * Badge without action
   */
  export type BadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
  }


  /**
   * Model BadgeTemplate
   */

  export type AggregateBadgeTemplate = {
    _count: BadgeTemplateCountAggregateOutputType | null
    _min: BadgeTemplateMinAggregateOutputType | null
    _max: BadgeTemplateMaxAggregateOutputType | null
  }

  export type BadgeTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    canvasData: string | null
    isGlobal: boolean | null
    eventId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BadgeTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    canvasData: string | null
    isGlobal: boolean | null
    eventId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BadgeTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    canvasData: number
    isGlobal: number
    eventId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BadgeTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    canvasData?: true
    isGlobal?: true
    eventId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BadgeTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    canvasData?: true
    isGlobal?: true
    eventId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BadgeTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    canvasData?: true
    isGlobal?: true
    eventId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BadgeTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BadgeTemplate to aggregate.
     */
    where?: BadgeTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BadgeTemplates to fetch.
     */
    orderBy?: BadgeTemplateOrderByWithRelationInput | BadgeTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BadgeTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BadgeTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BadgeTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BadgeTemplates
    **/
    _count?: true | BadgeTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BadgeTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BadgeTemplateMaxAggregateInputType
  }

  export type GetBadgeTemplateAggregateType<T extends BadgeTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateBadgeTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBadgeTemplate[P]>
      : GetScalarType<T[P], AggregateBadgeTemplate[P]>
  }




  export type BadgeTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BadgeTemplateWhereInput
    orderBy?: BadgeTemplateOrderByWithAggregationInput | BadgeTemplateOrderByWithAggregationInput[]
    by: BadgeTemplateScalarFieldEnum[] | BadgeTemplateScalarFieldEnum
    having?: BadgeTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BadgeTemplateCountAggregateInputType | true
    _min?: BadgeTemplateMinAggregateInputType
    _max?: BadgeTemplateMaxAggregateInputType
  }

  export type BadgeTemplateGroupByOutputType = {
    id: string
    name: string
    description: string | null
    canvasData: string
    isGlobal: boolean
    eventId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: BadgeTemplateCountAggregateOutputType | null
    _min: BadgeTemplateMinAggregateOutputType | null
    _max: BadgeTemplateMaxAggregateOutputType | null
  }

  type GetBadgeTemplateGroupByPayload<T extends BadgeTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BadgeTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BadgeTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BadgeTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], BadgeTemplateGroupByOutputType[P]>
        }
      >
    >


  export type BadgeTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    canvasData?: boolean
    isGlobal?: boolean
    eventId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | BadgeTemplate$eventArgs<ExtArgs>
    participantBadges?: boolean | BadgeTemplate$participantBadgesArgs<ExtArgs>
    _count?: boolean | BadgeTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["badgeTemplate"]>

  export type BadgeTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    canvasData?: boolean
    isGlobal?: boolean
    eventId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | BadgeTemplate$eventArgs<ExtArgs>
  }, ExtArgs["result"]["badgeTemplate"]>

  export type BadgeTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    canvasData?: boolean
    isGlobal?: boolean
    eventId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | BadgeTemplate$eventArgs<ExtArgs>
  }, ExtArgs["result"]["badgeTemplate"]>

  export type BadgeTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    canvasData?: boolean
    isGlobal?: boolean
    eventId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BadgeTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "canvasData" | "isGlobal" | "eventId" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["badgeTemplate"]>
  export type BadgeTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | BadgeTemplate$eventArgs<ExtArgs>
    participantBadges?: boolean | BadgeTemplate$participantBadgesArgs<ExtArgs>
    _count?: boolean | BadgeTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BadgeTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | BadgeTemplate$eventArgs<ExtArgs>
  }
  export type BadgeTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | BadgeTemplate$eventArgs<ExtArgs>
  }

  export type $BadgeTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BadgeTemplate"
    objects: {
      event: Prisma.$EventPayload<ExtArgs> | null
      participantBadges: Prisma.$ParticipantBadgePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      canvasData: string
      isGlobal: boolean
      eventId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["badgeTemplate"]>
    composites: {}
  }

  type BadgeTemplateGetPayload<S extends boolean | null | undefined | BadgeTemplateDefaultArgs> = $Result.GetResult<Prisma.$BadgeTemplatePayload, S>

  type BadgeTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BadgeTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BadgeTemplateCountAggregateInputType | true
    }

  export interface BadgeTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BadgeTemplate'], meta: { name: 'BadgeTemplate' } }
    /**
     * Find zero or one BadgeTemplate that matches the filter.
     * @param {BadgeTemplateFindUniqueArgs} args - Arguments to find a BadgeTemplate
     * @example
     * // Get one BadgeTemplate
     * const badgeTemplate = await prisma.badgeTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BadgeTemplateFindUniqueArgs>(args: SelectSubset<T, BadgeTemplateFindUniqueArgs<ExtArgs>>): Prisma__BadgeTemplateClient<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BadgeTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BadgeTemplateFindUniqueOrThrowArgs} args - Arguments to find a BadgeTemplate
     * @example
     * // Get one BadgeTemplate
     * const badgeTemplate = await prisma.badgeTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BadgeTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, BadgeTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BadgeTemplateClient<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BadgeTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeTemplateFindFirstArgs} args - Arguments to find a BadgeTemplate
     * @example
     * // Get one BadgeTemplate
     * const badgeTemplate = await prisma.badgeTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BadgeTemplateFindFirstArgs>(args?: SelectSubset<T, BadgeTemplateFindFirstArgs<ExtArgs>>): Prisma__BadgeTemplateClient<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BadgeTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeTemplateFindFirstOrThrowArgs} args - Arguments to find a BadgeTemplate
     * @example
     * // Get one BadgeTemplate
     * const badgeTemplate = await prisma.badgeTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BadgeTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, BadgeTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__BadgeTemplateClient<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BadgeTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BadgeTemplates
     * const badgeTemplates = await prisma.badgeTemplate.findMany()
     * 
     * // Get first 10 BadgeTemplates
     * const badgeTemplates = await prisma.badgeTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const badgeTemplateWithIdOnly = await prisma.badgeTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BadgeTemplateFindManyArgs>(args?: SelectSubset<T, BadgeTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BadgeTemplate.
     * @param {BadgeTemplateCreateArgs} args - Arguments to create a BadgeTemplate.
     * @example
     * // Create one BadgeTemplate
     * const BadgeTemplate = await prisma.badgeTemplate.create({
     *   data: {
     *     // ... data to create a BadgeTemplate
     *   }
     * })
     * 
     */
    create<T extends BadgeTemplateCreateArgs>(args: SelectSubset<T, BadgeTemplateCreateArgs<ExtArgs>>): Prisma__BadgeTemplateClient<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BadgeTemplates.
     * @param {BadgeTemplateCreateManyArgs} args - Arguments to create many BadgeTemplates.
     * @example
     * // Create many BadgeTemplates
     * const badgeTemplate = await prisma.badgeTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BadgeTemplateCreateManyArgs>(args?: SelectSubset<T, BadgeTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BadgeTemplates and returns the data saved in the database.
     * @param {BadgeTemplateCreateManyAndReturnArgs} args - Arguments to create many BadgeTemplates.
     * @example
     * // Create many BadgeTemplates
     * const badgeTemplate = await prisma.badgeTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BadgeTemplates and only return the `id`
     * const badgeTemplateWithIdOnly = await prisma.badgeTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BadgeTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, BadgeTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BadgeTemplate.
     * @param {BadgeTemplateDeleteArgs} args - Arguments to delete one BadgeTemplate.
     * @example
     * // Delete one BadgeTemplate
     * const BadgeTemplate = await prisma.badgeTemplate.delete({
     *   where: {
     *     // ... filter to delete one BadgeTemplate
     *   }
     * })
     * 
     */
    delete<T extends BadgeTemplateDeleteArgs>(args: SelectSubset<T, BadgeTemplateDeleteArgs<ExtArgs>>): Prisma__BadgeTemplateClient<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BadgeTemplate.
     * @param {BadgeTemplateUpdateArgs} args - Arguments to update one BadgeTemplate.
     * @example
     * // Update one BadgeTemplate
     * const badgeTemplate = await prisma.badgeTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BadgeTemplateUpdateArgs>(args: SelectSubset<T, BadgeTemplateUpdateArgs<ExtArgs>>): Prisma__BadgeTemplateClient<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BadgeTemplates.
     * @param {BadgeTemplateDeleteManyArgs} args - Arguments to filter BadgeTemplates to delete.
     * @example
     * // Delete a few BadgeTemplates
     * const { count } = await prisma.badgeTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BadgeTemplateDeleteManyArgs>(args?: SelectSubset<T, BadgeTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BadgeTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BadgeTemplates
     * const badgeTemplate = await prisma.badgeTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BadgeTemplateUpdateManyArgs>(args: SelectSubset<T, BadgeTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BadgeTemplates and returns the data updated in the database.
     * @param {BadgeTemplateUpdateManyAndReturnArgs} args - Arguments to update many BadgeTemplates.
     * @example
     * // Update many BadgeTemplates
     * const badgeTemplate = await prisma.badgeTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BadgeTemplates and only return the `id`
     * const badgeTemplateWithIdOnly = await prisma.badgeTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BadgeTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, BadgeTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BadgeTemplate.
     * @param {BadgeTemplateUpsertArgs} args - Arguments to update or create a BadgeTemplate.
     * @example
     * // Update or create a BadgeTemplate
     * const badgeTemplate = await prisma.badgeTemplate.upsert({
     *   create: {
     *     // ... data to create a BadgeTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BadgeTemplate we want to update
     *   }
     * })
     */
    upsert<T extends BadgeTemplateUpsertArgs>(args: SelectSubset<T, BadgeTemplateUpsertArgs<ExtArgs>>): Prisma__BadgeTemplateClient<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BadgeTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeTemplateCountArgs} args - Arguments to filter BadgeTemplates to count.
     * @example
     * // Count the number of BadgeTemplates
     * const count = await prisma.badgeTemplate.count({
     *   where: {
     *     // ... the filter for the BadgeTemplates we want to count
     *   }
     * })
    **/
    count<T extends BadgeTemplateCountArgs>(
      args?: Subset<T, BadgeTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BadgeTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BadgeTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BadgeTemplateAggregateArgs>(args: Subset<T, BadgeTemplateAggregateArgs>): Prisma.PrismaPromise<GetBadgeTemplateAggregateType<T>>

    /**
     * Group by BadgeTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BadgeTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BadgeTemplateGroupByArgs['orderBy'] }
        : { orderBy?: BadgeTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BadgeTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBadgeTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BadgeTemplate model
   */
  readonly fields: BadgeTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BadgeTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BadgeTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends BadgeTemplate$eventArgs<ExtArgs> = {}>(args?: Subset<T, BadgeTemplate$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    participantBadges<T extends BadgeTemplate$participantBadgesArgs<ExtArgs> = {}>(args?: Subset<T, BadgeTemplate$participantBadgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BadgeTemplate model
   */
  interface BadgeTemplateFieldRefs {
    readonly id: FieldRef<"BadgeTemplate", 'String'>
    readonly name: FieldRef<"BadgeTemplate", 'String'>
    readonly description: FieldRef<"BadgeTemplate", 'String'>
    readonly canvasData: FieldRef<"BadgeTemplate", 'String'>
    readonly isGlobal: FieldRef<"BadgeTemplate", 'Boolean'>
    readonly eventId: FieldRef<"BadgeTemplate", 'String'>
    readonly isActive: FieldRef<"BadgeTemplate", 'Boolean'>
    readonly createdAt: FieldRef<"BadgeTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"BadgeTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BadgeTemplate findUnique
   */
  export type BadgeTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateInclude<ExtArgs> | null
    /**
     * Filter, which BadgeTemplate to fetch.
     */
    where: BadgeTemplateWhereUniqueInput
  }

  /**
   * BadgeTemplate findUniqueOrThrow
   */
  export type BadgeTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateInclude<ExtArgs> | null
    /**
     * Filter, which BadgeTemplate to fetch.
     */
    where: BadgeTemplateWhereUniqueInput
  }

  /**
   * BadgeTemplate findFirst
   */
  export type BadgeTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateInclude<ExtArgs> | null
    /**
     * Filter, which BadgeTemplate to fetch.
     */
    where?: BadgeTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BadgeTemplates to fetch.
     */
    orderBy?: BadgeTemplateOrderByWithRelationInput | BadgeTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BadgeTemplates.
     */
    cursor?: BadgeTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BadgeTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BadgeTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BadgeTemplates.
     */
    distinct?: BadgeTemplateScalarFieldEnum | BadgeTemplateScalarFieldEnum[]
  }

  /**
   * BadgeTemplate findFirstOrThrow
   */
  export type BadgeTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateInclude<ExtArgs> | null
    /**
     * Filter, which BadgeTemplate to fetch.
     */
    where?: BadgeTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BadgeTemplates to fetch.
     */
    orderBy?: BadgeTemplateOrderByWithRelationInput | BadgeTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BadgeTemplates.
     */
    cursor?: BadgeTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BadgeTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BadgeTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BadgeTemplates.
     */
    distinct?: BadgeTemplateScalarFieldEnum | BadgeTemplateScalarFieldEnum[]
  }

  /**
   * BadgeTemplate findMany
   */
  export type BadgeTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateInclude<ExtArgs> | null
    /**
     * Filter, which BadgeTemplates to fetch.
     */
    where?: BadgeTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BadgeTemplates to fetch.
     */
    orderBy?: BadgeTemplateOrderByWithRelationInput | BadgeTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BadgeTemplates.
     */
    cursor?: BadgeTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BadgeTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BadgeTemplates.
     */
    skip?: number
    distinct?: BadgeTemplateScalarFieldEnum | BadgeTemplateScalarFieldEnum[]
  }

  /**
   * BadgeTemplate create
   */
  export type BadgeTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a BadgeTemplate.
     */
    data: XOR<BadgeTemplateCreateInput, BadgeTemplateUncheckedCreateInput>
  }

  /**
   * BadgeTemplate createMany
   */
  export type BadgeTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BadgeTemplates.
     */
    data: BadgeTemplateCreateManyInput | BadgeTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BadgeTemplate createManyAndReturn
   */
  export type BadgeTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many BadgeTemplates.
     */
    data: BadgeTemplateCreateManyInput | BadgeTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BadgeTemplate update
   */
  export type BadgeTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a BadgeTemplate.
     */
    data: XOR<BadgeTemplateUpdateInput, BadgeTemplateUncheckedUpdateInput>
    /**
     * Choose, which BadgeTemplate to update.
     */
    where: BadgeTemplateWhereUniqueInput
  }

  /**
   * BadgeTemplate updateMany
   */
  export type BadgeTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BadgeTemplates.
     */
    data: XOR<BadgeTemplateUpdateManyMutationInput, BadgeTemplateUncheckedUpdateManyInput>
    /**
     * Filter which BadgeTemplates to update
     */
    where?: BadgeTemplateWhereInput
    /**
     * Limit how many BadgeTemplates to update.
     */
    limit?: number
  }

  /**
   * BadgeTemplate updateManyAndReturn
   */
  export type BadgeTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * The data used to update BadgeTemplates.
     */
    data: XOR<BadgeTemplateUpdateManyMutationInput, BadgeTemplateUncheckedUpdateManyInput>
    /**
     * Filter which BadgeTemplates to update
     */
    where?: BadgeTemplateWhereInput
    /**
     * Limit how many BadgeTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BadgeTemplate upsert
   */
  export type BadgeTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the BadgeTemplate to update in case it exists.
     */
    where: BadgeTemplateWhereUniqueInput
    /**
     * In case the BadgeTemplate found by the `where` argument doesn't exist, create a new BadgeTemplate with this data.
     */
    create: XOR<BadgeTemplateCreateInput, BadgeTemplateUncheckedCreateInput>
    /**
     * In case the BadgeTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BadgeTemplateUpdateInput, BadgeTemplateUncheckedUpdateInput>
  }

  /**
   * BadgeTemplate delete
   */
  export type BadgeTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateInclude<ExtArgs> | null
    /**
     * Filter which BadgeTemplate to delete.
     */
    where: BadgeTemplateWhereUniqueInput
  }

  /**
   * BadgeTemplate deleteMany
   */
  export type BadgeTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BadgeTemplates to delete
     */
    where?: BadgeTemplateWhereInput
    /**
     * Limit how many BadgeTemplates to delete.
     */
    limit?: number
  }

  /**
   * BadgeTemplate.event
   */
  export type BadgeTemplate$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * BadgeTemplate.participantBadges
   */
  export type BadgeTemplate$participantBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    where?: ParticipantBadgeWhereInput
    orderBy?: ParticipantBadgeOrderByWithRelationInput | ParticipantBadgeOrderByWithRelationInput[]
    cursor?: ParticipantBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParticipantBadgeScalarFieldEnum | ParticipantBadgeScalarFieldEnum[]
  }

  /**
   * BadgeTemplate without action
   */
  export type BadgeTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeTemplate
     */
    select?: BadgeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BadgeTemplate
     */
    omit?: BadgeTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeTemplateInclude<ExtArgs> | null
  }


  /**
   * Model ParticipantBadge
   */

  export type AggregateParticipantBadge = {
    _count: ParticipantBadgeCountAggregateOutputType | null
    _min: ParticipantBadgeMinAggregateOutputType | null
    _max: ParticipantBadgeMaxAggregateOutputType | null
  }

  export type ParticipantBadgeMinAggregateOutputType = {
    id: string | null
    registrationId: string | null
    eventId: string | null
    templateId: string | null
    status: string | null
    generatedAt: Date | null
    printedAt: Date | null
    deliveredAt: Date | null
    customData: string | null
    qrCodeData: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParticipantBadgeMaxAggregateOutputType = {
    id: string | null
    registrationId: string | null
    eventId: string | null
    templateId: string | null
    status: string | null
    generatedAt: Date | null
    printedAt: Date | null
    deliveredAt: Date | null
    customData: string | null
    qrCodeData: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParticipantBadgeCountAggregateOutputType = {
    id: number
    registrationId: number
    eventId: number
    templateId: number
    status: number
    generatedAt: number
    printedAt: number
    deliveredAt: number
    customData: number
    qrCodeData: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ParticipantBadgeMinAggregateInputType = {
    id?: true
    registrationId?: true
    eventId?: true
    templateId?: true
    status?: true
    generatedAt?: true
    printedAt?: true
    deliveredAt?: true
    customData?: true
    qrCodeData?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParticipantBadgeMaxAggregateInputType = {
    id?: true
    registrationId?: true
    eventId?: true
    templateId?: true
    status?: true
    generatedAt?: true
    printedAt?: true
    deliveredAt?: true
    customData?: true
    qrCodeData?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParticipantBadgeCountAggregateInputType = {
    id?: true
    registrationId?: true
    eventId?: true
    templateId?: true
    status?: true
    generatedAt?: true
    printedAt?: true
    deliveredAt?: true
    customData?: true
    qrCodeData?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ParticipantBadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParticipantBadge to aggregate.
     */
    where?: ParticipantBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParticipantBadges to fetch.
     */
    orderBy?: ParticipantBadgeOrderByWithRelationInput | ParticipantBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParticipantBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParticipantBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParticipantBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParticipantBadges
    **/
    _count?: true | ParticipantBadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParticipantBadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParticipantBadgeMaxAggregateInputType
  }

  export type GetParticipantBadgeAggregateType<T extends ParticipantBadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateParticipantBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParticipantBadge[P]>
      : GetScalarType<T[P], AggregateParticipantBadge[P]>
  }




  export type ParticipantBadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParticipantBadgeWhereInput
    orderBy?: ParticipantBadgeOrderByWithAggregationInput | ParticipantBadgeOrderByWithAggregationInput[]
    by: ParticipantBadgeScalarFieldEnum[] | ParticipantBadgeScalarFieldEnum
    having?: ParticipantBadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParticipantBadgeCountAggregateInputType | true
    _min?: ParticipantBadgeMinAggregateInputType
    _max?: ParticipantBadgeMaxAggregateInputType
  }

  export type ParticipantBadgeGroupByOutputType = {
    id: string
    registrationId: string
    eventId: string
    templateId: string
    status: string
    generatedAt: Date
    printedAt: Date | null
    deliveredAt: Date | null
    customData: string | null
    qrCodeData: string | null
    createdAt: Date
    updatedAt: Date
    _count: ParticipantBadgeCountAggregateOutputType | null
    _min: ParticipantBadgeMinAggregateOutputType | null
    _max: ParticipantBadgeMaxAggregateOutputType | null
  }

  type GetParticipantBadgeGroupByPayload<T extends ParticipantBadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParticipantBadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParticipantBadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParticipantBadgeGroupByOutputType[P]>
            : GetScalarType<T[P], ParticipantBadgeGroupByOutputType[P]>
        }
      >
    >


  export type ParticipantBadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrationId?: boolean
    eventId?: boolean
    templateId?: boolean
    status?: boolean
    generatedAt?: boolean
    printedAt?: boolean
    deliveredAt?: boolean
    customData?: boolean
    qrCodeData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    registration?: boolean | RegistrationDefaultArgs<ExtArgs>
    template?: boolean | BadgeTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["participantBadge"]>

  export type ParticipantBadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrationId?: boolean
    eventId?: boolean
    templateId?: boolean
    status?: boolean
    generatedAt?: boolean
    printedAt?: boolean
    deliveredAt?: boolean
    customData?: boolean
    qrCodeData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    registration?: boolean | RegistrationDefaultArgs<ExtArgs>
    template?: boolean | BadgeTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["participantBadge"]>

  export type ParticipantBadgeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrationId?: boolean
    eventId?: boolean
    templateId?: boolean
    status?: boolean
    generatedAt?: boolean
    printedAt?: boolean
    deliveredAt?: boolean
    customData?: boolean
    qrCodeData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    registration?: boolean | RegistrationDefaultArgs<ExtArgs>
    template?: boolean | BadgeTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["participantBadge"]>

  export type ParticipantBadgeSelectScalar = {
    id?: boolean
    registrationId?: boolean
    eventId?: boolean
    templateId?: boolean
    status?: boolean
    generatedAt?: boolean
    printedAt?: boolean
    deliveredAt?: boolean
    customData?: boolean
    qrCodeData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ParticipantBadgeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "registrationId" | "eventId" | "templateId" | "status" | "generatedAt" | "printedAt" | "deliveredAt" | "customData" | "qrCodeData" | "createdAt" | "updatedAt", ExtArgs["result"]["participantBadge"]>
  export type ParticipantBadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    registration?: boolean | RegistrationDefaultArgs<ExtArgs>
    template?: boolean | BadgeTemplateDefaultArgs<ExtArgs>
  }
  export type ParticipantBadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    registration?: boolean | RegistrationDefaultArgs<ExtArgs>
    template?: boolean | BadgeTemplateDefaultArgs<ExtArgs>
  }
  export type ParticipantBadgeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    registration?: boolean | RegistrationDefaultArgs<ExtArgs>
    template?: boolean | BadgeTemplateDefaultArgs<ExtArgs>
  }

  export type $ParticipantBadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParticipantBadge"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      registration: Prisma.$RegistrationPayload<ExtArgs>
      template: Prisma.$BadgeTemplatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      registrationId: string
      eventId: string
      templateId: string
      status: string
      generatedAt: Date
      printedAt: Date | null
      deliveredAt: Date | null
      customData: string | null
      qrCodeData: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["participantBadge"]>
    composites: {}
  }

  type ParticipantBadgeGetPayload<S extends boolean | null | undefined | ParticipantBadgeDefaultArgs> = $Result.GetResult<Prisma.$ParticipantBadgePayload, S>

  type ParticipantBadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParticipantBadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParticipantBadgeCountAggregateInputType | true
    }

  export interface ParticipantBadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParticipantBadge'], meta: { name: 'ParticipantBadge' } }
    /**
     * Find zero or one ParticipantBadge that matches the filter.
     * @param {ParticipantBadgeFindUniqueArgs} args - Arguments to find a ParticipantBadge
     * @example
     * // Get one ParticipantBadge
     * const participantBadge = await prisma.participantBadge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParticipantBadgeFindUniqueArgs>(args: SelectSubset<T, ParticipantBadgeFindUniqueArgs<ExtArgs>>): Prisma__ParticipantBadgeClient<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ParticipantBadge that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParticipantBadgeFindUniqueOrThrowArgs} args - Arguments to find a ParticipantBadge
     * @example
     * // Get one ParticipantBadge
     * const participantBadge = await prisma.participantBadge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParticipantBadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, ParticipantBadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParticipantBadgeClient<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParticipantBadge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantBadgeFindFirstArgs} args - Arguments to find a ParticipantBadge
     * @example
     * // Get one ParticipantBadge
     * const participantBadge = await prisma.participantBadge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParticipantBadgeFindFirstArgs>(args?: SelectSubset<T, ParticipantBadgeFindFirstArgs<ExtArgs>>): Prisma__ParticipantBadgeClient<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParticipantBadge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantBadgeFindFirstOrThrowArgs} args - Arguments to find a ParticipantBadge
     * @example
     * // Get one ParticipantBadge
     * const participantBadge = await prisma.participantBadge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParticipantBadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, ParticipantBadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParticipantBadgeClient<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ParticipantBadges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantBadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParticipantBadges
     * const participantBadges = await prisma.participantBadge.findMany()
     * 
     * // Get first 10 ParticipantBadges
     * const participantBadges = await prisma.participantBadge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const participantBadgeWithIdOnly = await prisma.participantBadge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParticipantBadgeFindManyArgs>(args?: SelectSubset<T, ParticipantBadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ParticipantBadge.
     * @param {ParticipantBadgeCreateArgs} args - Arguments to create a ParticipantBadge.
     * @example
     * // Create one ParticipantBadge
     * const ParticipantBadge = await prisma.participantBadge.create({
     *   data: {
     *     // ... data to create a ParticipantBadge
     *   }
     * })
     * 
     */
    create<T extends ParticipantBadgeCreateArgs>(args: SelectSubset<T, ParticipantBadgeCreateArgs<ExtArgs>>): Prisma__ParticipantBadgeClient<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ParticipantBadges.
     * @param {ParticipantBadgeCreateManyArgs} args - Arguments to create many ParticipantBadges.
     * @example
     * // Create many ParticipantBadges
     * const participantBadge = await prisma.participantBadge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParticipantBadgeCreateManyArgs>(args?: SelectSubset<T, ParticipantBadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ParticipantBadges and returns the data saved in the database.
     * @param {ParticipantBadgeCreateManyAndReturnArgs} args - Arguments to create many ParticipantBadges.
     * @example
     * // Create many ParticipantBadges
     * const participantBadge = await prisma.participantBadge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ParticipantBadges and only return the `id`
     * const participantBadgeWithIdOnly = await prisma.participantBadge.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParticipantBadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, ParticipantBadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ParticipantBadge.
     * @param {ParticipantBadgeDeleteArgs} args - Arguments to delete one ParticipantBadge.
     * @example
     * // Delete one ParticipantBadge
     * const ParticipantBadge = await prisma.participantBadge.delete({
     *   where: {
     *     // ... filter to delete one ParticipantBadge
     *   }
     * })
     * 
     */
    delete<T extends ParticipantBadgeDeleteArgs>(args: SelectSubset<T, ParticipantBadgeDeleteArgs<ExtArgs>>): Prisma__ParticipantBadgeClient<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ParticipantBadge.
     * @param {ParticipantBadgeUpdateArgs} args - Arguments to update one ParticipantBadge.
     * @example
     * // Update one ParticipantBadge
     * const participantBadge = await prisma.participantBadge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParticipantBadgeUpdateArgs>(args: SelectSubset<T, ParticipantBadgeUpdateArgs<ExtArgs>>): Prisma__ParticipantBadgeClient<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ParticipantBadges.
     * @param {ParticipantBadgeDeleteManyArgs} args - Arguments to filter ParticipantBadges to delete.
     * @example
     * // Delete a few ParticipantBadges
     * const { count } = await prisma.participantBadge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParticipantBadgeDeleteManyArgs>(args?: SelectSubset<T, ParticipantBadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParticipantBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantBadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParticipantBadges
     * const participantBadge = await prisma.participantBadge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParticipantBadgeUpdateManyArgs>(args: SelectSubset<T, ParticipantBadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParticipantBadges and returns the data updated in the database.
     * @param {ParticipantBadgeUpdateManyAndReturnArgs} args - Arguments to update many ParticipantBadges.
     * @example
     * // Update many ParticipantBadges
     * const participantBadge = await prisma.participantBadge.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ParticipantBadges and only return the `id`
     * const participantBadgeWithIdOnly = await prisma.participantBadge.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ParticipantBadgeUpdateManyAndReturnArgs>(args: SelectSubset<T, ParticipantBadgeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ParticipantBadge.
     * @param {ParticipantBadgeUpsertArgs} args - Arguments to update or create a ParticipantBadge.
     * @example
     * // Update or create a ParticipantBadge
     * const participantBadge = await prisma.participantBadge.upsert({
     *   create: {
     *     // ... data to create a ParticipantBadge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParticipantBadge we want to update
     *   }
     * })
     */
    upsert<T extends ParticipantBadgeUpsertArgs>(args: SelectSubset<T, ParticipantBadgeUpsertArgs<ExtArgs>>): Prisma__ParticipantBadgeClient<$Result.GetResult<Prisma.$ParticipantBadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ParticipantBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantBadgeCountArgs} args - Arguments to filter ParticipantBadges to count.
     * @example
     * // Count the number of ParticipantBadges
     * const count = await prisma.participantBadge.count({
     *   where: {
     *     // ... the filter for the ParticipantBadges we want to count
     *   }
     * })
    **/
    count<T extends ParticipantBadgeCountArgs>(
      args?: Subset<T, ParticipantBadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParticipantBadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParticipantBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantBadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParticipantBadgeAggregateArgs>(args: Subset<T, ParticipantBadgeAggregateArgs>): Prisma.PrismaPromise<GetParticipantBadgeAggregateType<T>>

    /**
     * Group by ParticipantBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantBadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParticipantBadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParticipantBadgeGroupByArgs['orderBy'] }
        : { orderBy?: ParticipantBadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParticipantBadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParticipantBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParticipantBadge model
   */
  readonly fields: ParticipantBadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParticipantBadge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParticipantBadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    registration<T extends RegistrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegistrationDefaultArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    template<T extends BadgeTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BadgeTemplateDefaultArgs<ExtArgs>>): Prisma__BadgeTemplateClient<$Result.GetResult<Prisma.$BadgeTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParticipantBadge model
   */
  interface ParticipantBadgeFieldRefs {
    readonly id: FieldRef<"ParticipantBadge", 'String'>
    readonly registrationId: FieldRef<"ParticipantBadge", 'String'>
    readonly eventId: FieldRef<"ParticipantBadge", 'String'>
    readonly templateId: FieldRef<"ParticipantBadge", 'String'>
    readonly status: FieldRef<"ParticipantBadge", 'String'>
    readonly generatedAt: FieldRef<"ParticipantBadge", 'DateTime'>
    readonly printedAt: FieldRef<"ParticipantBadge", 'DateTime'>
    readonly deliveredAt: FieldRef<"ParticipantBadge", 'DateTime'>
    readonly customData: FieldRef<"ParticipantBadge", 'String'>
    readonly qrCodeData: FieldRef<"ParticipantBadge", 'String'>
    readonly createdAt: FieldRef<"ParticipantBadge", 'DateTime'>
    readonly updatedAt: FieldRef<"ParticipantBadge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ParticipantBadge findUnique
   */
  export type ParticipantBadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    /**
     * Filter, which ParticipantBadge to fetch.
     */
    where: ParticipantBadgeWhereUniqueInput
  }

  /**
   * ParticipantBadge findUniqueOrThrow
   */
  export type ParticipantBadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    /**
     * Filter, which ParticipantBadge to fetch.
     */
    where: ParticipantBadgeWhereUniqueInput
  }

  /**
   * ParticipantBadge findFirst
   */
  export type ParticipantBadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    /**
     * Filter, which ParticipantBadge to fetch.
     */
    where?: ParticipantBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParticipantBadges to fetch.
     */
    orderBy?: ParticipantBadgeOrderByWithRelationInput | ParticipantBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParticipantBadges.
     */
    cursor?: ParticipantBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParticipantBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParticipantBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParticipantBadges.
     */
    distinct?: ParticipantBadgeScalarFieldEnum | ParticipantBadgeScalarFieldEnum[]
  }

  /**
   * ParticipantBadge findFirstOrThrow
   */
  export type ParticipantBadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    /**
     * Filter, which ParticipantBadge to fetch.
     */
    where?: ParticipantBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParticipantBadges to fetch.
     */
    orderBy?: ParticipantBadgeOrderByWithRelationInput | ParticipantBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParticipantBadges.
     */
    cursor?: ParticipantBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParticipantBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParticipantBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParticipantBadges.
     */
    distinct?: ParticipantBadgeScalarFieldEnum | ParticipantBadgeScalarFieldEnum[]
  }

  /**
   * ParticipantBadge findMany
   */
  export type ParticipantBadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    /**
     * Filter, which ParticipantBadges to fetch.
     */
    where?: ParticipantBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParticipantBadges to fetch.
     */
    orderBy?: ParticipantBadgeOrderByWithRelationInput | ParticipantBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParticipantBadges.
     */
    cursor?: ParticipantBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParticipantBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParticipantBadges.
     */
    skip?: number
    distinct?: ParticipantBadgeScalarFieldEnum | ParticipantBadgeScalarFieldEnum[]
  }

  /**
   * ParticipantBadge create
   */
  export type ParticipantBadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a ParticipantBadge.
     */
    data: XOR<ParticipantBadgeCreateInput, ParticipantBadgeUncheckedCreateInput>
  }

  /**
   * ParticipantBadge createMany
   */
  export type ParticipantBadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParticipantBadges.
     */
    data: ParticipantBadgeCreateManyInput | ParticipantBadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParticipantBadge createManyAndReturn
   */
  export type ParticipantBadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * The data used to create many ParticipantBadges.
     */
    data: ParticipantBadgeCreateManyInput | ParticipantBadgeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ParticipantBadge update
   */
  export type ParticipantBadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a ParticipantBadge.
     */
    data: XOR<ParticipantBadgeUpdateInput, ParticipantBadgeUncheckedUpdateInput>
    /**
     * Choose, which ParticipantBadge to update.
     */
    where: ParticipantBadgeWhereUniqueInput
  }

  /**
   * ParticipantBadge updateMany
   */
  export type ParticipantBadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParticipantBadges.
     */
    data: XOR<ParticipantBadgeUpdateManyMutationInput, ParticipantBadgeUncheckedUpdateManyInput>
    /**
     * Filter which ParticipantBadges to update
     */
    where?: ParticipantBadgeWhereInput
    /**
     * Limit how many ParticipantBadges to update.
     */
    limit?: number
  }

  /**
   * ParticipantBadge updateManyAndReturn
   */
  export type ParticipantBadgeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * The data used to update ParticipantBadges.
     */
    data: XOR<ParticipantBadgeUpdateManyMutationInput, ParticipantBadgeUncheckedUpdateManyInput>
    /**
     * Filter which ParticipantBadges to update
     */
    where?: ParticipantBadgeWhereInput
    /**
     * Limit how many ParticipantBadges to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ParticipantBadge upsert
   */
  export type ParticipantBadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the ParticipantBadge to update in case it exists.
     */
    where: ParticipantBadgeWhereUniqueInput
    /**
     * In case the ParticipantBadge found by the `where` argument doesn't exist, create a new ParticipantBadge with this data.
     */
    create: XOR<ParticipantBadgeCreateInput, ParticipantBadgeUncheckedCreateInput>
    /**
     * In case the ParticipantBadge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParticipantBadgeUpdateInput, ParticipantBadgeUncheckedUpdateInput>
  }

  /**
   * ParticipantBadge delete
   */
  export type ParticipantBadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
    /**
     * Filter which ParticipantBadge to delete.
     */
    where: ParticipantBadgeWhereUniqueInput
  }

  /**
   * ParticipantBadge deleteMany
   */
  export type ParticipantBadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParticipantBadges to delete
     */
    where?: ParticipantBadgeWhereInput
    /**
     * Limit how many ParticipantBadges to delete.
     */
    limit?: number
  }

  /**
   * ParticipantBadge without action
   */
  export type ParticipantBadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParticipantBadge
     */
    select?: ParticipantBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParticipantBadge
     */
    omit?: ParticipantBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParticipantBadgeInclude<ExtArgs> | null
  }


  /**
   * Model EmailCampaign
   */

  export type AggregateEmailCampaign = {
    _count: EmailCampaignCountAggregateOutputType | null
    _avg: EmailCampaignAvgAggregateOutputType | null
    _sum: EmailCampaignSumAggregateOutputType | null
    _min: EmailCampaignMinAggregateOutputType | null
    _max: EmailCampaignMaxAggregateOutputType | null
  }

  export type EmailCampaignAvgAggregateOutputType = {
    totalRecipients: number | null
    successCount: number | null
    failureCount: number | null
  }

  export type EmailCampaignSumAggregateOutputType = {
    totalRecipients: number | null
    successCount: number | null
    failureCount: number | null
  }

  export type EmailCampaignMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    name: string | null
    description: string | null
    type: string | null
    recipientType: string | null
    subject: string | null
    htmlContent: string | null
    textContent: string | null
    status: string | null
    scheduledAt: Date | null
    sentAt: Date | null
    totalRecipients: number | null
    successCount: number | null
    failureCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailCampaignMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    name: string | null
    description: string | null
    type: string | null
    recipientType: string | null
    subject: string | null
    htmlContent: string | null
    textContent: string | null
    status: string | null
    scheduledAt: Date | null
    sentAt: Date | null
    totalRecipients: number | null
    successCount: number | null
    failureCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailCampaignCountAggregateOutputType = {
    id: number
    eventId: number
    name: number
    description: number
    type: number
    recipientType: number
    subject: number
    htmlContent: number
    textContent: number
    status: number
    scheduledAt: number
    sentAt: number
    totalRecipients: number
    successCount: number
    failureCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailCampaignAvgAggregateInputType = {
    totalRecipients?: true
    successCount?: true
    failureCount?: true
  }

  export type EmailCampaignSumAggregateInputType = {
    totalRecipients?: true
    successCount?: true
    failureCount?: true
  }

  export type EmailCampaignMinAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    description?: true
    type?: true
    recipientType?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    status?: true
    scheduledAt?: true
    sentAt?: true
    totalRecipients?: true
    successCount?: true
    failureCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailCampaignMaxAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    description?: true
    type?: true
    recipientType?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    status?: true
    scheduledAt?: true
    sentAt?: true
    totalRecipients?: true
    successCount?: true
    failureCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailCampaignCountAggregateInputType = {
    id?: true
    eventId?: true
    name?: true
    description?: true
    type?: true
    recipientType?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    status?: true
    scheduledAt?: true
    sentAt?: true
    totalRecipients?: true
    successCount?: true
    failureCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailCampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailCampaign to aggregate.
     */
    where?: EmailCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCampaigns to fetch.
     */
    orderBy?: EmailCampaignOrderByWithRelationInput | EmailCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCampaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailCampaigns
    **/
    _count?: true | EmailCampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailCampaignAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailCampaignSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailCampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailCampaignMaxAggregateInputType
  }

  export type GetEmailCampaignAggregateType<T extends EmailCampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailCampaign[P]>
      : GetScalarType<T[P], AggregateEmailCampaign[P]>
  }




  export type EmailCampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailCampaignWhereInput
    orderBy?: EmailCampaignOrderByWithAggregationInput | EmailCampaignOrderByWithAggregationInput[]
    by: EmailCampaignScalarFieldEnum[] | EmailCampaignScalarFieldEnum
    having?: EmailCampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailCampaignCountAggregateInputType | true
    _avg?: EmailCampaignAvgAggregateInputType
    _sum?: EmailCampaignSumAggregateInputType
    _min?: EmailCampaignMinAggregateInputType
    _max?: EmailCampaignMaxAggregateInputType
  }

  export type EmailCampaignGroupByOutputType = {
    id: string
    eventId: string
    name: string
    description: string | null
    type: string
    recipientType: string
    subject: string
    htmlContent: string
    textContent: string | null
    status: string
    scheduledAt: Date | null
    sentAt: Date | null
    totalRecipients: number | null
    successCount: number | null
    failureCount: number | null
    createdAt: Date
    updatedAt: Date
    _count: EmailCampaignCountAggregateOutputType | null
    _avg: EmailCampaignAvgAggregateOutputType | null
    _sum: EmailCampaignSumAggregateOutputType | null
    _min: EmailCampaignMinAggregateOutputType | null
    _max: EmailCampaignMaxAggregateOutputType | null
  }

  type GetEmailCampaignGroupByPayload<T extends EmailCampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailCampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailCampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailCampaignGroupByOutputType[P]>
            : GetScalarType<T[P], EmailCampaignGroupByOutputType[P]>
        }
      >
    >


  export type EmailCampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    recipientType?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    status?: boolean
    scheduledAt?: boolean
    sentAt?: boolean
    totalRecipients?: boolean
    successCount?: boolean
    failureCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    emailLogs?: boolean | EmailCampaign$emailLogsArgs<ExtArgs>
    _count?: boolean | EmailCampaignCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailCampaign"]>

  export type EmailCampaignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    recipientType?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    status?: boolean
    scheduledAt?: boolean
    sentAt?: boolean
    totalRecipients?: boolean
    successCount?: boolean
    failureCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailCampaign"]>

  export type EmailCampaignSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    recipientType?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    status?: boolean
    scheduledAt?: boolean
    sentAt?: boolean
    totalRecipients?: boolean
    successCount?: boolean
    failureCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailCampaign"]>

  export type EmailCampaignSelectScalar = {
    id?: boolean
    eventId?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    recipientType?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    status?: boolean
    scheduledAt?: boolean
    sentAt?: boolean
    totalRecipients?: boolean
    successCount?: boolean
    failureCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailCampaignOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "name" | "description" | "type" | "recipientType" | "subject" | "htmlContent" | "textContent" | "status" | "scheduledAt" | "sentAt" | "totalRecipients" | "successCount" | "failureCount" | "createdAt" | "updatedAt", ExtArgs["result"]["emailCampaign"]>
  export type EmailCampaignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    emailLogs?: boolean | EmailCampaign$emailLogsArgs<ExtArgs>
    _count?: boolean | EmailCampaignCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmailCampaignIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type EmailCampaignIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $EmailCampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailCampaign"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      emailLogs: Prisma.$EmailLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      name: string
      description: string | null
      type: string
      recipientType: string
      subject: string
      htmlContent: string
      textContent: string | null
      status: string
      scheduledAt: Date | null
      sentAt: Date | null
      totalRecipients: number | null
      successCount: number | null
      failureCount: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailCampaign"]>
    composites: {}
  }

  type EmailCampaignGetPayload<S extends boolean | null | undefined | EmailCampaignDefaultArgs> = $Result.GetResult<Prisma.$EmailCampaignPayload, S>

  type EmailCampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailCampaignFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailCampaignCountAggregateInputType | true
    }

  export interface EmailCampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailCampaign'], meta: { name: 'EmailCampaign' } }
    /**
     * Find zero or one EmailCampaign that matches the filter.
     * @param {EmailCampaignFindUniqueArgs} args - Arguments to find a EmailCampaign
     * @example
     * // Get one EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailCampaignFindUniqueArgs>(args: SelectSubset<T, EmailCampaignFindUniqueArgs<ExtArgs>>): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailCampaign that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailCampaignFindUniqueOrThrowArgs} args - Arguments to find a EmailCampaign
     * @example
     * // Get one EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailCampaignFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailCampaignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailCampaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignFindFirstArgs} args - Arguments to find a EmailCampaign
     * @example
     * // Get one EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailCampaignFindFirstArgs>(args?: SelectSubset<T, EmailCampaignFindFirstArgs<ExtArgs>>): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailCampaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignFindFirstOrThrowArgs} args - Arguments to find a EmailCampaign
     * @example
     * // Get one EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailCampaignFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailCampaignFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailCampaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailCampaigns
     * const emailCampaigns = await prisma.emailCampaign.findMany()
     * 
     * // Get first 10 EmailCampaigns
     * const emailCampaigns = await prisma.emailCampaign.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailCampaignWithIdOnly = await prisma.emailCampaign.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailCampaignFindManyArgs>(args?: SelectSubset<T, EmailCampaignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailCampaign.
     * @param {EmailCampaignCreateArgs} args - Arguments to create a EmailCampaign.
     * @example
     * // Create one EmailCampaign
     * const EmailCampaign = await prisma.emailCampaign.create({
     *   data: {
     *     // ... data to create a EmailCampaign
     *   }
     * })
     * 
     */
    create<T extends EmailCampaignCreateArgs>(args: SelectSubset<T, EmailCampaignCreateArgs<ExtArgs>>): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailCampaigns.
     * @param {EmailCampaignCreateManyArgs} args - Arguments to create many EmailCampaigns.
     * @example
     * // Create many EmailCampaigns
     * const emailCampaign = await prisma.emailCampaign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailCampaignCreateManyArgs>(args?: SelectSubset<T, EmailCampaignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailCampaigns and returns the data saved in the database.
     * @param {EmailCampaignCreateManyAndReturnArgs} args - Arguments to create many EmailCampaigns.
     * @example
     * // Create many EmailCampaigns
     * const emailCampaign = await prisma.emailCampaign.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailCampaigns and only return the `id`
     * const emailCampaignWithIdOnly = await prisma.emailCampaign.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailCampaignCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailCampaignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailCampaign.
     * @param {EmailCampaignDeleteArgs} args - Arguments to delete one EmailCampaign.
     * @example
     * // Delete one EmailCampaign
     * const EmailCampaign = await prisma.emailCampaign.delete({
     *   where: {
     *     // ... filter to delete one EmailCampaign
     *   }
     * })
     * 
     */
    delete<T extends EmailCampaignDeleteArgs>(args: SelectSubset<T, EmailCampaignDeleteArgs<ExtArgs>>): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailCampaign.
     * @param {EmailCampaignUpdateArgs} args - Arguments to update one EmailCampaign.
     * @example
     * // Update one EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailCampaignUpdateArgs>(args: SelectSubset<T, EmailCampaignUpdateArgs<ExtArgs>>): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailCampaigns.
     * @param {EmailCampaignDeleteManyArgs} args - Arguments to filter EmailCampaigns to delete.
     * @example
     * // Delete a few EmailCampaigns
     * const { count } = await prisma.emailCampaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailCampaignDeleteManyArgs>(args?: SelectSubset<T, EmailCampaignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailCampaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailCampaigns
     * const emailCampaign = await prisma.emailCampaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailCampaignUpdateManyArgs>(args: SelectSubset<T, EmailCampaignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailCampaigns and returns the data updated in the database.
     * @param {EmailCampaignUpdateManyAndReturnArgs} args - Arguments to update many EmailCampaigns.
     * @example
     * // Update many EmailCampaigns
     * const emailCampaign = await prisma.emailCampaign.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailCampaigns and only return the `id`
     * const emailCampaignWithIdOnly = await prisma.emailCampaign.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailCampaignUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailCampaignUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailCampaign.
     * @param {EmailCampaignUpsertArgs} args - Arguments to update or create a EmailCampaign.
     * @example
     * // Update or create a EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.upsert({
     *   create: {
     *     // ... data to create a EmailCampaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailCampaign we want to update
     *   }
     * })
     */
    upsert<T extends EmailCampaignUpsertArgs>(args: SelectSubset<T, EmailCampaignUpsertArgs<ExtArgs>>): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailCampaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignCountArgs} args - Arguments to filter EmailCampaigns to count.
     * @example
     * // Count the number of EmailCampaigns
     * const count = await prisma.emailCampaign.count({
     *   where: {
     *     // ... the filter for the EmailCampaigns we want to count
     *   }
     * })
    **/
    count<T extends EmailCampaignCountArgs>(
      args?: Subset<T, EmailCampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailCampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailCampaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailCampaignAggregateArgs>(args: Subset<T, EmailCampaignAggregateArgs>): Prisma.PrismaPromise<GetEmailCampaignAggregateType<T>>

    /**
     * Group by EmailCampaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailCampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailCampaignGroupByArgs['orderBy'] }
        : { orderBy?: EmailCampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailCampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailCampaign model
   */
  readonly fields: EmailCampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailCampaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailCampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    emailLogs<T extends EmailCampaign$emailLogsArgs<ExtArgs> = {}>(args?: Subset<T, EmailCampaign$emailLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailCampaign model
   */
  interface EmailCampaignFieldRefs {
    readonly id: FieldRef<"EmailCampaign", 'String'>
    readonly eventId: FieldRef<"EmailCampaign", 'String'>
    readonly name: FieldRef<"EmailCampaign", 'String'>
    readonly description: FieldRef<"EmailCampaign", 'String'>
    readonly type: FieldRef<"EmailCampaign", 'String'>
    readonly recipientType: FieldRef<"EmailCampaign", 'String'>
    readonly subject: FieldRef<"EmailCampaign", 'String'>
    readonly htmlContent: FieldRef<"EmailCampaign", 'String'>
    readonly textContent: FieldRef<"EmailCampaign", 'String'>
    readonly status: FieldRef<"EmailCampaign", 'String'>
    readonly scheduledAt: FieldRef<"EmailCampaign", 'DateTime'>
    readonly sentAt: FieldRef<"EmailCampaign", 'DateTime'>
    readonly totalRecipients: FieldRef<"EmailCampaign", 'Int'>
    readonly successCount: FieldRef<"EmailCampaign", 'Int'>
    readonly failureCount: FieldRef<"EmailCampaign", 'Int'>
    readonly createdAt: FieldRef<"EmailCampaign", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailCampaign", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailCampaign findUnique
   */
  export type EmailCampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter, which EmailCampaign to fetch.
     */
    where: EmailCampaignWhereUniqueInput
  }

  /**
   * EmailCampaign findUniqueOrThrow
   */
  export type EmailCampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter, which EmailCampaign to fetch.
     */
    where: EmailCampaignWhereUniqueInput
  }

  /**
   * EmailCampaign findFirst
   */
  export type EmailCampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter, which EmailCampaign to fetch.
     */
    where?: EmailCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCampaigns to fetch.
     */
    orderBy?: EmailCampaignOrderByWithRelationInput | EmailCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailCampaigns.
     */
    cursor?: EmailCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCampaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailCampaigns.
     */
    distinct?: EmailCampaignScalarFieldEnum | EmailCampaignScalarFieldEnum[]
  }

  /**
   * EmailCampaign findFirstOrThrow
   */
  export type EmailCampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter, which EmailCampaign to fetch.
     */
    where?: EmailCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCampaigns to fetch.
     */
    orderBy?: EmailCampaignOrderByWithRelationInput | EmailCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailCampaigns.
     */
    cursor?: EmailCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCampaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailCampaigns.
     */
    distinct?: EmailCampaignScalarFieldEnum | EmailCampaignScalarFieldEnum[]
  }

  /**
   * EmailCampaign findMany
   */
  export type EmailCampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter, which EmailCampaigns to fetch.
     */
    where?: EmailCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCampaigns to fetch.
     */
    orderBy?: EmailCampaignOrderByWithRelationInput | EmailCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailCampaigns.
     */
    cursor?: EmailCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCampaigns.
     */
    skip?: number
    distinct?: EmailCampaignScalarFieldEnum | EmailCampaignScalarFieldEnum[]
  }

  /**
   * EmailCampaign create
   */
  export type EmailCampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailCampaign.
     */
    data: XOR<EmailCampaignCreateInput, EmailCampaignUncheckedCreateInput>
  }

  /**
   * EmailCampaign createMany
   */
  export type EmailCampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailCampaigns.
     */
    data: EmailCampaignCreateManyInput | EmailCampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailCampaign createManyAndReturn
   */
  export type EmailCampaignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * The data used to create many EmailCampaigns.
     */
    data: EmailCampaignCreateManyInput | EmailCampaignCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailCampaign update
   */
  export type EmailCampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailCampaign.
     */
    data: XOR<EmailCampaignUpdateInput, EmailCampaignUncheckedUpdateInput>
    /**
     * Choose, which EmailCampaign to update.
     */
    where: EmailCampaignWhereUniqueInput
  }

  /**
   * EmailCampaign updateMany
   */
  export type EmailCampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailCampaigns.
     */
    data: XOR<EmailCampaignUpdateManyMutationInput, EmailCampaignUncheckedUpdateManyInput>
    /**
     * Filter which EmailCampaigns to update
     */
    where?: EmailCampaignWhereInput
    /**
     * Limit how many EmailCampaigns to update.
     */
    limit?: number
  }

  /**
   * EmailCampaign updateManyAndReturn
   */
  export type EmailCampaignUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * The data used to update EmailCampaigns.
     */
    data: XOR<EmailCampaignUpdateManyMutationInput, EmailCampaignUncheckedUpdateManyInput>
    /**
     * Filter which EmailCampaigns to update
     */
    where?: EmailCampaignWhereInput
    /**
     * Limit how many EmailCampaigns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailCampaign upsert
   */
  export type EmailCampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailCampaign to update in case it exists.
     */
    where: EmailCampaignWhereUniqueInput
    /**
     * In case the EmailCampaign found by the `where` argument doesn't exist, create a new EmailCampaign with this data.
     */
    create: XOR<EmailCampaignCreateInput, EmailCampaignUncheckedCreateInput>
    /**
     * In case the EmailCampaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailCampaignUpdateInput, EmailCampaignUncheckedUpdateInput>
  }

  /**
   * EmailCampaign delete
   */
  export type EmailCampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter which EmailCampaign to delete.
     */
    where: EmailCampaignWhereUniqueInput
  }

  /**
   * EmailCampaign deleteMany
   */
  export type EmailCampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailCampaigns to delete
     */
    where?: EmailCampaignWhereInput
    /**
     * Limit how many EmailCampaigns to delete.
     */
    limit?: number
  }

  /**
   * EmailCampaign.emailLogs
   */
  export type EmailCampaign$emailLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    where?: EmailLogWhereInput
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    cursor?: EmailLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailCampaign without action
   */
  export type EmailCampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailCampaign
     */
    omit?: EmailCampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
  }


  /**
   * Model EmailTemplate
   */

  export type AggregateEmailTemplate = {
    _count: EmailTemplateCountAggregateOutputType | null
    _min: EmailTemplateMinAggregateOutputType | null
    _max: EmailTemplateMaxAggregateOutputType | null
  }

  export type EmailTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    subject: string | null
    htmlContent: string | null
    textContent: string | null
    type: string | null
    category: string | null
    isGlobal: boolean | null
    eventId: string | null
    isActive: boolean | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    subject: string | null
    htmlContent: string | null
    textContent: string | null
    type: string | null
    category: string | null
    isGlobal: boolean | null
    eventId: string | null
    isActive: boolean | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    subject: number
    htmlContent: number
    textContent: number
    type: number
    category: number
    isGlobal: number
    eventId: number
    isActive: number
    isDefault: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    type?: true
    category?: true
    isGlobal?: true
    eventId?: true
    isActive?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    type?: true
    category?: true
    isGlobal?: true
    eventId?: true
    isActive?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    subject?: true
    htmlContent?: true
    textContent?: true
    type?: true
    category?: true
    isGlobal?: true
    eventId?: true
    isActive?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailTemplate to aggregate.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailTemplates
    **/
    _count?: true | EmailTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailTemplateMaxAggregateInputType
  }

  export type GetEmailTemplateAggregateType<T extends EmailTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailTemplate[P]>
      : GetScalarType<T[P], AggregateEmailTemplate[P]>
  }




  export type EmailTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailTemplateWhereInput
    orderBy?: EmailTemplateOrderByWithAggregationInput | EmailTemplateOrderByWithAggregationInput[]
    by: EmailTemplateScalarFieldEnum[] | EmailTemplateScalarFieldEnum
    having?: EmailTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailTemplateCountAggregateInputType | true
    _min?: EmailTemplateMinAggregateInputType
    _max?: EmailTemplateMaxAggregateInputType
  }

  export type EmailTemplateGroupByOutputType = {
    id: string
    name: string
    description: string | null
    subject: string
    htmlContent: string
    textContent: string | null
    type: string
    category: string | null
    isGlobal: boolean
    eventId: string | null
    isActive: boolean
    isDefault: boolean
    createdAt: Date
    updatedAt: Date
    _count: EmailTemplateCountAggregateOutputType | null
    _min: EmailTemplateMinAggregateOutputType | null
    _max: EmailTemplateMaxAggregateOutputType | null
  }

  type GetEmailTemplateGroupByPayload<T extends EmailTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], EmailTemplateGroupByOutputType[P]>
        }
      >
    >


  export type EmailTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    type?: boolean
    category?: boolean
    isGlobal?: boolean
    eventId?: boolean
    isActive?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EmailTemplate$eventArgs<ExtArgs>
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    type?: boolean
    category?: boolean
    isGlobal?: boolean
    eventId?: boolean
    isActive?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EmailTemplate$eventArgs<ExtArgs>
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    type?: boolean
    category?: boolean
    isGlobal?: boolean
    eventId?: boolean
    isActive?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EmailTemplate$eventArgs<ExtArgs>
  }, ExtArgs["result"]["emailTemplate"]>

  export type EmailTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    htmlContent?: boolean
    textContent?: boolean
    type?: boolean
    category?: boolean
    isGlobal?: boolean
    eventId?: boolean
    isActive?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "subject" | "htmlContent" | "textContent" | "type" | "category" | "isGlobal" | "eventId" | "isActive" | "isDefault" | "createdAt" | "updatedAt", ExtArgs["result"]["emailTemplate"]>
  export type EmailTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EmailTemplate$eventArgs<ExtArgs>
  }
  export type EmailTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EmailTemplate$eventArgs<ExtArgs>
  }
  export type EmailTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EmailTemplate$eventArgs<ExtArgs>
  }

  export type $EmailTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailTemplate"
    objects: {
      event: Prisma.$EventPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      subject: string
      htmlContent: string
      textContent: string | null
      type: string
      category: string | null
      isGlobal: boolean
      eventId: string | null
      isActive: boolean
      isDefault: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailTemplate"]>
    composites: {}
  }

  type EmailTemplateGetPayload<S extends boolean | null | undefined | EmailTemplateDefaultArgs> = $Result.GetResult<Prisma.$EmailTemplatePayload, S>

  type EmailTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailTemplateCountAggregateInputType | true
    }

  export interface EmailTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailTemplate'], meta: { name: 'EmailTemplate' } }
    /**
     * Find zero or one EmailTemplate that matches the filter.
     * @param {EmailTemplateFindUniqueArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailTemplateFindUniqueArgs>(args: SelectSubset<T, EmailTemplateFindUniqueArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailTemplateFindUniqueOrThrowArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindFirstArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailTemplateFindFirstArgs>(args?: SelectSubset<T, EmailTemplateFindFirstArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindFirstOrThrowArgs} args - Arguments to find a EmailTemplate
     * @example
     * // Get one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailTemplates
     * const emailTemplates = await prisma.emailTemplate.findMany()
     * 
     * // Get first 10 EmailTemplates
     * const emailTemplates = await prisma.emailTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailTemplateFindManyArgs>(args?: SelectSubset<T, EmailTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailTemplate.
     * @param {EmailTemplateCreateArgs} args - Arguments to create a EmailTemplate.
     * @example
     * // Create one EmailTemplate
     * const EmailTemplate = await prisma.emailTemplate.create({
     *   data: {
     *     // ... data to create a EmailTemplate
     *   }
     * })
     * 
     */
    create<T extends EmailTemplateCreateArgs>(args: SelectSubset<T, EmailTemplateCreateArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailTemplates.
     * @param {EmailTemplateCreateManyArgs} args - Arguments to create many EmailTemplates.
     * @example
     * // Create many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailTemplateCreateManyArgs>(args?: SelectSubset<T, EmailTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailTemplates and returns the data saved in the database.
     * @param {EmailTemplateCreateManyAndReturnArgs} args - Arguments to create many EmailTemplates.
     * @example
     * // Create many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailTemplates and only return the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailTemplate.
     * @param {EmailTemplateDeleteArgs} args - Arguments to delete one EmailTemplate.
     * @example
     * // Delete one EmailTemplate
     * const EmailTemplate = await prisma.emailTemplate.delete({
     *   where: {
     *     // ... filter to delete one EmailTemplate
     *   }
     * })
     * 
     */
    delete<T extends EmailTemplateDeleteArgs>(args: SelectSubset<T, EmailTemplateDeleteArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailTemplate.
     * @param {EmailTemplateUpdateArgs} args - Arguments to update one EmailTemplate.
     * @example
     * // Update one EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailTemplateUpdateArgs>(args: SelectSubset<T, EmailTemplateUpdateArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailTemplates.
     * @param {EmailTemplateDeleteManyArgs} args - Arguments to filter EmailTemplates to delete.
     * @example
     * // Delete a few EmailTemplates
     * const { count } = await prisma.emailTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailTemplateDeleteManyArgs>(args?: SelectSubset<T, EmailTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailTemplateUpdateManyArgs>(args: SelectSubset<T, EmailTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailTemplates and returns the data updated in the database.
     * @param {EmailTemplateUpdateManyAndReturnArgs} args - Arguments to update many EmailTemplates.
     * @example
     * // Update many EmailTemplates
     * const emailTemplate = await prisma.emailTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailTemplates and only return the `id`
     * const emailTemplateWithIdOnly = await prisma.emailTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailTemplate.
     * @param {EmailTemplateUpsertArgs} args - Arguments to update or create a EmailTemplate.
     * @example
     * // Update or create a EmailTemplate
     * const emailTemplate = await prisma.emailTemplate.upsert({
     *   create: {
     *     // ... data to create a EmailTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailTemplate we want to update
     *   }
     * })
     */
    upsert<T extends EmailTemplateUpsertArgs>(args: SelectSubset<T, EmailTemplateUpsertArgs<ExtArgs>>): Prisma__EmailTemplateClient<$Result.GetResult<Prisma.$EmailTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateCountArgs} args - Arguments to filter EmailTemplates to count.
     * @example
     * // Count the number of EmailTemplates
     * const count = await prisma.emailTemplate.count({
     *   where: {
     *     // ... the filter for the EmailTemplates we want to count
     *   }
     * })
    **/
    count<T extends EmailTemplateCountArgs>(
      args?: Subset<T, EmailTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailTemplateAggregateArgs>(args: Subset<T, EmailTemplateAggregateArgs>): Prisma.PrismaPromise<GetEmailTemplateAggregateType<T>>

    /**
     * Group by EmailTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailTemplateGroupByArgs['orderBy'] }
        : { orderBy?: EmailTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailTemplate model
   */
  readonly fields: EmailTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EmailTemplate$eventArgs<ExtArgs> = {}>(args?: Subset<T, EmailTemplate$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailTemplate model
   */
  interface EmailTemplateFieldRefs {
    readonly id: FieldRef<"EmailTemplate", 'String'>
    readonly name: FieldRef<"EmailTemplate", 'String'>
    readonly description: FieldRef<"EmailTemplate", 'String'>
    readonly subject: FieldRef<"EmailTemplate", 'String'>
    readonly htmlContent: FieldRef<"EmailTemplate", 'String'>
    readonly textContent: FieldRef<"EmailTemplate", 'String'>
    readonly type: FieldRef<"EmailTemplate", 'String'>
    readonly category: FieldRef<"EmailTemplate", 'String'>
    readonly isGlobal: FieldRef<"EmailTemplate", 'Boolean'>
    readonly eventId: FieldRef<"EmailTemplate", 'String'>
    readonly isActive: FieldRef<"EmailTemplate", 'Boolean'>
    readonly isDefault: FieldRef<"EmailTemplate", 'Boolean'>
    readonly createdAt: FieldRef<"EmailTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailTemplate findUnique
   */
  export type EmailTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate findUniqueOrThrow
   */
  export type EmailTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate findFirst
   */
  export type EmailTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailTemplates.
     */
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate findFirstOrThrow
   */
  export type EmailTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EmailTemplate to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailTemplates.
     */
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate findMany
   */
  export type EmailTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter, which EmailTemplates to fetch.
     */
    where?: EmailTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTemplates to fetch.
     */
    orderBy?: EmailTemplateOrderByWithRelationInput | EmailTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailTemplates.
     */
    cursor?: EmailTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTemplates.
     */
    skip?: number
    distinct?: EmailTemplateScalarFieldEnum | EmailTemplateScalarFieldEnum[]
  }

  /**
   * EmailTemplate create
   */
  export type EmailTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailTemplate.
     */
    data: XOR<EmailTemplateCreateInput, EmailTemplateUncheckedCreateInput>
  }

  /**
   * EmailTemplate createMany
   */
  export type EmailTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailTemplates.
     */
    data: EmailTemplateCreateManyInput | EmailTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailTemplate createManyAndReturn
   */
  export type EmailTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many EmailTemplates.
     */
    data: EmailTemplateCreateManyInput | EmailTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailTemplate update
   */
  export type EmailTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailTemplate.
     */
    data: XOR<EmailTemplateUpdateInput, EmailTemplateUncheckedUpdateInput>
    /**
     * Choose, which EmailTemplate to update.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate updateMany
   */
  export type EmailTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailTemplates.
     */
    data: XOR<EmailTemplateUpdateManyMutationInput, EmailTemplateUncheckedUpdateManyInput>
    /**
     * Filter which EmailTemplates to update
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to update.
     */
    limit?: number
  }

  /**
   * EmailTemplate updateManyAndReturn
   */
  export type EmailTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * The data used to update EmailTemplates.
     */
    data: XOR<EmailTemplateUpdateManyMutationInput, EmailTemplateUncheckedUpdateManyInput>
    /**
     * Filter which EmailTemplates to update
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailTemplate upsert
   */
  export type EmailTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailTemplate to update in case it exists.
     */
    where: EmailTemplateWhereUniqueInput
    /**
     * In case the EmailTemplate found by the `where` argument doesn't exist, create a new EmailTemplate with this data.
     */
    create: XOR<EmailTemplateCreateInput, EmailTemplateUncheckedCreateInput>
    /**
     * In case the EmailTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailTemplateUpdateInput, EmailTemplateUncheckedUpdateInput>
  }

  /**
   * EmailTemplate delete
   */
  export type EmailTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
    /**
     * Filter which EmailTemplate to delete.
     */
    where: EmailTemplateWhereUniqueInput
  }

  /**
   * EmailTemplate deleteMany
   */
  export type EmailTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailTemplates to delete
     */
    where?: EmailTemplateWhereInput
    /**
     * Limit how many EmailTemplates to delete.
     */
    limit?: number
  }

  /**
   * EmailTemplate.event
   */
  export type EmailTemplate$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * EmailTemplate without action
   */
  export type EmailTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailTemplate
     */
    select?: EmailTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailTemplate
     */
    omit?: EmailTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailTemplateInclude<ExtArgs> | null
  }


  /**
   * Model EmailLog
   */

  export type AggregateEmailLog = {
    _count: EmailLogCountAggregateOutputType | null
    _min: EmailLogMinAggregateOutputType | null
    _max: EmailLogMaxAggregateOutputType | null
  }

  export type EmailLogMinAggregateOutputType = {
    id: string | null
    campaignId: string | null
    recipientEmail: string | null
    recipientName: string | null
    status: string | null
    errorMessage: string | null
    sentAt: Date | null
    deliveredAt: Date | null
    openedAt: Date | null
    clickedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailLogMaxAggregateOutputType = {
    id: string | null
    campaignId: string | null
    recipientEmail: string | null
    recipientName: string | null
    status: string | null
    errorMessage: string | null
    sentAt: Date | null
    deliveredAt: Date | null
    openedAt: Date | null
    clickedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailLogCountAggregateOutputType = {
    id: number
    campaignId: number
    recipientEmail: number
    recipientName: number
    status: number
    errorMessage: number
    sentAt: number
    deliveredAt: number
    openedAt: number
    clickedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailLogMinAggregateInputType = {
    id?: true
    campaignId?: true
    recipientEmail?: true
    recipientName?: true
    status?: true
    errorMessage?: true
    sentAt?: true
    deliveredAt?: true
    openedAt?: true
    clickedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailLogMaxAggregateInputType = {
    id?: true
    campaignId?: true
    recipientEmail?: true
    recipientName?: true
    status?: true
    errorMessage?: true
    sentAt?: true
    deliveredAt?: true
    openedAt?: true
    clickedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailLogCountAggregateInputType = {
    id?: true
    campaignId?: true
    recipientEmail?: true
    recipientName?: true
    status?: true
    errorMessage?: true
    sentAt?: true
    deliveredAt?: true
    openedAt?: true
    clickedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailLog to aggregate.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailLogs
    **/
    _count?: true | EmailLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailLogMaxAggregateInputType
  }

  export type GetEmailLogAggregateType<T extends EmailLogAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailLog[P]>
      : GetScalarType<T[P], AggregateEmailLog[P]>
  }




  export type EmailLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailLogWhereInput
    orderBy?: EmailLogOrderByWithAggregationInput | EmailLogOrderByWithAggregationInput[]
    by: EmailLogScalarFieldEnum[] | EmailLogScalarFieldEnum
    having?: EmailLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailLogCountAggregateInputType | true
    _min?: EmailLogMinAggregateInputType
    _max?: EmailLogMaxAggregateInputType
  }

  export type EmailLogGroupByOutputType = {
    id: string
    campaignId: string
    recipientEmail: string
    recipientName: string | null
    status: string
    errorMessage: string | null
    sentAt: Date | null
    deliveredAt: Date | null
    openedAt: Date | null
    clickedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: EmailLogCountAggregateOutputType | null
    _min: EmailLogMinAggregateOutputType | null
    _max: EmailLogMaxAggregateOutputType | null
  }

  type GetEmailLogGroupByPayload<T extends EmailLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailLogGroupByOutputType[P]>
            : GetScalarType<T[P], EmailLogGroupByOutputType[P]>
        }
      >
    >


  export type EmailLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    recipientEmail?: boolean
    recipientName?: boolean
    status?: boolean
    errorMessage?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | EmailCampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailLog"]>

  export type EmailLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    recipientEmail?: boolean
    recipientName?: boolean
    status?: boolean
    errorMessage?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | EmailCampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailLog"]>

  export type EmailLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    recipientEmail?: boolean
    recipientName?: boolean
    status?: boolean
    errorMessage?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | EmailCampaignDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailLog"]>

  export type EmailLogSelectScalar = {
    id?: boolean
    campaignId?: boolean
    recipientEmail?: boolean
    recipientName?: boolean
    status?: boolean
    errorMessage?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    openedAt?: boolean
    clickedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "campaignId" | "recipientEmail" | "recipientName" | "status" | "errorMessage" | "sentAt" | "deliveredAt" | "openedAt" | "clickedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["emailLog"]>
  export type EmailLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | EmailCampaignDefaultArgs<ExtArgs>
  }
  export type EmailLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | EmailCampaignDefaultArgs<ExtArgs>
  }
  export type EmailLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | EmailCampaignDefaultArgs<ExtArgs>
  }

  export type $EmailLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailLog"
    objects: {
      campaign: Prisma.$EmailCampaignPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      campaignId: string
      recipientEmail: string
      recipientName: string | null
      status: string
      errorMessage: string | null
      sentAt: Date | null
      deliveredAt: Date | null
      openedAt: Date | null
      clickedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailLog"]>
    composites: {}
  }

  type EmailLogGetPayload<S extends boolean | null | undefined | EmailLogDefaultArgs> = $Result.GetResult<Prisma.$EmailLogPayload, S>

  type EmailLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailLogCountAggregateInputType | true
    }

  export interface EmailLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailLog'], meta: { name: 'EmailLog' } }
    /**
     * Find zero or one EmailLog that matches the filter.
     * @param {EmailLogFindUniqueArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailLogFindUniqueArgs>(args: SelectSubset<T, EmailLogFindUniqueArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailLogFindUniqueOrThrowArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailLogFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindFirstArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailLogFindFirstArgs>(args?: SelectSubset<T, EmailLogFindFirstArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindFirstOrThrowArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailLogFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailLogs
     * const emailLogs = await prisma.emailLog.findMany()
     * 
     * // Get first 10 EmailLogs
     * const emailLogs = await prisma.emailLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailLogWithIdOnly = await prisma.emailLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailLogFindManyArgs>(args?: SelectSubset<T, EmailLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailLog.
     * @param {EmailLogCreateArgs} args - Arguments to create a EmailLog.
     * @example
     * // Create one EmailLog
     * const EmailLog = await prisma.emailLog.create({
     *   data: {
     *     // ... data to create a EmailLog
     *   }
     * })
     * 
     */
    create<T extends EmailLogCreateArgs>(args: SelectSubset<T, EmailLogCreateArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailLogs.
     * @param {EmailLogCreateManyArgs} args - Arguments to create many EmailLogs.
     * @example
     * // Create many EmailLogs
     * const emailLog = await prisma.emailLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailLogCreateManyArgs>(args?: SelectSubset<T, EmailLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailLogs and returns the data saved in the database.
     * @param {EmailLogCreateManyAndReturnArgs} args - Arguments to create many EmailLogs.
     * @example
     * // Create many EmailLogs
     * const emailLog = await prisma.emailLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailLogs and only return the `id`
     * const emailLogWithIdOnly = await prisma.emailLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailLogCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailLog.
     * @param {EmailLogDeleteArgs} args - Arguments to delete one EmailLog.
     * @example
     * // Delete one EmailLog
     * const EmailLog = await prisma.emailLog.delete({
     *   where: {
     *     // ... filter to delete one EmailLog
     *   }
     * })
     * 
     */
    delete<T extends EmailLogDeleteArgs>(args: SelectSubset<T, EmailLogDeleteArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailLog.
     * @param {EmailLogUpdateArgs} args - Arguments to update one EmailLog.
     * @example
     * // Update one EmailLog
     * const emailLog = await prisma.emailLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailLogUpdateArgs>(args: SelectSubset<T, EmailLogUpdateArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailLogs.
     * @param {EmailLogDeleteManyArgs} args - Arguments to filter EmailLogs to delete.
     * @example
     * // Delete a few EmailLogs
     * const { count } = await prisma.emailLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailLogDeleteManyArgs>(args?: SelectSubset<T, EmailLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailLogs
     * const emailLog = await prisma.emailLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailLogUpdateManyArgs>(args: SelectSubset<T, EmailLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailLogs and returns the data updated in the database.
     * @param {EmailLogUpdateManyAndReturnArgs} args - Arguments to update many EmailLogs.
     * @example
     * // Update many EmailLogs
     * const emailLog = await prisma.emailLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailLogs and only return the `id`
     * const emailLogWithIdOnly = await prisma.emailLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailLogUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailLog.
     * @param {EmailLogUpsertArgs} args - Arguments to update or create a EmailLog.
     * @example
     * // Update or create a EmailLog
     * const emailLog = await prisma.emailLog.upsert({
     *   create: {
     *     // ... data to create a EmailLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailLog we want to update
     *   }
     * })
     */
    upsert<T extends EmailLogUpsertArgs>(args: SelectSubset<T, EmailLogUpsertArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogCountArgs} args - Arguments to filter EmailLogs to count.
     * @example
     * // Count the number of EmailLogs
     * const count = await prisma.emailLog.count({
     *   where: {
     *     // ... the filter for the EmailLogs we want to count
     *   }
     * })
    **/
    count<T extends EmailLogCountArgs>(
      args?: Subset<T, EmailLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailLogAggregateArgs>(args: Subset<T, EmailLogAggregateArgs>): Prisma.PrismaPromise<GetEmailLogAggregateType<T>>

    /**
     * Group by EmailLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailLogGroupByArgs['orderBy'] }
        : { orderBy?: EmailLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailLog model
   */
  readonly fields: EmailLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends EmailCampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmailCampaignDefaultArgs<ExtArgs>>): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailLog model
   */
  interface EmailLogFieldRefs {
    readonly id: FieldRef<"EmailLog", 'String'>
    readonly campaignId: FieldRef<"EmailLog", 'String'>
    readonly recipientEmail: FieldRef<"EmailLog", 'String'>
    readonly recipientName: FieldRef<"EmailLog", 'String'>
    readonly status: FieldRef<"EmailLog", 'String'>
    readonly errorMessage: FieldRef<"EmailLog", 'String'>
    readonly sentAt: FieldRef<"EmailLog", 'DateTime'>
    readonly deliveredAt: FieldRef<"EmailLog", 'DateTime'>
    readonly openedAt: FieldRef<"EmailLog", 'DateTime'>
    readonly clickedAt: FieldRef<"EmailLog", 'DateTime'>
    readonly createdAt: FieldRef<"EmailLog", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailLog findUnique
   */
  export type EmailLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog findUniqueOrThrow
   */
  export type EmailLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog findFirst
   */
  export type EmailLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailLogs.
     */
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog findFirstOrThrow
   */
  export type EmailLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailLogs.
     */
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog findMany
   */
  export type EmailLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLogs to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog create
   */
  export type EmailLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailLog.
     */
    data: XOR<EmailLogCreateInput, EmailLogUncheckedCreateInput>
  }

  /**
   * EmailLog createMany
   */
  export type EmailLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailLogs.
     */
    data: EmailLogCreateManyInput | EmailLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailLog createManyAndReturn
   */
  export type EmailLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * The data used to create many EmailLogs.
     */
    data: EmailLogCreateManyInput | EmailLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailLog update
   */
  export type EmailLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailLog.
     */
    data: XOR<EmailLogUpdateInput, EmailLogUncheckedUpdateInput>
    /**
     * Choose, which EmailLog to update.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog updateMany
   */
  export type EmailLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailLogs.
     */
    data: XOR<EmailLogUpdateManyMutationInput, EmailLogUncheckedUpdateManyInput>
    /**
     * Filter which EmailLogs to update
     */
    where?: EmailLogWhereInput
    /**
     * Limit how many EmailLogs to update.
     */
    limit?: number
  }

  /**
   * EmailLog updateManyAndReturn
   */
  export type EmailLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * The data used to update EmailLogs.
     */
    data: XOR<EmailLogUpdateManyMutationInput, EmailLogUncheckedUpdateManyInput>
    /**
     * Filter which EmailLogs to update
     */
    where?: EmailLogWhereInput
    /**
     * Limit how many EmailLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailLog upsert
   */
  export type EmailLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailLog to update in case it exists.
     */
    where: EmailLogWhereUniqueInput
    /**
     * In case the EmailLog found by the `where` argument doesn't exist, create a new EmailLog with this data.
     */
    create: XOR<EmailLogCreateInput, EmailLogUncheckedCreateInput>
    /**
     * In case the EmailLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailLogUpdateInput, EmailLogUncheckedUpdateInput>
  }

  /**
   * EmailLog delete
   */
  export type EmailLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter which EmailLog to delete.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog deleteMany
   */
  export type EmailLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailLogs to delete
     */
    where?: EmailLogWhereInput
    /**
     * Limit how many EmailLogs to delete.
     */
    limit?: number
  }

  /**
   * EmailLog without action
   */
  export type EmailLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    points: number | null
  }

  export type GameSumAggregateOutputType = {
    points: number | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    participantId: string | null
    action: string | null
    points: number | null
    actionDetails: string | null
    relatedEntityId: string | null
    createdAt: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    participantId: string | null
    action: string | null
    points: number | null
    actionDetails: string | null
    relatedEntityId: string | null
    createdAt: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    eventId: number
    participantId: number
    action: number
    points: number
    actionDetails: number
    relatedEntityId: number
    createdAt: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    points?: true
  }

  export type GameSumAggregateInputType = {
    points?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    eventId?: true
    participantId?: true
    action?: true
    points?: true
    actionDetails?: true
    relatedEntityId?: true
    createdAt?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    eventId?: true
    participantId?: true
    action?: true
    points?: true
    actionDetails?: true
    relatedEntityId?: true
    createdAt?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    eventId?: true
    participantId?: true
    action?: true
    points?: true
    actionDetails?: true
    relatedEntityId?: true
    createdAt?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: string
    eventId: string
    participantId: string
    action: string
    points: number
    actionDetails: string | null
    relatedEntityId: string | null
    createdAt: Date
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    participantId?: boolean
    action?: boolean
    points?: boolean
    actionDetails?: boolean
    relatedEntityId?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    participantId?: boolean
    action?: boolean
    points?: boolean
    actionDetails?: boolean
    relatedEntityId?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    participantId?: boolean
    action?: boolean
    points?: boolean
    actionDetails?: boolean
    relatedEntityId?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    eventId?: boolean
    participantId?: boolean
    action?: boolean
    points?: boolean
    actionDetails?: boolean
    relatedEntityId?: boolean
    createdAt?: boolean
  }

  export type GameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "participantId" | "action" | "points" | "actionDetails" | "relatedEntityId" | "createdAt", ExtArgs["result"]["game"]>
  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }
  export type GameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      participant: Prisma.$RegistrationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      participantId: string
      action: string
      points: number
      actionDetails: string | null
      relatedEntityId: string | null
      createdAt: Date
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games and returns the data updated in the database.
     * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    participant<T extends RegistrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegistrationDefaultArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'String'>
    readonly eventId: FieldRef<"Game", 'String'>
    readonly participantId: FieldRef<"Game", 'String'>
    readonly action: FieldRef<"Game", 'String'>
    readonly points: FieldRef<"Game", 'Int'>
    readonly actionDetails: FieldRef<"Game", 'String'>
    readonly relatedEntityId: FieldRef<"Game", 'String'>
    readonly createdAt: FieldRef<"Game", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game updateManyAndReturn
   */
  export type GameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to delete.
     */
    limit?: number
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model UserEventScore
   */

  export type AggregateUserEventScore = {
    _count: UserEventScoreCountAggregateOutputType | null
    _avg: UserEventScoreAvgAggregateOutputType | null
    _sum: UserEventScoreSumAggregateOutputType | null
    _min: UserEventScoreMinAggregateOutputType | null
    _max: UserEventScoreMaxAggregateOutputType | null
  }

  export type UserEventScoreAvgAggregateOutputType = {
    totalPoints: number | null
  }

  export type UserEventScoreSumAggregateOutputType = {
    totalPoints: number | null
  }

  export type UserEventScoreMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    participantId: string | null
    totalPoints: number | null
    lastUpdated: Date | null
    createdAt: Date | null
  }

  export type UserEventScoreMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    participantId: string | null
    totalPoints: number | null
    lastUpdated: Date | null
    createdAt: Date | null
  }

  export type UserEventScoreCountAggregateOutputType = {
    id: number
    eventId: number
    participantId: number
    totalPoints: number
    lastUpdated: number
    createdAt: number
    _all: number
  }


  export type UserEventScoreAvgAggregateInputType = {
    totalPoints?: true
  }

  export type UserEventScoreSumAggregateInputType = {
    totalPoints?: true
  }

  export type UserEventScoreMinAggregateInputType = {
    id?: true
    eventId?: true
    participantId?: true
    totalPoints?: true
    lastUpdated?: true
    createdAt?: true
  }

  export type UserEventScoreMaxAggregateInputType = {
    id?: true
    eventId?: true
    participantId?: true
    totalPoints?: true
    lastUpdated?: true
    createdAt?: true
  }

  export type UserEventScoreCountAggregateInputType = {
    id?: true
    eventId?: true
    participantId?: true
    totalPoints?: true
    lastUpdated?: true
    createdAt?: true
    _all?: true
  }

  export type UserEventScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserEventScore to aggregate.
     */
    where?: UserEventScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserEventScores to fetch.
     */
    orderBy?: UserEventScoreOrderByWithRelationInput | UserEventScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserEventScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserEventScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserEventScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserEventScores
    **/
    _count?: true | UserEventScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserEventScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserEventScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserEventScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserEventScoreMaxAggregateInputType
  }

  export type GetUserEventScoreAggregateType<T extends UserEventScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateUserEventScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserEventScore[P]>
      : GetScalarType<T[P], AggregateUserEventScore[P]>
  }




  export type UserEventScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserEventScoreWhereInput
    orderBy?: UserEventScoreOrderByWithAggregationInput | UserEventScoreOrderByWithAggregationInput[]
    by: UserEventScoreScalarFieldEnum[] | UserEventScoreScalarFieldEnum
    having?: UserEventScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserEventScoreCountAggregateInputType | true
    _avg?: UserEventScoreAvgAggregateInputType
    _sum?: UserEventScoreSumAggregateInputType
    _min?: UserEventScoreMinAggregateInputType
    _max?: UserEventScoreMaxAggregateInputType
  }

  export type UserEventScoreGroupByOutputType = {
    id: string
    eventId: string
    participantId: string
    totalPoints: number
    lastUpdated: Date
    createdAt: Date
    _count: UserEventScoreCountAggregateOutputType | null
    _avg: UserEventScoreAvgAggregateOutputType | null
    _sum: UserEventScoreSumAggregateOutputType | null
    _min: UserEventScoreMinAggregateOutputType | null
    _max: UserEventScoreMaxAggregateOutputType | null
  }

  type GetUserEventScoreGroupByPayload<T extends UserEventScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserEventScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserEventScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserEventScoreGroupByOutputType[P]>
            : GetScalarType<T[P], UserEventScoreGroupByOutputType[P]>
        }
      >
    >


  export type UserEventScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    participantId?: boolean
    totalPoints?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userEventScore"]>

  export type UserEventScoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    participantId?: boolean
    totalPoints?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userEventScore"]>

  export type UserEventScoreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    participantId?: boolean
    totalPoints?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userEventScore"]>

  export type UserEventScoreSelectScalar = {
    id?: boolean
    eventId?: boolean
    participantId?: boolean
    totalPoints?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
  }

  export type UserEventScoreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "participantId" | "totalPoints" | "lastUpdated" | "createdAt", ExtArgs["result"]["userEventScore"]>
  export type UserEventScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }
  export type UserEventScoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }
  export type UserEventScoreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    participant?: boolean | RegistrationDefaultArgs<ExtArgs>
  }

  export type $UserEventScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserEventScore"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      participant: Prisma.$RegistrationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      participantId: string
      totalPoints: number
      lastUpdated: Date
      createdAt: Date
    }, ExtArgs["result"]["userEventScore"]>
    composites: {}
  }

  type UserEventScoreGetPayload<S extends boolean | null | undefined | UserEventScoreDefaultArgs> = $Result.GetResult<Prisma.$UserEventScorePayload, S>

  type UserEventScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserEventScoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserEventScoreCountAggregateInputType | true
    }

  export interface UserEventScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserEventScore'], meta: { name: 'UserEventScore' } }
    /**
     * Find zero or one UserEventScore that matches the filter.
     * @param {UserEventScoreFindUniqueArgs} args - Arguments to find a UserEventScore
     * @example
     * // Get one UserEventScore
     * const userEventScore = await prisma.userEventScore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserEventScoreFindUniqueArgs>(args: SelectSubset<T, UserEventScoreFindUniqueArgs<ExtArgs>>): Prisma__UserEventScoreClient<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserEventScore that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserEventScoreFindUniqueOrThrowArgs} args - Arguments to find a UserEventScore
     * @example
     * // Get one UserEventScore
     * const userEventScore = await prisma.userEventScore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserEventScoreFindUniqueOrThrowArgs>(args: SelectSubset<T, UserEventScoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserEventScoreClient<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserEventScore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEventScoreFindFirstArgs} args - Arguments to find a UserEventScore
     * @example
     * // Get one UserEventScore
     * const userEventScore = await prisma.userEventScore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserEventScoreFindFirstArgs>(args?: SelectSubset<T, UserEventScoreFindFirstArgs<ExtArgs>>): Prisma__UserEventScoreClient<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserEventScore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEventScoreFindFirstOrThrowArgs} args - Arguments to find a UserEventScore
     * @example
     * // Get one UserEventScore
     * const userEventScore = await prisma.userEventScore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserEventScoreFindFirstOrThrowArgs>(args?: SelectSubset<T, UserEventScoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserEventScoreClient<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserEventScores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEventScoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserEventScores
     * const userEventScores = await prisma.userEventScore.findMany()
     * 
     * // Get first 10 UserEventScores
     * const userEventScores = await prisma.userEventScore.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userEventScoreWithIdOnly = await prisma.userEventScore.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserEventScoreFindManyArgs>(args?: SelectSubset<T, UserEventScoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserEventScore.
     * @param {UserEventScoreCreateArgs} args - Arguments to create a UserEventScore.
     * @example
     * // Create one UserEventScore
     * const UserEventScore = await prisma.userEventScore.create({
     *   data: {
     *     // ... data to create a UserEventScore
     *   }
     * })
     * 
     */
    create<T extends UserEventScoreCreateArgs>(args: SelectSubset<T, UserEventScoreCreateArgs<ExtArgs>>): Prisma__UserEventScoreClient<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserEventScores.
     * @param {UserEventScoreCreateManyArgs} args - Arguments to create many UserEventScores.
     * @example
     * // Create many UserEventScores
     * const userEventScore = await prisma.userEventScore.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserEventScoreCreateManyArgs>(args?: SelectSubset<T, UserEventScoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserEventScores and returns the data saved in the database.
     * @param {UserEventScoreCreateManyAndReturnArgs} args - Arguments to create many UserEventScores.
     * @example
     * // Create many UserEventScores
     * const userEventScore = await prisma.userEventScore.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserEventScores and only return the `id`
     * const userEventScoreWithIdOnly = await prisma.userEventScore.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserEventScoreCreateManyAndReturnArgs>(args?: SelectSubset<T, UserEventScoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserEventScore.
     * @param {UserEventScoreDeleteArgs} args - Arguments to delete one UserEventScore.
     * @example
     * // Delete one UserEventScore
     * const UserEventScore = await prisma.userEventScore.delete({
     *   where: {
     *     // ... filter to delete one UserEventScore
     *   }
     * })
     * 
     */
    delete<T extends UserEventScoreDeleteArgs>(args: SelectSubset<T, UserEventScoreDeleteArgs<ExtArgs>>): Prisma__UserEventScoreClient<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserEventScore.
     * @param {UserEventScoreUpdateArgs} args - Arguments to update one UserEventScore.
     * @example
     * // Update one UserEventScore
     * const userEventScore = await prisma.userEventScore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserEventScoreUpdateArgs>(args: SelectSubset<T, UserEventScoreUpdateArgs<ExtArgs>>): Prisma__UserEventScoreClient<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserEventScores.
     * @param {UserEventScoreDeleteManyArgs} args - Arguments to filter UserEventScores to delete.
     * @example
     * // Delete a few UserEventScores
     * const { count } = await prisma.userEventScore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserEventScoreDeleteManyArgs>(args?: SelectSubset<T, UserEventScoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserEventScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEventScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserEventScores
     * const userEventScore = await prisma.userEventScore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserEventScoreUpdateManyArgs>(args: SelectSubset<T, UserEventScoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserEventScores and returns the data updated in the database.
     * @param {UserEventScoreUpdateManyAndReturnArgs} args - Arguments to update many UserEventScores.
     * @example
     * // Update many UserEventScores
     * const userEventScore = await prisma.userEventScore.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserEventScores and only return the `id`
     * const userEventScoreWithIdOnly = await prisma.userEventScore.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserEventScoreUpdateManyAndReturnArgs>(args: SelectSubset<T, UserEventScoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserEventScore.
     * @param {UserEventScoreUpsertArgs} args - Arguments to update or create a UserEventScore.
     * @example
     * // Update or create a UserEventScore
     * const userEventScore = await prisma.userEventScore.upsert({
     *   create: {
     *     // ... data to create a UserEventScore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserEventScore we want to update
     *   }
     * })
     */
    upsert<T extends UserEventScoreUpsertArgs>(args: SelectSubset<T, UserEventScoreUpsertArgs<ExtArgs>>): Prisma__UserEventScoreClient<$Result.GetResult<Prisma.$UserEventScorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserEventScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEventScoreCountArgs} args - Arguments to filter UserEventScores to count.
     * @example
     * // Count the number of UserEventScores
     * const count = await prisma.userEventScore.count({
     *   where: {
     *     // ... the filter for the UserEventScores we want to count
     *   }
     * })
    **/
    count<T extends UserEventScoreCountArgs>(
      args?: Subset<T, UserEventScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserEventScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserEventScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEventScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserEventScoreAggregateArgs>(args: Subset<T, UserEventScoreAggregateArgs>): Prisma.PrismaPromise<GetUserEventScoreAggregateType<T>>

    /**
     * Group by UserEventScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserEventScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserEventScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserEventScoreGroupByArgs['orderBy'] }
        : { orderBy?: UserEventScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserEventScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserEventScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserEventScore model
   */
  readonly fields: UserEventScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserEventScore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserEventScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    participant<T extends RegistrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegistrationDefaultArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserEventScore model
   */
  interface UserEventScoreFieldRefs {
    readonly id: FieldRef<"UserEventScore", 'String'>
    readonly eventId: FieldRef<"UserEventScore", 'String'>
    readonly participantId: FieldRef<"UserEventScore", 'String'>
    readonly totalPoints: FieldRef<"UserEventScore", 'Int'>
    readonly lastUpdated: FieldRef<"UserEventScore", 'DateTime'>
    readonly createdAt: FieldRef<"UserEventScore", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserEventScore findUnique
   */
  export type UserEventScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserEventScore to fetch.
     */
    where: UserEventScoreWhereUniqueInput
  }

  /**
   * UserEventScore findUniqueOrThrow
   */
  export type UserEventScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserEventScore to fetch.
     */
    where: UserEventScoreWhereUniqueInput
  }

  /**
   * UserEventScore findFirst
   */
  export type UserEventScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserEventScore to fetch.
     */
    where?: UserEventScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserEventScores to fetch.
     */
    orderBy?: UserEventScoreOrderByWithRelationInput | UserEventScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserEventScores.
     */
    cursor?: UserEventScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserEventScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserEventScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserEventScores.
     */
    distinct?: UserEventScoreScalarFieldEnum | UserEventScoreScalarFieldEnum[]
  }

  /**
   * UserEventScore findFirstOrThrow
   */
  export type UserEventScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserEventScore to fetch.
     */
    where?: UserEventScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserEventScores to fetch.
     */
    orderBy?: UserEventScoreOrderByWithRelationInput | UserEventScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserEventScores.
     */
    cursor?: UserEventScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserEventScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserEventScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserEventScores.
     */
    distinct?: UserEventScoreScalarFieldEnum | UserEventScoreScalarFieldEnum[]
  }

  /**
   * UserEventScore findMany
   */
  export type UserEventScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserEventScores to fetch.
     */
    where?: UserEventScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserEventScores to fetch.
     */
    orderBy?: UserEventScoreOrderByWithRelationInput | UserEventScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserEventScores.
     */
    cursor?: UserEventScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserEventScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserEventScores.
     */
    skip?: number
    distinct?: UserEventScoreScalarFieldEnum | UserEventScoreScalarFieldEnum[]
  }

  /**
   * UserEventScore create
   */
  export type UserEventScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a UserEventScore.
     */
    data: XOR<UserEventScoreCreateInput, UserEventScoreUncheckedCreateInput>
  }

  /**
   * UserEventScore createMany
   */
  export type UserEventScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserEventScores.
     */
    data: UserEventScoreCreateManyInput | UserEventScoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserEventScore createManyAndReturn
   */
  export type UserEventScoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * The data used to create many UserEventScores.
     */
    data: UserEventScoreCreateManyInput | UserEventScoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserEventScore update
   */
  export type UserEventScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a UserEventScore.
     */
    data: XOR<UserEventScoreUpdateInput, UserEventScoreUncheckedUpdateInput>
    /**
     * Choose, which UserEventScore to update.
     */
    where: UserEventScoreWhereUniqueInput
  }

  /**
   * UserEventScore updateMany
   */
  export type UserEventScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserEventScores.
     */
    data: XOR<UserEventScoreUpdateManyMutationInput, UserEventScoreUncheckedUpdateManyInput>
    /**
     * Filter which UserEventScores to update
     */
    where?: UserEventScoreWhereInput
    /**
     * Limit how many UserEventScores to update.
     */
    limit?: number
  }

  /**
   * UserEventScore updateManyAndReturn
   */
  export type UserEventScoreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * The data used to update UserEventScores.
     */
    data: XOR<UserEventScoreUpdateManyMutationInput, UserEventScoreUncheckedUpdateManyInput>
    /**
     * Filter which UserEventScores to update
     */
    where?: UserEventScoreWhereInput
    /**
     * Limit how many UserEventScores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserEventScore upsert
   */
  export type UserEventScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the UserEventScore to update in case it exists.
     */
    where: UserEventScoreWhereUniqueInput
    /**
     * In case the UserEventScore found by the `where` argument doesn't exist, create a new UserEventScore with this data.
     */
    create: XOR<UserEventScoreCreateInput, UserEventScoreUncheckedCreateInput>
    /**
     * In case the UserEventScore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserEventScoreUpdateInput, UserEventScoreUncheckedUpdateInput>
  }

  /**
   * UserEventScore delete
   */
  export type UserEventScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
    /**
     * Filter which UserEventScore to delete.
     */
    where: UserEventScoreWhereUniqueInput
  }

  /**
   * UserEventScore deleteMany
   */
  export type UserEventScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserEventScores to delete
     */
    where?: UserEventScoreWhereInput
    /**
     * Limit how many UserEventScores to delete.
     */
    limit?: number
  }

  /**
   * UserEventScore without action
   */
  export type UserEventScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserEventScore
     */
    select?: UserEventScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserEventScore
     */
    omit?: UserEventScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserEventScoreInclude<ExtArgs> | null
  }


  /**
   * Model UserMatchProfile
   */

  export type AggregateUserMatchProfile = {
    _count: UserMatchProfileCountAggregateOutputType | null
    _min: UserMatchProfileMinAggregateOutputType | null
    _max: UserMatchProfileMaxAggregateOutputType | null
  }

  export type UserMatchProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    headline: string | null
    bio: string | null
    jobTitle: string | null
    company: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMatchProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    eventId: string | null
    headline: string | null
    bio: string | null
    jobTitle: string | null
    company: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMatchProfileCountAggregateOutputType = {
    id: number
    userId: number
    eventId: number
    headline: number
    bio: number
    jobTitle: number
    company: number
    interests: number
    goals: number
    availability: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMatchProfileMinAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    headline?: true
    bio?: true
    jobTitle?: true
    company?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMatchProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    headline?: true
    bio?: true
    jobTitle?: true
    company?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMatchProfileCountAggregateInputType = {
    id?: true
    userId?: true
    eventId?: true
    headline?: true
    bio?: true
    jobTitle?: true
    company?: true
    interests?: true
    goals?: true
    availability?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserMatchProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMatchProfile to aggregate.
     */
    where?: UserMatchProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatchProfiles to fetch.
     */
    orderBy?: UserMatchProfileOrderByWithRelationInput | UserMatchProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserMatchProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatchProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatchProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserMatchProfiles
    **/
    _count?: true | UserMatchProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMatchProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMatchProfileMaxAggregateInputType
  }

  export type GetUserMatchProfileAggregateType<T extends UserMatchProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserMatchProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserMatchProfile[P]>
      : GetScalarType<T[P], AggregateUserMatchProfile[P]>
  }




  export type UserMatchProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMatchProfileWhereInput
    orderBy?: UserMatchProfileOrderByWithAggregationInput | UserMatchProfileOrderByWithAggregationInput[]
    by: UserMatchProfileScalarFieldEnum[] | UserMatchProfileScalarFieldEnum
    having?: UserMatchProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserMatchProfileCountAggregateInputType | true
    _min?: UserMatchProfileMinAggregateInputType
    _max?: UserMatchProfileMaxAggregateInputType
  }

  export type UserMatchProfileGroupByOutputType = {
    id: string
    userId: string
    eventId: string
    headline: string | null
    bio: string | null
    jobTitle: string | null
    company: string | null
    interests: string[]
    goals: string[]
    availability: string[]
    createdAt: Date
    updatedAt: Date
    _count: UserMatchProfileCountAggregateOutputType | null
    _min: UserMatchProfileMinAggregateOutputType | null
    _max: UserMatchProfileMaxAggregateOutputType | null
  }

  type GetUserMatchProfileGroupByPayload<T extends UserMatchProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserMatchProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserMatchProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserMatchProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserMatchProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserMatchProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    headline?: boolean
    bio?: boolean
    jobTitle?: boolean
    company?: boolean
    interests?: boolean
    goals?: boolean
    availability?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMatchProfile"]>

  export type UserMatchProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    headline?: boolean
    bio?: boolean
    jobTitle?: boolean
    company?: boolean
    interests?: boolean
    goals?: boolean
    availability?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMatchProfile"]>

  export type UserMatchProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventId?: boolean
    headline?: boolean
    bio?: boolean
    jobTitle?: boolean
    company?: boolean
    interests?: boolean
    goals?: boolean
    availability?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMatchProfile"]>

  export type UserMatchProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    eventId?: boolean
    headline?: boolean
    bio?: boolean
    jobTitle?: boolean
    company?: boolean
    interests?: boolean
    goals?: boolean
    availability?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserMatchProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "eventId" | "headline" | "bio" | "jobTitle" | "company" | "interests" | "goals" | "availability" | "createdAt" | "updatedAt", ExtArgs["result"]["userMatchProfile"]>
  export type UserMatchProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserMatchProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserMatchProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserMatchProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserMatchProfile"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      eventId: string
      headline: string | null
      bio: string | null
      jobTitle: string | null
      company: string | null
      interests: string[]
      goals: string[]
      availability: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userMatchProfile"]>
    composites: {}
  }

  type UserMatchProfileGetPayload<S extends boolean | null | undefined | UserMatchProfileDefaultArgs> = $Result.GetResult<Prisma.$UserMatchProfilePayload, S>

  type UserMatchProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserMatchProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserMatchProfileCountAggregateInputType | true
    }

  export interface UserMatchProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserMatchProfile'], meta: { name: 'UserMatchProfile' } }
    /**
     * Find zero or one UserMatchProfile that matches the filter.
     * @param {UserMatchProfileFindUniqueArgs} args - Arguments to find a UserMatchProfile
     * @example
     * // Get one UserMatchProfile
     * const userMatchProfile = await prisma.userMatchProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserMatchProfileFindUniqueArgs>(args: SelectSubset<T, UserMatchProfileFindUniqueArgs<ExtArgs>>): Prisma__UserMatchProfileClient<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserMatchProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserMatchProfileFindUniqueOrThrowArgs} args - Arguments to find a UserMatchProfile
     * @example
     * // Get one UserMatchProfile
     * const userMatchProfile = await prisma.userMatchProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserMatchProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserMatchProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserMatchProfileClient<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserMatchProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchProfileFindFirstArgs} args - Arguments to find a UserMatchProfile
     * @example
     * // Get one UserMatchProfile
     * const userMatchProfile = await prisma.userMatchProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserMatchProfileFindFirstArgs>(args?: SelectSubset<T, UserMatchProfileFindFirstArgs<ExtArgs>>): Prisma__UserMatchProfileClient<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserMatchProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchProfileFindFirstOrThrowArgs} args - Arguments to find a UserMatchProfile
     * @example
     * // Get one UserMatchProfile
     * const userMatchProfile = await prisma.userMatchProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserMatchProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserMatchProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserMatchProfileClient<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserMatchProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserMatchProfiles
     * const userMatchProfiles = await prisma.userMatchProfile.findMany()
     * 
     * // Get first 10 UserMatchProfiles
     * const userMatchProfiles = await prisma.userMatchProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userMatchProfileWithIdOnly = await prisma.userMatchProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserMatchProfileFindManyArgs>(args?: SelectSubset<T, UserMatchProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserMatchProfile.
     * @param {UserMatchProfileCreateArgs} args - Arguments to create a UserMatchProfile.
     * @example
     * // Create one UserMatchProfile
     * const UserMatchProfile = await prisma.userMatchProfile.create({
     *   data: {
     *     // ... data to create a UserMatchProfile
     *   }
     * })
     * 
     */
    create<T extends UserMatchProfileCreateArgs>(args: SelectSubset<T, UserMatchProfileCreateArgs<ExtArgs>>): Prisma__UserMatchProfileClient<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserMatchProfiles.
     * @param {UserMatchProfileCreateManyArgs} args - Arguments to create many UserMatchProfiles.
     * @example
     * // Create many UserMatchProfiles
     * const userMatchProfile = await prisma.userMatchProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserMatchProfileCreateManyArgs>(args?: SelectSubset<T, UserMatchProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserMatchProfiles and returns the data saved in the database.
     * @param {UserMatchProfileCreateManyAndReturnArgs} args - Arguments to create many UserMatchProfiles.
     * @example
     * // Create many UserMatchProfiles
     * const userMatchProfile = await prisma.userMatchProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserMatchProfiles and only return the `id`
     * const userMatchProfileWithIdOnly = await prisma.userMatchProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserMatchProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserMatchProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserMatchProfile.
     * @param {UserMatchProfileDeleteArgs} args - Arguments to delete one UserMatchProfile.
     * @example
     * // Delete one UserMatchProfile
     * const UserMatchProfile = await prisma.userMatchProfile.delete({
     *   where: {
     *     // ... filter to delete one UserMatchProfile
     *   }
     * })
     * 
     */
    delete<T extends UserMatchProfileDeleteArgs>(args: SelectSubset<T, UserMatchProfileDeleteArgs<ExtArgs>>): Prisma__UserMatchProfileClient<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserMatchProfile.
     * @param {UserMatchProfileUpdateArgs} args - Arguments to update one UserMatchProfile.
     * @example
     * // Update one UserMatchProfile
     * const userMatchProfile = await prisma.userMatchProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserMatchProfileUpdateArgs>(args: SelectSubset<T, UserMatchProfileUpdateArgs<ExtArgs>>): Prisma__UserMatchProfileClient<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserMatchProfiles.
     * @param {UserMatchProfileDeleteManyArgs} args - Arguments to filter UserMatchProfiles to delete.
     * @example
     * // Delete a few UserMatchProfiles
     * const { count } = await prisma.userMatchProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserMatchProfileDeleteManyArgs>(args?: SelectSubset<T, UserMatchProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMatchProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserMatchProfiles
     * const userMatchProfile = await prisma.userMatchProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserMatchProfileUpdateManyArgs>(args: SelectSubset<T, UserMatchProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMatchProfiles and returns the data updated in the database.
     * @param {UserMatchProfileUpdateManyAndReturnArgs} args - Arguments to update many UserMatchProfiles.
     * @example
     * // Update many UserMatchProfiles
     * const userMatchProfile = await prisma.userMatchProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserMatchProfiles and only return the `id`
     * const userMatchProfileWithIdOnly = await prisma.userMatchProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserMatchProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, UserMatchProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserMatchProfile.
     * @param {UserMatchProfileUpsertArgs} args - Arguments to update or create a UserMatchProfile.
     * @example
     * // Update or create a UserMatchProfile
     * const userMatchProfile = await prisma.userMatchProfile.upsert({
     *   create: {
     *     // ... data to create a UserMatchProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserMatchProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserMatchProfileUpsertArgs>(args: SelectSubset<T, UserMatchProfileUpsertArgs<ExtArgs>>): Prisma__UserMatchProfileClient<$Result.GetResult<Prisma.$UserMatchProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserMatchProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchProfileCountArgs} args - Arguments to filter UserMatchProfiles to count.
     * @example
     * // Count the number of UserMatchProfiles
     * const count = await prisma.userMatchProfile.count({
     *   where: {
     *     // ... the filter for the UserMatchProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserMatchProfileCountArgs>(
      args?: Subset<T, UserMatchProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserMatchProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserMatchProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserMatchProfileAggregateArgs>(args: Subset<T, UserMatchProfileAggregateArgs>): Prisma.PrismaPromise<GetUserMatchProfileAggregateType<T>>

    /**
     * Group by UserMatchProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMatchProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserMatchProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserMatchProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserMatchProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserMatchProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserMatchProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserMatchProfile model
   */
  readonly fields: UserMatchProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserMatchProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserMatchProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserMatchProfile model
   */
  interface UserMatchProfileFieldRefs {
    readonly id: FieldRef<"UserMatchProfile", 'String'>
    readonly userId: FieldRef<"UserMatchProfile", 'String'>
    readonly eventId: FieldRef<"UserMatchProfile", 'String'>
    readonly headline: FieldRef<"UserMatchProfile", 'String'>
    readonly bio: FieldRef<"UserMatchProfile", 'String'>
    readonly jobTitle: FieldRef<"UserMatchProfile", 'String'>
    readonly company: FieldRef<"UserMatchProfile", 'String'>
    readonly interests: FieldRef<"UserMatchProfile", 'String[]'>
    readonly goals: FieldRef<"UserMatchProfile", 'String[]'>
    readonly availability: FieldRef<"UserMatchProfile", 'String[]'>
    readonly createdAt: FieldRef<"UserMatchProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserMatchProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserMatchProfile findUnique
   */
  export type UserMatchProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserMatchProfile to fetch.
     */
    where: UserMatchProfileWhereUniqueInput
  }

  /**
   * UserMatchProfile findUniqueOrThrow
   */
  export type UserMatchProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserMatchProfile to fetch.
     */
    where: UserMatchProfileWhereUniqueInput
  }

  /**
   * UserMatchProfile findFirst
   */
  export type UserMatchProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserMatchProfile to fetch.
     */
    where?: UserMatchProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatchProfiles to fetch.
     */
    orderBy?: UserMatchProfileOrderByWithRelationInput | UserMatchProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMatchProfiles.
     */
    cursor?: UserMatchProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatchProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatchProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMatchProfiles.
     */
    distinct?: UserMatchProfileScalarFieldEnum | UserMatchProfileScalarFieldEnum[]
  }

  /**
   * UserMatchProfile findFirstOrThrow
   */
  export type UserMatchProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserMatchProfile to fetch.
     */
    where?: UserMatchProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatchProfiles to fetch.
     */
    orderBy?: UserMatchProfileOrderByWithRelationInput | UserMatchProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMatchProfiles.
     */
    cursor?: UserMatchProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatchProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatchProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMatchProfiles.
     */
    distinct?: UserMatchProfileScalarFieldEnum | UserMatchProfileScalarFieldEnum[]
  }

  /**
   * UserMatchProfile findMany
   */
  export type UserMatchProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserMatchProfiles to fetch.
     */
    where?: UserMatchProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMatchProfiles to fetch.
     */
    orderBy?: UserMatchProfileOrderByWithRelationInput | UserMatchProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserMatchProfiles.
     */
    cursor?: UserMatchProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMatchProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMatchProfiles.
     */
    skip?: number
    distinct?: UserMatchProfileScalarFieldEnum | UserMatchProfileScalarFieldEnum[]
  }

  /**
   * UserMatchProfile create
   */
  export type UserMatchProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserMatchProfile.
     */
    data: XOR<UserMatchProfileCreateInput, UserMatchProfileUncheckedCreateInput>
  }

  /**
   * UserMatchProfile createMany
   */
  export type UserMatchProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserMatchProfiles.
     */
    data: UserMatchProfileCreateManyInput | UserMatchProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserMatchProfile createManyAndReturn
   */
  export type UserMatchProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * The data used to create many UserMatchProfiles.
     */
    data: UserMatchProfileCreateManyInput | UserMatchProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserMatchProfile update
   */
  export type UserMatchProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserMatchProfile.
     */
    data: XOR<UserMatchProfileUpdateInput, UserMatchProfileUncheckedUpdateInput>
    /**
     * Choose, which UserMatchProfile to update.
     */
    where: UserMatchProfileWhereUniqueInput
  }

  /**
   * UserMatchProfile updateMany
   */
  export type UserMatchProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserMatchProfiles.
     */
    data: XOR<UserMatchProfileUpdateManyMutationInput, UserMatchProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserMatchProfiles to update
     */
    where?: UserMatchProfileWhereInput
    /**
     * Limit how many UserMatchProfiles to update.
     */
    limit?: number
  }

  /**
   * UserMatchProfile updateManyAndReturn
   */
  export type UserMatchProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * The data used to update UserMatchProfiles.
     */
    data: XOR<UserMatchProfileUpdateManyMutationInput, UserMatchProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserMatchProfiles to update
     */
    where?: UserMatchProfileWhereInput
    /**
     * Limit how many UserMatchProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserMatchProfile upsert
   */
  export type UserMatchProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserMatchProfile to update in case it exists.
     */
    where: UserMatchProfileWhereUniqueInput
    /**
     * In case the UserMatchProfile found by the `where` argument doesn't exist, create a new UserMatchProfile with this data.
     */
    create: XOR<UserMatchProfileCreateInput, UserMatchProfileUncheckedCreateInput>
    /**
     * In case the UserMatchProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserMatchProfileUpdateInput, UserMatchProfileUncheckedUpdateInput>
  }

  /**
   * UserMatchProfile delete
   */
  export type UserMatchProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
    /**
     * Filter which UserMatchProfile to delete.
     */
    where: UserMatchProfileWhereUniqueInput
  }

  /**
   * UserMatchProfile deleteMany
   */
  export type UserMatchProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMatchProfiles to delete
     */
    where?: UserMatchProfileWhereInput
    /**
     * Limit how many UserMatchProfiles to delete.
     */
    limit?: number
  }

  /**
   * UserMatchProfile without action
   */
  export type UserMatchProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMatchProfile
     */
    select?: UserMatchProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserMatchProfile
     */
    omit?: UserMatchProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMatchProfileInclude<ExtArgs> | null
  }


  /**
   * Model MatchSuggestion
   */

  export type AggregateMatchSuggestion = {
    _count: MatchSuggestionCountAggregateOutputType | null
    _avg: MatchSuggestionAvgAggregateOutputType | null
    _sum: MatchSuggestionSumAggregateOutputType | null
    _min: MatchSuggestionMinAggregateOutputType | null
    _max: MatchSuggestionMaxAggregateOutputType | null
  }

  export type MatchSuggestionAvgAggregateOutputType = {
    score: number | null
  }

  export type MatchSuggestionSumAggregateOutputType = {
    score: number | null
  }

  export type MatchSuggestionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    suggestedId: string | null
    eventId: string | null
    score: number | null
    reason: string | null
    createdAt: Date | null
  }

  export type MatchSuggestionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    suggestedId: string | null
    eventId: string | null
    score: number | null
    reason: string | null
    createdAt: Date | null
  }

  export type MatchSuggestionCountAggregateOutputType = {
    id: number
    userId: number
    suggestedId: number
    eventId: number
    score: number
    reason: number
    createdAt: number
    _all: number
  }


  export type MatchSuggestionAvgAggregateInputType = {
    score?: true
  }

  export type MatchSuggestionSumAggregateInputType = {
    score?: true
  }

  export type MatchSuggestionMinAggregateInputType = {
    id?: true
    userId?: true
    suggestedId?: true
    eventId?: true
    score?: true
    reason?: true
    createdAt?: true
  }

  export type MatchSuggestionMaxAggregateInputType = {
    id?: true
    userId?: true
    suggestedId?: true
    eventId?: true
    score?: true
    reason?: true
    createdAt?: true
  }

  export type MatchSuggestionCountAggregateInputType = {
    id?: true
    userId?: true
    suggestedId?: true
    eventId?: true
    score?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type MatchSuggestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchSuggestion to aggregate.
     */
    where?: MatchSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchSuggestions to fetch.
     */
    orderBy?: MatchSuggestionOrderByWithRelationInput | MatchSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchSuggestions
    **/
    _count?: true | MatchSuggestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchSuggestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSuggestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchSuggestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchSuggestionMaxAggregateInputType
  }

  export type GetMatchSuggestionAggregateType<T extends MatchSuggestionAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchSuggestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchSuggestion[P]>
      : GetScalarType<T[P], AggregateMatchSuggestion[P]>
  }




  export type MatchSuggestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchSuggestionWhereInput
    orderBy?: MatchSuggestionOrderByWithAggregationInput | MatchSuggestionOrderByWithAggregationInput[]
    by: MatchSuggestionScalarFieldEnum[] | MatchSuggestionScalarFieldEnum
    having?: MatchSuggestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchSuggestionCountAggregateInputType | true
    _avg?: MatchSuggestionAvgAggregateInputType
    _sum?: MatchSuggestionSumAggregateInputType
    _min?: MatchSuggestionMinAggregateInputType
    _max?: MatchSuggestionMaxAggregateInputType
  }

  export type MatchSuggestionGroupByOutputType = {
    id: string
    userId: string
    suggestedId: string
    eventId: string
    score: number
    reason: string | null
    createdAt: Date
    _count: MatchSuggestionCountAggregateOutputType | null
    _avg: MatchSuggestionAvgAggregateOutputType | null
    _sum: MatchSuggestionSumAggregateOutputType | null
    _min: MatchSuggestionMinAggregateOutputType | null
    _max: MatchSuggestionMaxAggregateOutputType | null
  }

  type GetMatchSuggestionGroupByPayload<T extends MatchSuggestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchSuggestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchSuggestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchSuggestionGroupByOutputType[P]>
            : GetScalarType<T[P], MatchSuggestionGroupByOutputType[P]>
        }
      >
    >


  export type MatchSuggestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    suggestedId?: boolean
    eventId?: boolean
    score?: boolean
    reason?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    suggested?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchSuggestion"]>

  export type MatchSuggestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    suggestedId?: boolean
    eventId?: boolean
    score?: boolean
    reason?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    suggested?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchSuggestion"]>

  export type MatchSuggestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    suggestedId?: boolean
    eventId?: boolean
    score?: boolean
    reason?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    suggested?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchSuggestion"]>

  export type MatchSuggestionSelectScalar = {
    id?: boolean
    userId?: boolean
    suggestedId?: boolean
    eventId?: boolean
    score?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type MatchSuggestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "suggestedId" | "eventId" | "score" | "reason" | "createdAt", ExtArgs["result"]["matchSuggestion"]>
  export type MatchSuggestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    suggested?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MatchSuggestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    suggested?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MatchSuggestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    suggested?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MatchSuggestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchSuggestion"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      suggested: Prisma.$UserPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      suggestedId: string
      eventId: string
      score: number
      reason: string | null
      createdAt: Date
    }, ExtArgs["result"]["matchSuggestion"]>
    composites: {}
  }

  type MatchSuggestionGetPayload<S extends boolean | null | undefined | MatchSuggestionDefaultArgs> = $Result.GetResult<Prisma.$MatchSuggestionPayload, S>

  type MatchSuggestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchSuggestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchSuggestionCountAggregateInputType | true
    }

  export interface MatchSuggestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchSuggestion'], meta: { name: 'MatchSuggestion' } }
    /**
     * Find zero or one MatchSuggestion that matches the filter.
     * @param {MatchSuggestionFindUniqueArgs} args - Arguments to find a MatchSuggestion
     * @example
     * // Get one MatchSuggestion
     * const matchSuggestion = await prisma.matchSuggestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchSuggestionFindUniqueArgs>(args: SelectSubset<T, MatchSuggestionFindUniqueArgs<ExtArgs>>): Prisma__MatchSuggestionClient<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MatchSuggestion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchSuggestionFindUniqueOrThrowArgs} args - Arguments to find a MatchSuggestion
     * @example
     * // Get one MatchSuggestion
     * const matchSuggestion = await prisma.matchSuggestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchSuggestionFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchSuggestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchSuggestionClient<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchSuggestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchSuggestionFindFirstArgs} args - Arguments to find a MatchSuggestion
     * @example
     * // Get one MatchSuggestion
     * const matchSuggestion = await prisma.matchSuggestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchSuggestionFindFirstArgs>(args?: SelectSubset<T, MatchSuggestionFindFirstArgs<ExtArgs>>): Prisma__MatchSuggestionClient<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchSuggestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchSuggestionFindFirstOrThrowArgs} args - Arguments to find a MatchSuggestion
     * @example
     * // Get one MatchSuggestion
     * const matchSuggestion = await prisma.matchSuggestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchSuggestionFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchSuggestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchSuggestionClient<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MatchSuggestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchSuggestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchSuggestions
     * const matchSuggestions = await prisma.matchSuggestion.findMany()
     * 
     * // Get first 10 MatchSuggestions
     * const matchSuggestions = await prisma.matchSuggestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchSuggestionWithIdOnly = await prisma.matchSuggestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchSuggestionFindManyArgs>(args?: SelectSubset<T, MatchSuggestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MatchSuggestion.
     * @param {MatchSuggestionCreateArgs} args - Arguments to create a MatchSuggestion.
     * @example
     * // Create one MatchSuggestion
     * const MatchSuggestion = await prisma.matchSuggestion.create({
     *   data: {
     *     // ... data to create a MatchSuggestion
     *   }
     * })
     * 
     */
    create<T extends MatchSuggestionCreateArgs>(args: SelectSubset<T, MatchSuggestionCreateArgs<ExtArgs>>): Prisma__MatchSuggestionClient<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MatchSuggestions.
     * @param {MatchSuggestionCreateManyArgs} args - Arguments to create many MatchSuggestions.
     * @example
     * // Create many MatchSuggestions
     * const matchSuggestion = await prisma.matchSuggestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchSuggestionCreateManyArgs>(args?: SelectSubset<T, MatchSuggestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchSuggestions and returns the data saved in the database.
     * @param {MatchSuggestionCreateManyAndReturnArgs} args - Arguments to create many MatchSuggestions.
     * @example
     * // Create many MatchSuggestions
     * const matchSuggestion = await prisma.matchSuggestion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchSuggestions and only return the `id`
     * const matchSuggestionWithIdOnly = await prisma.matchSuggestion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchSuggestionCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchSuggestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MatchSuggestion.
     * @param {MatchSuggestionDeleteArgs} args - Arguments to delete one MatchSuggestion.
     * @example
     * // Delete one MatchSuggestion
     * const MatchSuggestion = await prisma.matchSuggestion.delete({
     *   where: {
     *     // ... filter to delete one MatchSuggestion
     *   }
     * })
     * 
     */
    delete<T extends MatchSuggestionDeleteArgs>(args: SelectSubset<T, MatchSuggestionDeleteArgs<ExtArgs>>): Prisma__MatchSuggestionClient<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MatchSuggestion.
     * @param {MatchSuggestionUpdateArgs} args - Arguments to update one MatchSuggestion.
     * @example
     * // Update one MatchSuggestion
     * const matchSuggestion = await prisma.matchSuggestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchSuggestionUpdateArgs>(args: SelectSubset<T, MatchSuggestionUpdateArgs<ExtArgs>>): Prisma__MatchSuggestionClient<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MatchSuggestions.
     * @param {MatchSuggestionDeleteManyArgs} args - Arguments to filter MatchSuggestions to delete.
     * @example
     * // Delete a few MatchSuggestions
     * const { count } = await prisma.matchSuggestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchSuggestionDeleteManyArgs>(args?: SelectSubset<T, MatchSuggestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchSuggestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchSuggestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchSuggestions
     * const matchSuggestion = await prisma.matchSuggestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchSuggestionUpdateManyArgs>(args: SelectSubset<T, MatchSuggestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchSuggestions and returns the data updated in the database.
     * @param {MatchSuggestionUpdateManyAndReturnArgs} args - Arguments to update many MatchSuggestions.
     * @example
     * // Update many MatchSuggestions
     * const matchSuggestion = await prisma.matchSuggestion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MatchSuggestions and only return the `id`
     * const matchSuggestionWithIdOnly = await prisma.matchSuggestion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchSuggestionUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchSuggestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MatchSuggestion.
     * @param {MatchSuggestionUpsertArgs} args - Arguments to update or create a MatchSuggestion.
     * @example
     * // Update or create a MatchSuggestion
     * const matchSuggestion = await prisma.matchSuggestion.upsert({
     *   create: {
     *     // ... data to create a MatchSuggestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchSuggestion we want to update
     *   }
     * })
     */
    upsert<T extends MatchSuggestionUpsertArgs>(args: SelectSubset<T, MatchSuggestionUpsertArgs<ExtArgs>>): Prisma__MatchSuggestionClient<$Result.GetResult<Prisma.$MatchSuggestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MatchSuggestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchSuggestionCountArgs} args - Arguments to filter MatchSuggestions to count.
     * @example
     * // Count the number of MatchSuggestions
     * const count = await prisma.matchSuggestion.count({
     *   where: {
     *     // ... the filter for the MatchSuggestions we want to count
     *   }
     * })
    **/
    count<T extends MatchSuggestionCountArgs>(
      args?: Subset<T, MatchSuggestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchSuggestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchSuggestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchSuggestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchSuggestionAggregateArgs>(args: Subset<T, MatchSuggestionAggregateArgs>): Prisma.PrismaPromise<GetMatchSuggestionAggregateType<T>>

    /**
     * Group by MatchSuggestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchSuggestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchSuggestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchSuggestionGroupByArgs['orderBy'] }
        : { orderBy?: MatchSuggestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchSuggestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchSuggestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchSuggestion model
   */
  readonly fields: MatchSuggestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchSuggestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchSuggestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    suggested<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchSuggestion model
   */
  interface MatchSuggestionFieldRefs {
    readonly id: FieldRef<"MatchSuggestion", 'String'>
    readonly userId: FieldRef<"MatchSuggestion", 'String'>
    readonly suggestedId: FieldRef<"MatchSuggestion", 'String'>
    readonly eventId: FieldRef<"MatchSuggestion", 'String'>
    readonly score: FieldRef<"MatchSuggestion", 'Float'>
    readonly reason: FieldRef<"MatchSuggestion", 'String'>
    readonly createdAt: FieldRef<"MatchSuggestion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MatchSuggestion findUnique
   */
  export type MatchSuggestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which MatchSuggestion to fetch.
     */
    where: MatchSuggestionWhereUniqueInput
  }

  /**
   * MatchSuggestion findUniqueOrThrow
   */
  export type MatchSuggestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which MatchSuggestion to fetch.
     */
    where: MatchSuggestionWhereUniqueInput
  }

  /**
   * MatchSuggestion findFirst
   */
  export type MatchSuggestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which MatchSuggestion to fetch.
     */
    where?: MatchSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchSuggestions to fetch.
     */
    orderBy?: MatchSuggestionOrderByWithRelationInput | MatchSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchSuggestions.
     */
    cursor?: MatchSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchSuggestions.
     */
    distinct?: MatchSuggestionScalarFieldEnum | MatchSuggestionScalarFieldEnum[]
  }

  /**
   * MatchSuggestion findFirstOrThrow
   */
  export type MatchSuggestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which MatchSuggestion to fetch.
     */
    where?: MatchSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchSuggestions to fetch.
     */
    orderBy?: MatchSuggestionOrderByWithRelationInput | MatchSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchSuggestions.
     */
    cursor?: MatchSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchSuggestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchSuggestions.
     */
    distinct?: MatchSuggestionScalarFieldEnum | MatchSuggestionScalarFieldEnum[]
  }

  /**
   * MatchSuggestion findMany
   */
  export type MatchSuggestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    /**
     * Filter, which MatchSuggestions to fetch.
     */
    where?: MatchSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchSuggestions to fetch.
     */
    orderBy?: MatchSuggestionOrderByWithRelationInput | MatchSuggestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchSuggestions.
     */
    cursor?: MatchSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchSuggestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchSuggestions.
     */
    skip?: number
    distinct?: MatchSuggestionScalarFieldEnum | MatchSuggestionScalarFieldEnum[]
  }

  /**
   * MatchSuggestion create
   */
  export type MatchSuggestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    /**
     * The data needed to create a MatchSuggestion.
     */
    data: XOR<MatchSuggestionCreateInput, MatchSuggestionUncheckedCreateInput>
  }

  /**
   * MatchSuggestion createMany
   */
  export type MatchSuggestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchSuggestions.
     */
    data: MatchSuggestionCreateManyInput | MatchSuggestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchSuggestion createManyAndReturn
   */
  export type MatchSuggestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * The data used to create many MatchSuggestions.
     */
    data: MatchSuggestionCreateManyInput | MatchSuggestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchSuggestion update
   */
  export type MatchSuggestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    /**
     * The data needed to update a MatchSuggestion.
     */
    data: XOR<MatchSuggestionUpdateInput, MatchSuggestionUncheckedUpdateInput>
    /**
     * Choose, which MatchSuggestion to update.
     */
    where: MatchSuggestionWhereUniqueInput
  }

  /**
   * MatchSuggestion updateMany
   */
  export type MatchSuggestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchSuggestions.
     */
    data: XOR<MatchSuggestionUpdateManyMutationInput, MatchSuggestionUncheckedUpdateManyInput>
    /**
     * Filter which MatchSuggestions to update
     */
    where?: MatchSuggestionWhereInput
    /**
     * Limit how many MatchSuggestions to update.
     */
    limit?: number
  }

  /**
   * MatchSuggestion updateManyAndReturn
   */
  export type MatchSuggestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * The data used to update MatchSuggestions.
     */
    data: XOR<MatchSuggestionUpdateManyMutationInput, MatchSuggestionUncheckedUpdateManyInput>
    /**
     * Filter which MatchSuggestions to update
     */
    where?: MatchSuggestionWhereInput
    /**
     * Limit how many MatchSuggestions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchSuggestion upsert
   */
  export type MatchSuggestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    /**
     * The filter to search for the MatchSuggestion to update in case it exists.
     */
    where: MatchSuggestionWhereUniqueInput
    /**
     * In case the MatchSuggestion found by the `where` argument doesn't exist, create a new MatchSuggestion with this data.
     */
    create: XOR<MatchSuggestionCreateInput, MatchSuggestionUncheckedCreateInput>
    /**
     * In case the MatchSuggestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchSuggestionUpdateInput, MatchSuggestionUncheckedUpdateInput>
  }

  /**
   * MatchSuggestion delete
   */
  export type MatchSuggestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
    /**
     * Filter which MatchSuggestion to delete.
     */
    where: MatchSuggestionWhereUniqueInput
  }

  /**
   * MatchSuggestion deleteMany
   */
  export type MatchSuggestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchSuggestions to delete
     */
    where?: MatchSuggestionWhereInput
    /**
     * Limit how many MatchSuggestions to delete.
     */
    limit?: number
  }

  /**
   * MatchSuggestion without action
   */
  export type MatchSuggestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchSuggestion
     */
    select?: MatchSuggestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchSuggestion
     */
    omit?: MatchSuggestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchSuggestionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    permissions: 'permissions',
    role: 'role',
    lastLogin: 'lastLogin',
    phone: 'phone',
    plan: 'plan'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    location: 'location',
    slug: 'slug',
    banner: 'banner',
    startDate: 'startDate',
    endDate: 'endDate',
    startTime: 'startTime',
    endTime: 'endTime',
    sector: 'sector',
    type: 'type',
    format: 'format',
    timezone: 'timezone',
    videoUrl: 'videoUrl',
    supportEmail: 'supportEmail',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    logo: 'logo',
    archived: 'archived',
    archivedAt: 'archivedAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const RegistrationScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    type: 'type',
    eventId: 'eventId',
    ticketId: 'ticketId',
    qrCode: 'qrCode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    checkedIn: 'checkedIn',
    checkInTime: 'checkInTime',
    shortCode: 'shortCode',
    company: 'company',
    jobTitle: 'jobTitle'
  };

  export type RegistrationScalarFieldEnum = (typeof RegistrationScalarFieldEnum)[keyof typeof RegistrationScalarFieldEnum]


  export const TicketScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    price: 'price',
    currency: 'currency',
    quantity: 'quantity',
    sold: 'sold',
    status: 'status',
    visibility: 'visibility',
    validFrom: 'validFrom',
    validUntil: 'validUntil',
    group: 'group',
    eventId: 'eventId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TicketScalarFieldEnum = (typeof TicketScalarFieldEnum)[keyof typeof TicketScalarFieldEnum]


  export const Event_sessionsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    start_date: 'start_date',
    end_date: 'end_date',
    start_time: 'start_time',
    end_time: 'end_time',
    location: 'location',
    speaker: 'speaker',
    capacity: 'capacity',
    event_id: 'event_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    banner: 'banner',
    format: 'format',
    video_url: 'video_url'
  };

  export type Event_sessionsScalarFieldEnum = (typeof Event_sessionsScalarFieldEnum)[keyof typeof Event_sessionsScalarFieldEnum]


  export const SponsorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    logo: 'logo',
    website: 'website',
    level: 'level',
    visible: 'visible',
    eventId: 'eventId',
    location: 'location',
    address: 'address',
    phone: 'phone',
    mobile: 'mobile',
    email: 'email',
    linkedinUrl: 'linkedinUrl',
    twitterUrl: 'twitterUrl',
    facebookUrl: 'facebookUrl',
    documents: 'documents',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SponsorScalarFieldEnum = (typeof SponsorScalarFieldEnum)[keyof typeof SponsorScalarFieldEnum]


  export const SessionParticipantScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    participantId: 'participantId',
    registeredAt: 'registeredAt',
    attendedSession: 'attendedSession',
    attendanceTime: 'attendanceTime'
  };

  export type SessionParticipantScalarFieldEnum = (typeof SessionParticipantScalarFieldEnum)[keyof typeof SessionParticipantScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    requesterId: 'requesterId',
    recipientId: 'recipientId',
    status: 'status',
    message: 'message',
    proposedTime: 'proposedTime',
    confirmedTime: 'confirmedTime',
    location: 'location',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const OtpCodeScalarFieldEnum: {
    id: 'id',
    email: 'email',
    code: 'code',
    event_id: 'event_id',
    expires_at: 'expires_at',
    used: 'used',
    created_at: 'created_at'
  };

  export type OtpCodeScalarFieldEnum = (typeof OtpCodeScalarFieldEnum)[keyof typeof OtpCodeScalarFieldEnum]


  export const BadgeScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    name: 'name',
    canvasData: 'canvasData',
    isDefault: 'isDefault',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BadgeScalarFieldEnum = (typeof BadgeScalarFieldEnum)[keyof typeof BadgeScalarFieldEnum]


  export const BadgeTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    canvasData: 'canvasData',
    isGlobal: 'isGlobal',
    eventId: 'eventId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BadgeTemplateScalarFieldEnum = (typeof BadgeTemplateScalarFieldEnum)[keyof typeof BadgeTemplateScalarFieldEnum]


  export const ParticipantBadgeScalarFieldEnum: {
    id: 'id',
    registrationId: 'registrationId',
    eventId: 'eventId',
    templateId: 'templateId',
    status: 'status',
    generatedAt: 'generatedAt',
    printedAt: 'printedAt',
    deliveredAt: 'deliveredAt',
    customData: 'customData',
    qrCodeData: 'qrCodeData',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ParticipantBadgeScalarFieldEnum = (typeof ParticipantBadgeScalarFieldEnum)[keyof typeof ParticipantBadgeScalarFieldEnum]


  export const EmailCampaignScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    name: 'name',
    description: 'description',
    type: 'type',
    recipientType: 'recipientType',
    subject: 'subject',
    htmlContent: 'htmlContent',
    textContent: 'textContent',
    status: 'status',
    scheduledAt: 'scheduledAt',
    sentAt: 'sentAt',
    totalRecipients: 'totalRecipients',
    successCount: 'successCount',
    failureCount: 'failureCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailCampaignScalarFieldEnum = (typeof EmailCampaignScalarFieldEnum)[keyof typeof EmailCampaignScalarFieldEnum]


  export const EmailTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    subject: 'subject',
    htmlContent: 'htmlContent',
    textContent: 'textContent',
    type: 'type',
    category: 'category',
    isGlobal: 'isGlobal',
    eventId: 'eventId',
    isActive: 'isActive',
    isDefault: 'isDefault',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailTemplateScalarFieldEnum = (typeof EmailTemplateScalarFieldEnum)[keyof typeof EmailTemplateScalarFieldEnum]


  export const EmailLogScalarFieldEnum: {
    id: 'id',
    campaignId: 'campaignId',
    recipientEmail: 'recipientEmail',
    recipientName: 'recipientName',
    status: 'status',
    errorMessage: 'errorMessage',
    sentAt: 'sentAt',
    deliveredAt: 'deliveredAt',
    openedAt: 'openedAt',
    clickedAt: 'clickedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailLogScalarFieldEnum = (typeof EmailLogScalarFieldEnum)[keyof typeof EmailLogScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    participantId: 'participantId',
    action: 'action',
    points: 'points',
    actionDetails: 'actionDetails',
    relatedEntityId: 'relatedEntityId',
    createdAt: 'createdAt'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const UserEventScoreScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    participantId: 'participantId',
    totalPoints: 'totalPoints',
    lastUpdated: 'lastUpdated',
    createdAt: 'createdAt'
  };

  export type UserEventScoreScalarFieldEnum = (typeof UserEventScoreScalarFieldEnum)[keyof typeof UserEventScoreScalarFieldEnum]


  export const UserMatchProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    eventId: 'eventId',
    headline: 'headline',
    bio: 'bio',
    jobTitle: 'jobTitle',
    company: 'company',
    interests: 'interests',
    goals: 'goals',
    availability: 'availability',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserMatchProfileScalarFieldEnum = (typeof UserMatchProfileScalarFieldEnum)[keyof typeof UserMatchProfileScalarFieldEnum]


  export const MatchSuggestionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    suggestedId: 'suggestedId',
    eventId: 'eventId',
    score: 'score',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type MatchSuggestionScalarFieldEnum = (typeof MatchSuggestionScalarFieldEnum)[keyof typeof MatchSuggestionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    permissions?: StringNullableListFilter<"User">
    role?: StringFilter<"User"> | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    phone?: StringNullableFilter<"User"> | string | null
    plan?: StringFilter<"User"> | string
    accounts?: AccountListRelationFilter
    events?: EventListRelationFilter
    suggestedFor?: MatchSuggestionListRelationFilter
    suggestions?: MatchSuggestionListRelationFilter
    sessions?: SessionListRelationFilter
    matchProfiles?: UserMatchProfileListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    permissions?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    plan?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    suggestedFor?: MatchSuggestionOrderByRelationAggregateInput
    suggestions?: MatchSuggestionOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    matchProfiles?: UserMatchProfileOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    permissions?: StringNullableListFilter<"User">
    role?: StringFilter<"User"> | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    phone?: StringNullableFilter<"User"> | string | null
    plan?: StringFilter<"User"> | string
    accounts?: AccountListRelationFilter
    events?: EventListRelationFilter
    suggestedFor?: MatchSuggestionListRelationFilter
    suggestions?: MatchSuggestionListRelationFilter
    sessions?: SessionListRelationFilter
    matchProfiles?: UserMatchProfileListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    permissions?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    plan?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    permissions?: StringNullableListFilter<"User">
    role?: StringWithAggregatesFilter<"User"> | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    plan?: StringWithAggregatesFilter<"User"> | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    location?: StringFilter<"Event"> | string
    slug?: StringFilter<"Event"> | string
    banner?: StringNullableFilter<"Event"> | string | null
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    startTime?: StringNullableFilter<"Event"> | string | null
    endTime?: StringNullableFilter<"Event"> | string | null
    sector?: StringNullableFilter<"Event"> | string | null
    type?: StringNullableFilter<"Event"> | string | null
    format?: StringNullableFilter<"Event"> | string | null
    timezone?: StringNullableFilter<"Event"> | string | null
    videoUrl?: StringNullableFilter<"Event"> | string | null
    supportEmail?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    userId?: StringFilter<"Event"> | string
    logo?: StringNullableFilter<"Event"> | string | null
    archived?: BoolFilter<"Event"> | boolean
    archivedAt?: DateTimeNullableFilter<"Event"> | Date | string | null
    appointments?: AppointmentListRelationFilter
    badgeTemplates?: BadgeTemplateListRelationFilter
    badges?: BadgeListRelationFilter
    emailCampaigns?: EmailCampaignListRelationFilter
    emailTemplates?: EmailTemplateListRelationFilter
    event_sessions?: Event_sessionsListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    games?: GameListRelationFilter
    matchSuggestions?: MatchSuggestionListRelationFilter
    participantBadges?: ParticipantBadgeListRelationFilter
    registrations?: RegistrationListRelationFilter
    sponsors?: SponsorListRelationFilter
    tickets?: TicketListRelationFilter
    userEventScores?: UserEventScoreListRelationFilter
    matchProfiles?: UserMatchProfileListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrder
    slug?: SortOrder
    banner?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    sector?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    videoUrl?: SortOrderInput | SortOrder
    supportEmail?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    logo?: SortOrderInput | SortOrder
    archived?: SortOrder
    archivedAt?: SortOrderInput | SortOrder
    appointments?: AppointmentOrderByRelationAggregateInput
    badgeTemplates?: BadgeTemplateOrderByRelationAggregateInput
    badges?: BadgeOrderByRelationAggregateInput
    emailCampaigns?: EmailCampaignOrderByRelationAggregateInput
    emailTemplates?: EmailTemplateOrderByRelationAggregateInput
    event_sessions?: event_sessionsOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    games?: GameOrderByRelationAggregateInput
    matchSuggestions?: MatchSuggestionOrderByRelationAggregateInput
    participantBadges?: ParticipantBadgeOrderByRelationAggregateInput
    registrations?: RegistrationOrderByRelationAggregateInput
    sponsors?: SponsorOrderByRelationAggregateInput
    tickets?: TicketOrderByRelationAggregateInput
    userEventScores?: UserEventScoreOrderByRelationAggregateInput
    matchProfiles?: UserMatchProfileOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    location?: StringFilter<"Event"> | string
    banner?: StringNullableFilter<"Event"> | string | null
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    startTime?: StringNullableFilter<"Event"> | string | null
    endTime?: StringNullableFilter<"Event"> | string | null
    sector?: StringNullableFilter<"Event"> | string | null
    type?: StringNullableFilter<"Event"> | string | null
    format?: StringNullableFilter<"Event"> | string | null
    timezone?: StringNullableFilter<"Event"> | string | null
    videoUrl?: StringNullableFilter<"Event"> | string | null
    supportEmail?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    userId?: StringFilter<"Event"> | string
    logo?: StringNullableFilter<"Event"> | string | null
    archived?: BoolFilter<"Event"> | boolean
    archivedAt?: DateTimeNullableFilter<"Event"> | Date | string | null
    appointments?: AppointmentListRelationFilter
    badgeTemplates?: BadgeTemplateListRelationFilter
    badges?: BadgeListRelationFilter
    emailCampaigns?: EmailCampaignListRelationFilter
    emailTemplates?: EmailTemplateListRelationFilter
    event_sessions?: Event_sessionsListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    games?: GameListRelationFilter
    matchSuggestions?: MatchSuggestionListRelationFilter
    participantBadges?: ParticipantBadgeListRelationFilter
    registrations?: RegistrationListRelationFilter
    sponsors?: SponsorListRelationFilter
    tickets?: TicketListRelationFilter
    userEventScores?: UserEventScoreListRelationFilter
    matchProfiles?: UserMatchProfileListRelationFilter
  }, "id" | "slug">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrder
    slug?: SortOrder
    banner?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    sector?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    videoUrl?: SortOrderInput | SortOrder
    supportEmail?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    logo?: SortOrderInput | SortOrder
    archived?: SortOrder
    archivedAt?: SortOrderInput | SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    name?: StringWithAggregatesFilter<"Event"> | string
    description?: StringNullableWithAggregatesFilter<"Event"> | string | null
    location?: StringWithAggregatesFilter<"Event"> | string
    slug?: StringWithAggregatesFilter<"Event"> | string
    banner?: StringNullableWithAggregatesFilter<"Event"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    startTime?: StringNullableWithAggregatesFilter<"Event"> | string | null
    endTime?: StringNullableWithAggregatesFilter<"Event"> | string | null
    sector?: StringNullableWithAggregatesFilter<"Event"> | string | null
    type?: StringNullableWithAggregatesFilter<"Event"> | string | null
    format?: StringNullableWithAggregatesFilter<"Event"> | string | null
    timezone?: StringNullableWithAggregatesFilter<"Event"> | string | null
    videoUrl?: StringNullableWithAggregatesFilter<"Event"> | string | null
    supportEmail?: StringNullableWithAggregatesFilter<"Event"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    userId?: StringWithAggregatesFilter<"Event"> | string
    logo?: StringNullableWithAggregatesFilter<"Event"> | string | null
    archived?: BoolWithAggregatesFilter<"Event"> | boolean
    archivedAt?: DateTimeNullableWithAggregatesFilter<"Event"> | Date | string | null
  }

  export type RegistrationWhereInput = {
    AND?: RegistrationWhereInput | RegistrationWhereInput[]
    OR?: RegistrationWhereInput[]
    NOT?: RegistrationWhereInput | RegistrationWhereInput[]
    id?: StringFilter<"Registration"> | string
    firstName?: StringFilter<"Registration"> | string
    lastName?: StringFilter<"Registration"> | string
    email?: StringFilter<"Registration"> | string
    phone?: StringFilter<"Registration"> | string
    type?: StringFilter<"Registration"> | string
    eventId?: StringFilter<"Registration"> | string
    ticketId?: StringNullableFilter<"Registration"> | string | null
    qrCode?: StringFilter<"Registration"> | string
    createdAt?: DateTimeFilter<"Registration"> | Date | string
    updatedAt?: DateTimeFilter<"Registration"> | Date | string
    checkedIn?: BoolFilter<"Registration"> | boolean
    checkInTime?: DateTimeNullableFilter<"Registration"> | Date | string | null
    shortCode?: StringNullableFilter<"Registration"> | string | null
    company?: StringNullableFilter<"Registration"> | string | null
    jobTitle?: StringNullableFilter<"Registration"> | string | null
    receivedAppointments?: AppointmentListRelationFilter
    sentAppointments?: AppointmentListRelationFilter
    games?: GameListRelationFilter
    participantBadges?: ParticipantBadgeListRelationFilter
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    ticket?: XOR<TicketNullableScalarRelationFilter, TicketWhereInput> | null
    sessions?: SessionParticipantListRelationFilter
    userEventScores?: UserEventScoreListRelationFilter
  }

  export type RegistrationOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    type?: SortOrder
    eventId?: SortOrder
    ticketId?: SortOrderInput | SortOrder
    qrCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    checkedIn?: SortOrder
    checkInTime?: SortOrderInput | SortOrder
    shortCode?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    jobTitle?: SortOrderInput | SortOrder
    receivedAppointments?: AppointmentOrderByRelationAggregateInput
    sentAppointments?: AppointmentOrderByRelationAggregateInput
    games?: GameOrderByRelationAggregateInput
    participantBadges?: ParticipantBadgeOrderByRelationAggregateInput
    event?: EventOrderByWithRelationInput
    ticket?: TicketOrderByWithRelationInput
    sessions?: SessionParticipantOrderByRelationAggregateInput
    userEventScores?: UserEventScoreOrderByRelationAggregateInput
  }

  export type RegistrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    qrCode?: string
    shortCode?: string
    AND?: RegistrationWhereInput | RegistrationWhereInput[]
    OR?: RegistrationWhereInput[]
    NOT?: RegistrationWhereInput | RegistrationWhereInput[]
    firstName?: StringFilter<"Registration"> | string
    lastName?: StringFilter<"Registration"> | string
    email?: StringFilter<"Registration"> | string
    phone?: StringFilter<"Registration"> | string
    type?: StringFilter<"Registration"> | string
    eventId?: StringFilter<"Registration"> | string
    ticketId?: StringNullableFilter<"Registration"> | string | null
    createdAt?: DateTimeFilter<"Registration"> | Date | string
    updatedAt?: DateTimeFilter<"Registration"> | Date | string
    checkedIn?: BoolFilter<"Registration"> | boolean
    checkInTime?: DateTimeNullableFilter<"Registration"> | Date | string | null
    company?: StringNullableFilter<"Registration"> | string | null
    jobTitle?: StringNullableFilter<"Registration"> | string | null
    receivedAppointments?: AppointmentListRelationFilter
    sentAppointments?: AppointmentListRelationFilter
    games?: GameListRelationFilter
    participantBadges?: ParticipantBadgeListRelationFilter
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    ticket?: XOR<TicketNullableScalarRelationFilter, TicketWhereInput> | null
    sessions?: SessionParticipantListRelationFilter
    userEventScores?: UserEventScoreListRelationFilter
  }, "id" | "qrCode" | "shortCode">

  export type RegistrationOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    type?: SortOrder
    eventId?: SortOrder
    ticketId?: SortOrderInput | SortOrder
    qrCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    checkedIn?: SortOrder
    checkInTime?: SortOrderInput | SortOrder
    shortCode?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    jobTitle?: SortOrderInput | SortOrder
    _count?: RegistrationCountOrderByAggregateInput
    _max?: RegistrationMaxOrderByAggregateInput
    _min?: RegistrationMinOrderByAggregateInput
  }

  export type RegistrationScalarWhereWithAggregatesInput = {
    AND?: RegistrationScalarWhereWithAggregatesInput | RegistrationScalarWhereWithAggregatesInput[]
    OR?: RegistrationScalarWhereWithAggregatesInput[]
    NOT?: RegistrationScalarWhereWithAggregatesInput | RegistrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Registration"> | string
    firstName?: StringWithAggregatesFilter<"Registration"> | string
    lastName?: StringWithAggregatesFilter<"Registration"> | string
    email?: StringWithAggregatesFilter<"Registration"> | string
    phone?: StringWithAggregatesFilter<"Registration"> | string
    type?: StringWithAggregatesFilter<"Registration"> | string
    eventId?: StringWithAggregatesFilter<"Registration"> | string
    ticketId?: StringNullableWithAggregatesFilter<"Registration"> | string | null
    qrCode?: StringWithAggregatesFilter<"Registration"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Registration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Registration"> | Date | string
    checkedIn?: BoolWithAggregatesFilter<"Registration"> | boolean
    checkInTime?: DateTimeNullableWithAggregatesFilter<"Registration"> | Date | string | null
    shortCode?: StringNullableWithAggregatesFilter<"Registration"> | string | null
    company?: StringNullableWithAggregatesFilter<"Registration"> | string | null
    jobTitle?: StringNullableWithAggregatesFilter<"Registration"> | string | null
  }

  export type TicketWhereInput = {
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    id?: StringFilter<"Ticket"> | string
    name?: StringFilter<"Ticket"> | string
    description?: StringNullableFilter<"Ticket"> | string | null
    price?: DecimalFilter<"Ticket"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Ticket"> | string
    quantity?: IntNullableFilter<"Ticket"> | number | null
    sold?: IntFilter<"Ticket"> | number
    status?: StringFilter<"Ticket"> | string
    visibility?: StringFilter<"Ticket"> | string
    validFrom?: DateTimeFilter<"Ticket"> | Date | string
    validUntil?: DateTimeFilter<"Ticket"> | Date | string
    group?: StringFilter<"Ticket"> | string
    eventId?: StringFilter<"Ticket"> | string
    createdAt?: DateTimeFilter<"Ticket"> | Date | string
    updatedAt?: DateTimeFilter<"Ticket"> | Date | string
    registrations?: RegistrationListRelationFilter
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }

  export type TicketOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    currency?: SortOrder
    quantity?: SortOrderInput | SortOrder
    sold?: SortOrder
    status?: SortOrder
    visibility?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    group?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrations?: RegistrationOrderByRelationAggregateInput
    event?: EventOrderByWithRelationInput
  }

  export type TicketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    name?: StringFilter<"Ticket"> | string
    description?: StringNullableFilter<"Ticket"> | string | null
    price?: DecimalFilter<"Ticket"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Ticket"> | string
    quantity?: IntNullableFilter<"Ticket"> | number | null
    sold?: IntFilter<"Ticket"> | number
    status?: StringFilter<"Ticket"> | string
    visibility?: StringFilter<"Ticket"> | string
    validFrom?: DateTimeFilter<"Ticket"> | Date | string
    validUntil?: DateTimeFilter<"Ticket"> | Date | string
    group?: StringFilter<"Ticket"> | string
    eventId?: StringFilter<"Ticket"> | string
    createdAt?: DateTimeFilter<"Ticket"> | Date | string
    updatedAt?: DateTimeFilter<"Ticket"> | Date | string
    registrations?: RegistrationListRelationFilter
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }, "id">

  export type TicketOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    currency?: SortOrder
    quantity?: SortOrderInput | SortOrder
    sold?: SortOrder
    status?: SortOrder
    visibility?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    group?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TicketCountOrderByAggregateInput
    _avg?: TicketAvgOrderByAggregateInput
    _max?: TicketMaxOrderByAggregateInput
    _min?: TicketMinOrderByAggregateInput
    _sum?: TicketSumOrderByAggregateInput
  }

  export type TicketScalarWhereWithAggregatesInput = {
    AND?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    OR?: TicketScalarWhereWithAggregatesInput[]
    NOT?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ticket"> | string
    name?: StringWithAggregatesFilter<"Ticket"> | string
    description?: StringNullableWithAggregatesFilter<"Ticket"> | string | null
    price?: DecimalWithAggregatesFilter<"Ticket"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"Ticket"> | string
    quantity?: IntNullableWithAggregatesFilter<"Ticket"> | number | null
    sold?: IntWithAggregatesFilter<"Ticket"> | number
    status?: StringWithAggregatesFilter<"Ticket"> | string
    visibility?: StringWithAggregatesFilter<"Ticket"> | string
    validFrom?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
    validUntil?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
    group?: StringWithAggregatesFilter<"Ticket"> | string
    eventId?: StringWithAggregatesFilter<"Ticket"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
  }

  export type event_sessionsWhereInput = {
    AND?: event_sessionsWhereInput | event_sessionsWhereInput[]
    OR?: event_sessionsWhereInput[]
    NOT?: event_sessionsWhereInput | event_sessionsWhereInput[]
    id?: StringFilter<"event_sessions"> | string
    title?: StringFilter<"event_sessions"> | string
    description?: StringNullableFilter<"event_sessions"> | string | null
    start_date?: DateTimeFilter<"event_sessions"> | Date | string
    end_date?: DateTimeFilter<"event_sessions"> | Date | string
    start_time?: StringFilter<"event_sessions"> | string
    end_time?: StringFilter<"event_sessions"> | string
    location?: StringNullableFilter<"event_sessions"> | string | null
    speaker?: StringNullableFilter<"event_sessions"> | string | null
    capacity?: IntNullableFilter<"event_sessions"> | number | null
    event_id?: StringFilter<"event_sessions"> | string
    created_at?: DateTimeFilter<"event_sessions"> | Date | string
    updated_at?: DateTimeFilter<"event_sessions"> | Date | string
    banner?: StringNullableFilter<"event_sessions"> | string | null
    format?: StringNullableFilter<"event_sessions"> | string | null
    video_url?: StringNullableFilter<"event_sessions"> | string | null
    events?: XOR<EventScalarRelationFilter, EventWhereInput>
    participants?: SessionParticipantListRelationFilter
  }

  export type event_sessionsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    location?: SortOrderInput | SortOrder
    speaker?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    event_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    banner?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    video_url?: SortOrderInput | SortOrder
    events?: EventOrderByWithRelationInput
    participants?: SessionParticipantOrderByRelationAggregateInput
  }

  export type event_sessionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: event_sessionsWhereInput | event_sessionsWhereInput[]
    OR?: event_sessionsWhereInput[]
    NOT?: event_sessionsWhereInput | event_sessionsWhereInput[]
    title?: StringFilter<"event_sessions"> | string
    description?: StringNullableFilter<"event_sessions"> | string | null
    start_date?: DateTimeFilter<"event_sessions"> | Date | string
    end_date?: DateTimeFilter<"event_sessions"> | Date | string
    start_time?: StringFilter<"event_sessions"> | string
    end_time?: StringFilter<"event_sessions"> | string
    location?: StringNullableFilter<"event_sessions"> | string | null
    speaker?: StringNullableFilter<"event_sessions"> | string | null
    capacity?: IntNullableFilter<"event_sessions"> | number | null
    event_id?: StringFilter<"event_sessions"> | string
    created_at?: DateTimeFilter<"event_sessions"> | Date | string
    updated_at?: DateTimeFilter<"event_sessions"> | Date | string
    banner?: StringNullableFilter<"event_sessions"> | string | null
    format?: StringNullableFilter<"event_sessions"> | string | null
    video_url?: StringNullableFilter<"event_sessions"> | string | null
    events?: XOR<EventScalarRelationFilter, EventWhereInput>
    participants?: SessionParticipantListRelationFilter
  }, "id">

  export type event_sessionsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    location?: SortOrderInput | SortOrder
    speaker?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    event_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    banner?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    video_url?: SortOrderInput | SortOrder
    _count?: event_sessionsCountOrderByAggregateInput
    _avg?: event_sessionsAvgOrderByAggregateInput
    _max?: event_sessionsMaxOrderByAggregateInput
    _min?: event_sessionsMinOrderByAggregateInput
    _sum?: event_sessionsSumOrderByAggregateInput
  }

  export type event_sessionsScalarWhereWithAggregatesInput = {
    AND?: event_sessionsScalarWhereWithAggregatesInput | event_sessionsScalarWhereWithAggregatesInput[]
    OR?: event_sessionsScalarWhereWithAggregatesInput[]
    NOT?: event_sessionsScalarWhereWithAggregatesInput | event_sessionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"event_sessions"> | string
    title?: StringWithAggregatesFilter<"event_sessions"> | string
    description?: StringNullableWithAggregatesFilter<"event_sessions"> | string | null
    start_date?: DateTimeWithAggregatesFilter<"event_sessions"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"event_sessions"> | Date | string
    start_time?: StringWithAggregatesFilter<"event_sessions"> | string
    end_time?: StringWithAggregatesFilter<"event_sessions"> | string
    location?: StringNullableWithAggregatesFilter<"event_sessions"> | string | null
    speaker?: StringNullableWithAggregatesFilter<"event_sessions"> | string | null
    capacity?: IntNullableWithAggregatesFilter<"event_sessions"> | number | null
    event_id?: StringWithAggregatesFilter<"event_sessions"> | string
    created_at?: DateTimeWithAggregatesFilter<"event_sessions"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"event_sessions"> | Date | string
    banner?: StringNullableWithAggregatesFilter<"event_sessions"> | string | null
    format?: StringNullableWithAggregatesFilter<"event_sessions"> | string | null
    video_url?: StringNullableWithAggregatesFilter<"event_sessions"> | string | null
  }

  export type SponsorWhereInput = {
    AND?: SponsorWhereInput | SponsorWhereInput[]
    OR?: SponsorWhereInput[]
    NOT?: SponsorWhereInput | SponsorWhereInput[]
    id?: StringFilter<"Sponsor"> | string
    name?: StringFilter<"Sponsor"> | string
    description?: StringNullableFilter<"Sponsor"> | string | null
    logo?: StringNullableFilter<"Sponsor"> | string | null
    website?: StringNullableFilter<"Sponsor"> | string | null
    level?: StringFilter<"Sponsor"> | string
    visible?: BoolFilter<"Sponsor"> | boolean
    eventId?: StringFilter<"Sponsor"> | string
    location?: StringNullableFilter<"Sponsor"> | string | null
    address?: StringNullableFilter<"Sponsor"> | string | null
    phone?: StringNullableFilter<"Sponsor"> | string | null
    mobile?: StringNullableFilter<"Sponsor"> | string | null
    email?: StringNullableFilter<"Sponsor"> | string | null
    linkedinUrl?: StringNullableFilter<"Sponsor"> | string | null
    twitterUrl?: StringNullableFilter<"Sponsor"> | string | null
    facebookUrl?: StringNullableFilter<"Sponsor"> | string | null
    documents?: JsonNullableFilter<"Sponsor">
    createdAt?: DateTimeFilter<"Sponsor"> | Date | string
    updatedAt?: DateTimeFilter<"Sponsor"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }

  export type SponsorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    level?: SortOrder
    visible?: SortOrder
    eventId?: SortOrder
    location?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    linkedinUrl?: SortOrderInput | SortOrder
    twitterUrl?: SortOrderInput | SortOrder
    facebookUrl?: SortOrderInput | SortOrder
    documents?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    event?: EventOrderByWithRelationInput
  }

  export type SponsorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SponsorWhereInput | SponsorWhereInput[]
    OR?: SponsorWhereInput[]
    NOT?: SponsorWhereInput | SponsorWhereInput[]
    name?: StringFilter<"Sponsor"> | string
    description?: StringNullableFilter<"Sponsor"> | string | null
    logo?: StringNullableFilter<"Sponsor"> | string | null
    website?: StringNullableFilter<"Sponsor"> | string | null
    level?: StringFilter<"Sponsor"> | string
    visible?: BoolFilter<"Sponsor"> | boolean
    eventId?: StringFilter<"Sponsor"> | string
    location?: StringNullableFilter<"Sponsor"> | string | null
    address?: StringNullableFilter<"Sponsor"> | string | null
    phone?: StringNullableFilter<"Sponsor"> | string | null
    mobile?: StringNullableFilter<"Sponsor"> | string | null
    email?: StringNullableFilter<"Sponsor"> | string | null
    linkedinUrl?: StringNullableFilter<"Sponsor"> | string | null
    twitterUrl?: StringNullableFilter<"Sponsor"> | string | null
    facebookUrl?: StringNullableFilter<"Sponsor"> | string | null
    documents?: JsonNullableFilter<"Sponsor">
    createdAt?: DateTimeFilter<"Sponsor"> | Date | string
    updatedAt?: DateTimeFilter<"Sponsor"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }, "id">

  export type SponsorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    level?: SortOrder
    visible?: SortOrder
    eventId?: SortOrder
    location?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    linkedinUrl?: SortOrderInput | SortOrder
    twitterUrl?: SortOrderInput | SortOrder
    facebookUrl?: SortOrderInput | SortOrder
    documents?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SponsorCountOrderByAggregateInput
    _max?: SponsorMaxOrderByAggregateInput
    _min?: SponsorMinOrderByAggregateInput
  }

  export type SponsorScalarWhereWithAggregatesInput = {
    AND?: SponsorScalarWhereWithAggregatesInput | SponsorScalarWhereWithAggregatesInput[]
    OR?: SponsorScalarWhereWithAggregatesInput[]
    NOT?: SponsorScalarWhereWithAggregatesInput | SponsorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Sponsor"> | string
    name?: StringWithAggregatesFilter<"Sponsor"> | string
    description?: StringNullableWithAggregatesFilter<"Sponsor"> | string | null
    logo?: StringNullableWithAggregatesFilter<"Sponsor"> | string | null
    website?: StringNullableWithAggregatesFilter<"Sponsor"> | string | null
    level?: StringWithAggregatesFilter<"Sponsor"> | string
    visible?: BoolWithAggregatesFilter<"Sponsor"> | boolean
    eventId?: StringWithAggregatesFilter<"Sponsor"> | string
    location?: StringNullableWithAggregatesFilter<"Sponsor"> | string | null
    address?: StringNullableWithAggregatesFilter<"Sponsor"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Sponsor"> | string | null
    mobile?: StringNullableWithAggregatesFilter<"Sponsor"> | string | null
    email?: StringNullableWithAggregatesFilter<"Sponsor"> | string | null
    linkedinUrl?: StringNullableWithAggregatesFilter<"Sponsor"> | string | null
    twitterUrl?: StringNullableWithAggregatesFilter<"Sponsor"> | string | null
    facebookUrl?: StringNullableWithAggregatesFilter<"Sponsor"> | string | null
    documents?: JsonNullableWithAggregatesFilter<"Sponsor">
    createdAt?: DateTimeWithAggregatesFilter<"Sponsor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sponsor"> | Date | string
  }

  export type SessionParticipantWhereInput = {
    AND?: SessionParticipantWhereInput | SessionParticipantWhereInput[]
    OR?: SessionParticipantWhereInput[]
    NOT?: SessionParticipantWhereInput | SessionParticipantWhereInput[]
    id?: StringFilter<"SessionParticipant"> | string
    sessionId?: StringFilter<"SessionParticipant"> | string
    participantId?: StringFilter<"SessionParticipant"> | string
    registeredAt?: DateTimeFilter<"SessionParticipant"> | Date | string
    attendedSession?: BoolFilter<"SessionParticipant"> | boolean
    attendanceTime?: DateTimeNullableFilter<"SessionParticipant"> | Date | string | null
    participant?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
    session?: XOR<Event_sessionsScalarRelationFilter, event_sessionsWhereInput>
  }

  export type SessionParticipantOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    participantId?: SortOrder
    registeredAt?: SortOrder
    attendedSession?: SortOrder
    attendanceTime?: SortOrderInput | SortOrder
    participant?: RegistrationOrderByWithRelationInput
    session?: event_sessionsOrderByWithRelationInput
  }

  export type SessionParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionId_participantId?: SessionParticipantSessionIdParticipantIdCompoundUniqueInput
    AND?: SessionParticipantWhereInput | SessionParticipantWhereInput[]
    OR?: SessionParticipantWhereInput[]
    NOT?: SessionParticipantWhereInput | SessionParticipantWhereInput[]
    sessionId?: StringFilter<"SessionParticipant"> | string
    participantId?: StringFilter<"SessionParticipant"> | string
    registeredAt?: DateTimeFilter<"SessionParticipant"> | Date | string
    attendedSession?: BoolFilter<"SessionParticipant"> | boolean
    attendanceTime?: DateTimeNullableFilter<"SessionParticipant"> | Date | string | null
    participant?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
    session?: XOR<Event_sessionsScalarRelationFilter, event_sessionsWhereInput>
  }, "id" | "sessionId_participantId">

  export type SessionParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    participantId?: SortOrder
    registeredAt?: SortOrder
    attendedSession?: SortOrder
    attendanceTime?: SortOrderInput | SortOrder
    _count?: SessionParticipantCountOrderByAggregateInput
    _max?: SessionParticipantMaxOrderByAggregateInput
    _min?: SessionParticipantMinOrderByAggregateInput
  }

  export type SessionParticipantScalarWhereWithAggregatesInput = {
    AND?: SessionParticipantScalarWhereWithAggregatesInput | SessionParticipantScalarWhereWithAggregatesInput[]
    OR?: SessionParticipantScalarWhereWithAggregatesInput[]
    NOT?: SessionParticipantScalarWhereWithAggregatesInput | SessionParticipantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SessionParticipant"> | string
    sessionId?: StringWithAggregatesFilter<"SessionParticipant"> | string
    participantId?: StringWithAggregatesFilter<"SessionParticipant"> | string
    registeredAt?: DateTimeWithAggregatesFilter<"SessionParticipant"> | Date | string
    attendedSession?: BoolWithAggregatesFilter<"SessionParticipant"> | boolean
    attendanceTime?: DateTimeNullableWithAggregatesFilter<"SessionParticipant"> | Date | string | null
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: StringFilter<"Appointment"> | string
    eventId?: StringFilter<"Appointment"> | string
    requesterId?: StringFilter<"Appointment"> | string
    recipientId?: StringFilter<"Appointment"> | string
    status?: StringFilter<"Appointment"> | string
    message?: StringNullableFilter<"Appointment"> | string | null
    proposedTime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    confirmedTime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    location?: StringNullableFilter<"Appointment"> | string | null
    notes?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    recipient?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
    requester?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    requesterId?: SortOrder
    recipientId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    proposedTime?: SortOrderInput | SortOrder
    confirmedTime?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    event?: EventOrderByWithRelationInput
    recipient?: RegistrationOrderByWithRelationInput
    requester?: RegistrationOrderByWithRelationInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    eventId?: StringFilter<"Appointment"> | string
    requesterId?: StringFilter<"Appointment"> | string
    recipientId?: StringFilter<"Appointment"> | string
    status?: StringFilter<"Appointment"> | string
    message?: StringNullableFilter<"Appointment"> | string | null
    proposedTime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    confirmedTime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    location?: StringNullableFilter<"Appointment"> | string | null
    notes?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    recipient?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
    requester?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    requesterId?: SortOrder
    recipientId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    proposedTime?: SortOrderInput | SortOrder
    confirmedTime?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Appointment"> | string
    eventId?: StringWithAggregatesFilter<"Appointment"> | string
    requesterId?: StringWithAggregatesFilter<"Appointment"> | string
    recipientId?: StringWithAggregatesFilter<"Appointment"> | string
    status?: StringWithAggregatesFilter<"Appointment"> | string
    message?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    proposedTime?: DateTimeNullableWithAggregatesFilter<"Appointment"> | Date | string | null
    confirmedTime?: DateTimeNullableWithAggregatesFilter<"Appointment"> | Date | string | null
    location?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
  }

  export type OtpCodeWhereInput = {
    AND?: OtpCodeWhereInput | OtpCodeWhereInput[]
    OR?: OtpCodeWhereInput[]
    NOT?: OtpCodeWhereInput | OtpCodeWhereInput[]
    id?: StringFilter<"OtpCode"> | string
    email?: StringFilter<"OtpCode"> | string
    code?: StringFilter<"OtpCode"> | string
    event_id?: StringNullableFilter<"OtpCode"> | string | null
    expires_at?: DateTimeFilter<"OtpCode"> | Date | string
    used?: BoolFilter<"OtpCode"> | boolean
    created_at?: DateTimeFilter<"OtpCode"> | Date | string
  }

  export type OtpCodeOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    code?: SortOrder
    event_id?: SortOrderInput | SortOrder
    expires_at?: SortOrder
    used?: SortOrder
    created_at?: SortOrder
  }

  export type OtpCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OtpCodeWhereInput | OtpCodeWhereInput[]
    OR?: OtpCodeWhereInput[]
    NOT?: OtpCodeWhereInput | OtpCodeWhereInput[]
    email?: StringFilter<"OtpCode"> | string
    code?: StringFilter<"OtpCode"> | string
    event_id?: StringNullableFilter<"OtpCode"> | string | null
    expires_at?: DateTimeFilter<"OtpCode"> | Date | string
    used?: BoolFilter<"OtpCode"> | boolean
    created_at?: DateTimeFilter<"OtpCode"> | Date | string
  }, "id">

  export type OtpCodeOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    code?: SortOrder
    event_id?: SortOrderInput | SortOrder
    expires_at?: SortOrder
    used?: SortOrder
    created_at?: SortOrder
    _count?: OtpCodeCountOrderByAggregateInput
    _max?: OtpCodeMaxOrderByAggregateInput
    _min?: OtpCodeMinOrderByAggregateInput
  }

  export type OtpCodeScalarWhereWithAggregatesInput = {
    AND?: OtpCodeScalarWhereWithAggregatesInput | OtpCodeScalarWhereWithAggregatesInput[]
    OR?: OtpCodeScalarWhereWithAggregatesInput[]
    NOT?: OtpCodeScalarWhereWithAggregatesInput | OtpCodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OtpCode"> | string
    email?: StringWithAggregatesFilter<"OtpCode"> | string
    code?: StringWithAggregatesFilter<"OtpCode"> | string
    event_id?: StringNullableWithAggregatesFilter<"OtpCode"> | string | null
    expires_at?: DateTimeWithAggregatesFilter<"OtpCode"> | Date | string
    used?: BoolWithAggregatesFilter<"OtpCode"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"OtpCode"> | Date | string
  }

  export type BadgeWhereInput = {
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    id?: StringFilter<"Badge"> | string
    eventId?: StringFilter<"Badge"> | string
    name?: StringNullableFilter<"Badge"> | string | null
    canvasData?: StringNullableFilter<"Badge"> | string | null
    isDefault?: BoolFilter<"Badge"> | boolean
    createdAt?: DateTimeFilter<"Badge"> | Date | string
    updatedAt?: DateTimeFilter<"Badge"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }

  export type BadgeOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrderInput | SortOrder
    canvasData?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    event?: EventOrderByWithRelationInput
  }

  export type BadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    eventId?: StringFilter<"Badge"> | string
    name?: StringNullableFilter<"Badge"> | string | null
    canvasData?: StringNullableFilter<"Badge"> | string | null
    isDefault?: BoolFilter<"Badge"> | boolean
    createdAt?: DateTimeFilter<"Badge"> | Date | string
    updatedAt?: DateTimeFilter<"Badge"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
  }, "id">

  export type BadgeOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrderInput | SortOrder
    canvasData?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BadgeCountOrderByAggregateInput
    _max?: BadgeMaxOrderByAggregateInput
    _min?: BadgeMinOrderByAggregateInput
  }

  export type BadgeScalarWhereWithAggregatesInput = {
    AND?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    OR?: BadgeScalarWhereWithAggregatesInput[]
    NOT?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Badge"> | string
    eventId?: StringWithAggregatesFilter<"Badge"> | string
    name?: StringNullableWithAggregatesFilter<"Badge"> | string | null
    canvasData?: StringNullableWithAggregatesFilter<"Badge"> | string | null
    isDefault?: BoolWithAggregatesFilter<"Badge"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Badge"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Badge"> | Date | string
  }

  export type BadgeTemplateWhereInput = {
    AND?: BadgeTemplateWhereInput | BadgeTemplateWhereInput[]
    OR?: BadgeTemplateWhereInput[]
    NOT?: BadgeTemplateWhereInput | BadgeTemplateWhereInput[]
    id?: StringFilter<"BadgeTemplate"> | string
    name?: StringFilter<"BadgeTemplate"> | string
    description?: StringNullableFilter<"BadgeTemplate"> | string | null
    canvasData?: StringFilter<"BadgeTemplate"> | string
    isGlobal?: BoolFilter<"BadgeTemplate"> | boolean
    eventId?: StringNullableFilter<"BadgeTemplate"> | string | null
    isActive?: BoolFilter<"BadgeTemplate"> | boolean
    createdAt?: DateTimeFilter<"BadgeTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"BadgeTemplate"> | Date | string
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
    participantBadges?: ParticipantBadgeListRelationFilter
  }

  export type BadgeTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    canvasData?: SortOrder
    isGlobal?: SortOrder
    eventId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    event?: EventOrderByWithRelationInput
    participantBadges?: ParticipantBadgeOrderByRelationAggregateInput
  }

  export type BadgeTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BadgeTemplateWhereInput | BadgeTemplateWhereInput[]
    OR?: BadgeTemplateWhereInput[]
    NOT?: BadgeTemplateWhereInput | BadgeTemplateWhereInput[]
    name?: StringFilter<"BadgeTemplate"> | string
    description?: StringNullableFilter<"BadgeTemplate"> | string | null
    canvasData?: StringFilter<"BadgeTemplate"> | string
    isGlobal?: BoolFilter<"BadgeTemplate"> | boolean
    eventId?: StringNullableFilter<"BadgeTemplate"> | string | null
    isActive?: BoolFilter<"BadgeTemplate"> | boolean
    createdAt?: DateTimeFilter<"BadgeTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"BadgeTemplate"> | Date | string
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
    participantBadges?: ParticipantBadgeListRelationFilter
  }, "id">

  export type BadgeTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    canvasData?: SortOrder
    isGlobal?: SortOrder
    eventId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BadgeTemplateCountOrderByAggregateInput
    _max?: BadgeTemplateMaxOrderByAggregateInput
    _min?: BadgeTemplateMinOrderByAggregateInput
  }

  export type BadgeTemplateScalarWhereWithAggregatesInput = {
    AND?: BadgeTemplateScalarWhereWithAggregatesInput | BadgeTemplateScalarWhereWithAggregatesInput[]
    OR?: BadgeTemplateScalarWhereWithAggregatesInput[]
    NOT?: BadgeTemplateScalarWhereWithAggregatesInput | BadgeTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BadgeTemplate"> | string
    name?: StringWithAggregatesFilter<"BadgeTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"BadgeTemplate"> | string | null
    canvasData?: StringWithAggregatesFilter<"BadgeTemplate"> | string
    isGlobal?: BoolWithAggregatesFilter<"BadgeTemplate"> | boolean
    eventId?: StringNullableWithAggregatesFilter<"BadgeTemplate"> | string | null
    isActive?: BoolWithAggregatesFilter<"BadgeTemplate"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"BadgeTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BadgeTemplate"> | Date | string
  }

  export type ParticipantBadgeWhereInput = {
    AND?: ParticipantBadgeWhereInput | ParticipantBadgeWhereInput[]
    OR?: ParticipantBadgeWhereInput[]
    NOT?: ParticipantBadgeWhereInput | ParticipantBadgeWhereInput[]
    id?: StringFilter<"ParticipantBadge"> | string
    registrationId?: StringFilter<"ParticipantBadge"> | string
    eventId?: StringFilter<"ParticipantBadge"> | string
    templateId?: StringFilter<"ParticipantBadge"> | string
    status?: StringFilter<"ParticipantBadge"> | string
    generatedAt?: DateTimeFilter<"ParticipantBadge"> | Date | string
    printedAt?: DateTimeNullableFilter<"ParticipantBadge"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"ParticipantBadge"> | Date | string | null
    customData?: StringNullableFilter<"ParticipantBadge"> | string | null
    qrCodeData?: StringNullableFilter<"ParticipantBadge"> | string | null
    createdAt?: DateTimeFilter<"ParticipantBadge"> | Date | string
    updatedAt?: DateTimeFilter<"ParticipantBadge"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    registration?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
    template?: XOR<BadgeTemplateScalarRelationFilter, BadgeTemplateWhereInput>
  }

  export type ParticipantBadgeOrderByWithRelationInput = {
    id?: SortOrder
    registrationId?: SortOrder
    eventId?: SortOrder
    templateId?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    printedAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    customData?: SortOrderInput | SortOrder
    qrCodeData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    event?: EventOrderByWithRelationInput
    registration?: RegistrationOrderByWithRelationInput
    template?: BadgeTemplateOrderByWithRelationInput
  }

  export type ParticipantBadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    registrationId_eventId?: ParticipantBadgeRegistrationIdEventIdCompoundUniqueInput
    AND?: ParticipantBadgeWhereInput | ParticipantBadgeWhereInput[]
    OR?: ParticipantBadgeWhereInput[]
    NOT?: ParticipantBadgeWhereInput | ParticipantBadgeWhereInput[]
    registrationId?: StringFilter<"ParticipantBadge"> | string
    eventId?: StringFilter<"ParticipantBadge"> | string
    templateId?: StringFilter<"ParticipantBadge"> | string
    status?: StringFilter<"ParticipantBadge"> | string
    generatedAt?: DateTimeFilter<"ParticipantBadge"> | Date | string
    printedAt?: DateTimeNullableFilter<"ParticipantBadge"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"ParticipantBadge"> | Date | string | null
    customData?: StringNullableFilter<"ParticipantBadge"> | string | null
    qrCodeData?: StringNullableFilter<"ParticipantBadge"> | string | null
    createdAt?: DateTimeFilter<"ParticipantBadge"> | Date | string
    updatedAt?: DateTimeFilter<"ParticipantBadge"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    registration?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
    template?: XOR<BadgeTemplateScalarRelationFilter, BadgeTemplateWhereInput>
  }, "id" | "registrationId_eventId">

  export type ParticipantBadgeOrderByWithAggregationInput = {
    id?: SortOrder
    registrationId?: SortOrder
    eventId?: SortOrder
    templateId?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    printedAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    customData?: SortOrderInput | SortOrder
    qrCodeData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ParticipantBadgeCountOrderByAggregateInput
    _max?: ParticipantBadgeMaxOrderByAggregateInput
    _min?: ParticipantBadgeMinOrderByAggregateInput
  }

  export type ParticipantBadgeScalarWhereWithAggregatesInput = {
    AND?: ParticipantBadgeScalarWhereWithAggregatesInput | ParticipantBadgeScalarWhereWithAggregatesInput[]
    OR?: ParticipantBadgeScalarWhereWithAggregatesInput[]
    NOT?: ParticipantBadgeScalarWhereWithAggregatesInput | ParticipantBadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ParticipantBadge"> | string
    registrationId?: StringWithAggregatesFilter<"ParticipantBadge"> | string
    eventId?: StringWithAggregatesFilter<"ParticipantBadge"> | string
    templateId?: StringWithAggregatesFilter<"ParticipantBadge"> | string
    status?: StringWithAggregatesFilter<"ParticipantBadge"> | string
    generatedAt?: DateTimeWithAggregatesFilter<"ParticipantBadge"> | Date | string
    printedAt?: DateTimeNullableWithAggregatesFilter<"ParticipantBadge"> | Date | string | null
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"ParticipantBadge"> | Date | string | null
    customData?: StringNullableWithAggregatesFilter<"ParticipantBadge"> | string | null
    qrCodeData?: StringNullableWithAggregatesFilter<"ParticipantBadge"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ParticipantBadge"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ParticipantBadge"> | Date | string
  }

  export type EmailCampaignWhereInput = {
    AND?: EmailCampaignWhereInput | EmailCampaignWhereInput[]
    OR?: EmailCampaignWhereInput[]
    NOT?: EmailCampaignWhereInput | EmailCampaignWhereInput[]
    id?: StringFilter<"EmailCampaign"> | string
    eventId?: StringFilter<"EmailCampaign"> | string
    name?: StringFilter<"EmailCampaign"> | string
    description?: StringNullableFilter<"EmailCampaign"> | string | null
    type?: StringFilter<"EmailCampaign"> | string
    recipientType?: StringFilter<"EmailCampaign"> | string
    subject?: StringFilter<"EmailCampaign"> | string
    htmlContent?: StringFilter<"EmailCampaign"> | string
    textContent?: StringNullableFilter<"EmailCampaign"> | string | null
    status?: StringFilter<"EmailCampaign"> | string
    scheduledAt?: DateTimeNullableFilter<"EmailCampaign"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"EmailCampaign"> | Date | string | null
    totalRecipients?: IntNullableFilter<"EmailCampaign"> | number | null
    successCount?: IntNullableFilter<"EmailCampaign"> | number | null
    failureCount?: IntNullableFilter<"EmailCampaign"> | number | null
    createdAt?: DateTimeFilter<"EmailCampaign"> | Date | string
    updatedAt?: DateTimeFilter<"EmailCampaign"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    emailLogs?: EmailLogListRelationFilter
  }

  export type EmailCampaignOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    recipientType?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrderInput | SortOrder
    status?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    totalRecipients?: SortOrderInput | SortOrder
    successCount?: SortOrderInput | SortOrder
    failureCount?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    event?: EventOrderByWithRelationInput
    emailLogs?: EmailLogOrderByRelationAggregateInput
  }

  export type EmailCampaignWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailCampaignWhereInput | EmailCampaignWhereInput[]
    OR?: EmailCampaignWhereInput[]
    NOT?: EmailCampaignWhereInput | EmailCampaignWhereInput[]
    eventId?: StringFilter<"EmailCampaign"> | string
    name?: StringFilter<"EmailCampaign"> | string
    description?: StringNullableFilter<"EmailCampaign"> | string | null
    type?: StringFilter<"EmailCampaign"> | string
    recipientType?: StringFilter<"EmailCampaign"> | string
    subject?: StringFilter<"EmailCampaign"> | string
    htmlContent?: StringFilter<"EmailCampaign"> | string
    textContent?: StringNullableFilter<"EmailCampaign"> | string | null
    status?: StringFilter<"EmailCampaign"> | string
    scheduledAt?: DateTimeNullableFilter<"EmailCampaign"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"EmailCampaign"> | Date | string | null
    totalRecipients?: IntNullableFilter<"EmailCampaign"> | number | null
    successCount?: IntNullableFilter<"EmailCampaign"> | number | null
    failureCount?: IntNullableFilter<"EmailCampaign"> | number | null
    createdAt?: DateTimeFilter<"EmailCampaign"> | Date | string
    updatedAt?: DateTimeFilter<"EmailCampaign"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    emailLogs?: EmailLogListRelationFilter
  }, "id">

  export type EmailCampaignOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    recipientType?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrderInput | SortOrder
    status?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    totalRecipients?: SortOrderInput | SortOrder
    successCount?: SortOrderInput | SortOrder
    failureCount?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailCampaignCountOrderByAggregateInput
    _avg?: EmailCampaignAvgOrderByAggregateInput
    _max?: EmailCampaignMaxOrderByAggregateInput
    _min?: EmailCampaignMinOrderByAggregateInput
    _sum?: EmailCampaignSumOrderByAggregateInput
  }

  export type EmailCampaignScalarWhereWithAggregatesInput = {
    AND?: EmailCampaignScalarWhereWithAggregatesInput | EmailCampaignScalarWhereWithAggregatesInput[]
    OR?: EmailCampaignScalarWhereWithAggregatesInput[]
    NOT?: EmailCampaignScalarWhereWithAggregatesInput | EmailCampaignScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailCampaign"> | string
    eventId?: StringWithAggregatesFilter<"EmailCampaign"> | string
    name?: StringWithAggregatesFilter<"EmailCampaign"> | string
    description?: StringNullableWithAggregatesFilter<"EmailCampaign"> | string | null
    type?: StringWithAggregatesFilter<"EmailCampaign"> | string
    recipientType?: StringWithAggregatesFilter<"EmailCampaign"> | string
    subject?: StringWithAggregatesFilter<"EmailCampaign"> | string
    htmlContent?: StringWithAggregatesFilter<"EmailCampaign"> | string
    textContent?: StringNullableWithAggregatesFilter<"EmailCampaign"> | string | null
    status?: StringWithAggregatesFilter<"EmailCampaign"> | string
    scheduledAt?: DateTimeNullableWithAggregatesFilter<"EmailCampaign"> | Date | string | null
    sentAt?: DateTimeNullableWithAggregatesFilter<"EmailCampaign"> | Date | string | null
    totalRecipients?: IntNullableWithAggregatesFilter<"EmailCampaign"> | number | null
    successCount?: IntNullableWithAggregatesFilter<"EmailCampaign"> | number | null
    failureCount?: IntNullableWithAggregatesFilter<"EmailCampaign"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"EmailCampaign"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailCampaign"> | Date | string
  }

  export type EmailTemplateWhereInput = {
    AND?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    OR?: EmailTemplateWhereInput[]
    NOT?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    id?: StringFilter<"EmailTemplate"> | string
    name?: StringFilter<"EmailTemplate"> | string
    description?: StringNullableFilter<"EmailTemplate"> | string | null
    subject?: StringFilter<"EmailTemplate"> | string
    htmlContent?: StringFilter<"EmailTemplate"> | string
    textContent?: StringNullableFilter<"EmailTemplate"> | string | null
    type?: StringFilter<"EmailTemplate"> | string
    category?: StringNullableFilter<"EmailTemplate"> | string | null
    isGlobal?: BoolFilter<"EmailTemplate"> | boolean
    eventId?: StringNullableFilter<"EmailTemplate"> | string | null
    isActive?: BoolFilter<"EmailTemplate"> | boolean
    isDefault?: BoolFilter<"EmailTemplate"> | boolean
    createdAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
  }

  export type EmailTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrderInput | SortOrder
    type?: SortOrder
    category?: SortOrderInput | SortOrder
    isGlobal?: SortOrder
    eventId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    event?: EventOrderByWithRelationInput
  }

  export type EmailTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    OR?: EmailTemplateWhereInput[]
    NOT?: EmailTemplateWhereInput | EmailTemplateWhereInput[]
    name?: StringFilter<"EmailTemplate"> | string
    description?: StringNullableFilter<"EmailTemplate"> | string | null
    subject?: StringFilter<"EmailTemplate"> | string
    htmlContent?: StringFilter<"EmailTemplate"> | string
    textContent?: StringNullableFilter<"EmailTemplate"> | string | null
    type?: StringFilter<"EmailTemplate"> | string
    category?: StringNullableFilter<"EmailTemplate"> | string | null
    isGlobal?: BoolFilter<"EmailTemplate"> | boolean
    eventId?: StringNullableFilter<"EmailTemplate"> | string | null
    isActive?: BoolFilter<"EmailTemplate"> | boolean
    isDefault?: BoolFilter<"EmailTemplate"> | boolean
    createdAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    event?: XOR<EventNullableScalarRelationFilter, EventWhereInput> | null
  }, "id">

  export type EmailTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrderInput | SortOrder
    type?: SortOrder
    category?: SortOrderInput | SortOrder
    isGlobal?: SortOrder
    eventId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailTemplateCountOrderByAggregateInput
    _max?: EmailTemplateMaxOrderByAggregateInput
    _min?: EmailTemplateMinOrderByAggregateInput
  }

  export type EmailTemplateScalarWhereWithAggregatesInput = {
    AND?: EmailTemplateScalarWhereWithAggregatesInput | EmailTemplateScalarWhereWithAggregatesInput[]
    OR?: EmailTemplateScalarWhereWithAggregatesInput[]
    NOT?: EmailTemplateScalarWhereWithAggregatesInput | EmailTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailTemplate"> | string
    name?: StringWithAggregatesFilter<"EmailTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"EmailTemplate"> | string | null
    subject?: StringWithAggregatesFilter<"EmailTemplate"> | string
    htmlContent?: StringWithAggregatesFilter<"EmailTemplate"> | string
    textContent?: StringNullableWithAggregatesFilter<"EmailTemplate"> | string | null
    type?: StringWithAggregatesFilter<"EmailTemplate"> | string
    category?: StringNullableWithAggregatesFilter<"EmailTemplate"> | string | null
    isGlobal?: BoolWithAggregatesFilter<"EmailTemplate"> | boolean
    eventId?: StringNullableWithAggregatesFilter<"EmailTemplate"> | string | null
    isActive?: BoolWithAggregatesFilter<"EmailTemplate"> | boolean
    isDefault?: BoolWithAggregatesFilter<"EmailTemplate"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailTemplate"> | Date | string
  }

  export type EmailLogWhereInput = {
    AND?: EmailLogWhereInput | EmailLogWhereInput[]
    OR?: EmailLogWhereInput[]
    NOT?: EmailLogWhereInput | EmailLogWhereInput[]
    id?: StringFilter<"EmailLog"> | string
    campaignId?: StringFilter<"EmailLog"> | string
    recipientEmail?: StringFilter<"EmailLog"> | string
    recipientName?: StringNullableFilter<"EmailLog"> | string | null
    status?: StringFilter<"EmailLog"> | string
    errorMessage?: StringNullableFilter<"EmailLog"> | string | null
    sentAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    openedAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    clickedAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    createdAt?: DateTimeFilter<"EmailLog"> | Date | string
    updatedAt?: DateTimeFilter<"EmailLog"> | Date | string
    campaign?: XOR<EmailCampaignScalarRelationFilter, EmailCampaignWhereInput>
  }

  export type EmailLogOrderByWithRelationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    recipientEmail?: SortOrder
    recipientName?: SortOrderInput | SortOrder
    status?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    openedAt?: SortOrderInput | SortOrder
    clickedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    campaign?: EmailCampaignOrderByWithRelationInput
  }

  export type EmailLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailLogWhereInput | EmailLogWhereInput[]
    OR?: EmailLogWhereInput[]
    NOT?: EmailLogWhereInput | EmailLogWhereInput[]
    campaignId?: StringFilter<"EmailLog"> | string
    recipientEmail?: StringFilter<"EmailLog"> | string
    recipientName?: StringNullableFilter<"EmailLog"> | string | null
    status?: StringFilter<"EmailLog"> | string
    errorMessage?: StringNullableFilter<"EmailLog"> | string | null
    sentAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    openedAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    clickedAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    createdAt?: DateTimeFilter<"EmailLog"> | Date | string
    updatedAt?: DateTimeFilter<"EmailLog"> | Date | string
    campaign?: XOR<EmailCampaignScalarRelationFilter, EmailCampaignWhereInput>
  }, "id">

  export type EmailLogOrderByWithAggregationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    recipientEmail?: SortOrder
    recipientName?: SortOrderInput | SortOrder
    status?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    openedAt?: SortOrderInput | SortOrder
    clickedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailLogCountOrderByAggregateInput
    _max?: EmailLogMaxOrderByAggregateInput
    _min?: EmailLogMinOrderByAggregateInput
  }

  export type EmailLogScalarWhereWithAggregatesInput = {
    AND?: EmailLogScalarWhereWithAggregatesInput | EmailLogScalarWhereWithAggregatesInput[]
    OR?: EmailLogScalarWhereWithAggregatesInput[]
    NOT?: EmailLogScalarWhereWithAggregatesInput | EmailLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailLog"> | string
    campaignId?: StringWithAggregatesFilter<"EmailLog"> | string
    recipientEmail?: StringWithAggregatesFilter<"EmailLog"> | string
    recipientName?: StringNullableWithAggregatesFilter<"EmailLog"> | string | null
    status?: StringWithAggregatesFilter<"EmailLog"> | string
    errorMessage?: StringNullableWithAggregatesFilter<"EmailLog"> | string | null
    sentAt?: DateTimeNullableWithAggregatesFilter<"EmailLog"> | Date | string | null
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"EmailLog"> | Date | string | null
    openedAt?: DateTimeNullableWithAggregatesFilter<"EmailLog"> | Date | string | null
    clickedAt?: DateTimeNullableWithAggregatesFilter<"EmailLog"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EmailLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailLog"> | Date | string
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: StringFilter<"Game"> | string
    eventId?: StringFilter<"Game"> | string
    participantId?: StringFilter<"Game"> | string
    action?: StringFilter<"Game"> | string
    points?: IntFilter<"Game"> | number
    actionDetails?: StringNullableFilter<"Game"> | string | null
    relatedEntityId?: StringNullableFilter<"Game"> | string | null
    createdAt?: DateTimeFilter<"Game"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    participant?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    participantId?: SortOrder
    action?: SortOrder
    points?: SortOrder
    actionDetails?: SortOrderInput | SortOrder
    relatedEntityId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    event?: EventOrderByWithRelationInput
    participant?: RegistrationOrderByWithRelationInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    eventId?: StringFilter<"Game"> | string
    participantId?: StringFilter<"Game"> | string
    action?: StringFilter<"Game"> | string
    points?: IntFilter<"Game"> | number
    actionDetails?: StringNullableFilter<"Game"> | string | null
    relatedEntityId?: StringNullableFilter<"Game"> | string | null
    createdAt?: DateTimeFilter<"Game"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    participant?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
  }, "id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    participantId?: SortOrder
    action?: SortOrder
    points?: SortOrder
    actionDetails?: SortOrderInput | SortOrder
    relatedEntityId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Game"> | string
    eventId?: StringWithAggregatesFilter<"Game"> | string
    participantId?: StringWithAggregatesFilter<"Game"> | string
    action?: StringWithAggregatesFilter<"Game"> | string
    points?: IntWithAggregatesFilter<"Game"> | number
    actionDetails?: StringNullableWithAggregatesFilter<"Game"> | string | null
    relatedEntityId?: StringNullableWithAggregatesFilter<"Game"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
  }

  export type UserEventScoreWhereInput = {
    AND?: UserEventScoreWhereInput | UserEventScoreWhereInput[]
    OR?: UserEventScoreWhereInput[]
    NOT?: UserEventScoreWhereInput | UserEventScoreWhereInput[]
    id?: StringFilter<"UserEventScore"> | string
    eventId?: StringFilter<"UserEventScore"> | string
    participantId?: StringFilter<"UserEventScore"> | string
    totalPoints?: IntFilter<"UserEventScore"> | number
    lastUpdated?: DateTimeFilter<"UserEventScore"> | Date | string
    createdAt?: DateTimeFilter<"UserEventScore"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    participant?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
  }

  export type UserEventScoreOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    participantId?: SortOrder
    totalPoints?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    event?: EventOrderByWithRelationInput
    participant?: RegistrationOrderByWithRelationInput
  }

  export type UserEventScoreWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    eventId_participantId?: UserEventScoreEventIdParticipantIdCompoundUniqueInput
    AND?: UserEventScoreWhereInput | UserEventScoreWhereInput[]
    OR?: UserEventScoreWhereInput[]
    NOT?: UserEventScoreWhereInput | UserEventScoreWhereInput[]
    eventId?: StringFilter<"UserEventScore"> | string
    participantId?: StringFilter<"UserEventScore"> | string
    totalPoints?: IntFilter<"UserEventScore"> | number
    lastUpdated?: DateTimeFilter<"UserEventScore"> | Date | string
    createdAt?: DateTimeFilter<"UserEventScore"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    participant?: XOR<RegistrationScalarRelationFilter, RegistrationWhereInput>
  }, "id" | "eventId_participantId">

  export type UserEventScoreOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    participantId?: SortOrder
    totalPoints?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    _count?: UserEventScoreCountOrderByAggregateInput
    _avg?: UserEventScoreAvgOrderByAggregateInput
    _max?: UserEventScoreMaxOrderByAggregateInput
    _min?: UserEventScoreMinOrderByAggregateInput
    _sum?: UserEventScoreSumOrderByAggregateInput
  }

  export type UserEventScoreScalarWhereWithAggregatesInput = {
    AND?: UserEventScoreScalarWhereWithAggregatesInput | UserEventScoreScalarWhereWithAggregatesInput[]
    OR?: UserEventScoreScalarWhereWithAggregatesInput[]
    NOT?: UserEventScoreScalarWhereWithAggregatesInput | UserEventScoreScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserEventScore"> | string
    eventId?: StringWithAggregatesFilter<"UserEventScore"> | string
    participantId?: StringWithAggregatesFilter<"UserEventScore"> | string
    totalPoints?: IntWithAggregatesFilter<"UserEventScore"> | number
    lastUpdated?: DateTimeWithAggregatesFilter<"UserEventScore"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserEventScore"> | Date | string
  }

  export type UserMatchProfileWhereInput = {
    AND?: UserMatchProfileWhereInput | UserMatchProfileWhereInput[]
    OR?: UserMatchProfileWhereInput[]
    NOT?: UserMatchProfileWhereInput | UserMatchProfileWhereInput[]
    id?: StringFilter<"UserMatchProfile"> | string
    userId?: StringFilter<"UserMatchProfile"> | string
    eventId?: StringFilter<"UserMatchProfile"> | string
    headline?: StringNullableFilter<"UserMatchProfile"> | string | null
    bio?: StringNullableFilter<"UserMatchProfile"> | string | null
    jobTitle?: StringNullableFilter<"UserMatchProfile"> | string | null
    company?: StringNullableFilter<"UserMatchProfile"> | string | null
    interests?: StringNullableListFilter<"UserMatchProfile">
    goals?: StringNullableListFilter<"UserMatchProfile">
    availability?: StringNullableListFilter<"UserMatchProfile">
    createdAt?: DateTimeFilter<"UserMatchProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserMatchProfile"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserMatchProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    headline?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    jobTitle?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    interests?: SortOrder
    goals?: SortOrder
    availability?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    event?: EventOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UserMatchProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_eventId?: UserMatchProfileUserIdEventIdCompoundUniqueInput
    AND?: UserMatchProfileWhereInput | UserMatchProfileWhereInput[]
    OR?: UserMatchProfileWhereInput[]
    NOT?: UserMatchProfileWhereInput | UserMatchProfileWhereInput[]
    userId?: StringFilter<"UserMatchProfile"> | string
    eventId?: StringFilter<"UserMatchProfile"> | string
    headline?: StringNullableFilter<"UserMatchProfile"> | string | null
    bio?: StringNullableFilter<"UserMatchProfile"> | string | null
    jobTitle?: StringNullableFilter<"UserMatchProfile"> | string | null
    company?: StringNullableFilter<"UserMatchProfile"> | string | null
    interests?: StringNullableListFilter<"UserMatchProfile">
    goals?: StringNullableListFilter<"UserMatchProfile">
    availability?: StringNullableListFilter<"UserMatchProfile">
    createdAt?: DateTimeFilter<"UserMatchProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserMatchProfile"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_eventId">

  export type UserMatchProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    headline?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    jobTitle?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    interests?: SortOrder
    goals?: SortOrder
    availability?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserMatchProfileCountOrderByAggregateInput
    _max?: UserMatchProfileMaxOrderByAggregateInput
    _min?: UserMatchProfileMinOrderByAggregateInput
  }

  export type UserMatchProfileScalarWhereWithAggregatesInput = {
    AND?: UserMatchProfileScalarWhereWithAggregatesInput | UserMatchProfileScalarWhereWithAggregatesInput[]
    OR?: UserMatchProfileScalarWhereWithAggregatesInput[]
    NOT?: UserMatchProfileScalarWhereWithAggregatesInput | UserMatchProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserMatchProfile"> | string
    userId?: StringWithAggregatesFilter<"UserMatchProfile"> | string
    eventId?: StringWithAggregatesFilter<"UserMatchProfile"> | string
    headline?: StringNullableWithAggregatesFilter<"UserMatchProfile"> | string | null
    bio?: StringNullableWithAggregatesFilter<"UserMatchProfile"> | string | null
    jobTitle?: StringNullableWithAggregatesFilter<"UserMatchProfile"> | string | null
    company?: StringNullableWithAggregatesFilter<"UserMatchProfile"> | string | null
    interests?: StringNullableListFilter<"UserMatchProfile">
    goals?: StringNullableListFilter<"UserMatchProfile">
    availability?: StringNullableListFilter<"UserMatchProfile">
    createdAt?: DateTimeWithAggregatesFilter<"UserMatchProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserMatchProfile"> | Date | string
  }

  export type MatchSuggestionWhereInput = {
    AND?: MatchSuggestionWhereInput | MatchSuggestionWhereInput[]
    OR?: MatchSuggestionWhereInput[]
    NOT?: MatchSuggestionWhereInput | MatchSuggestionWhereInput[]
    id?: StringFilter<"MatchSuggestion"> | string
    userId?: StringFilter<"MatchSuggestion"> | string
    suggestedId?: StringFilter<"MatchSuggestion"> | string
    eventId?: StringFilter<"MatchSuggestion"> | string
    score?: FloatFilter<"MatchSuggestion"> | number
    reason?: StringNullableFilter<"MatchSuggestion"> | string | null
    createdAt?: DateTimeFilter<"MatchSuggestion"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    suggested?: XOR<UserScalarRelationFilter, UserWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MatchSuggestionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    suggestedId?: SortOrder
    eventId?: SortOrder
    score?: SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    event?: EventOrderByWithRelationInput
    suggested?: UserOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MatchSuggestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_suggestedId_eventId?: MatchSuggestionUserIdSuggestedIdEventIdCompoundUniqueInput
    AND?: MatchSuggestionWhereInput | MatchSuggestionWhereInput[]
    OR?: MatchSuggestionWhereInput[]
    NOT?: MatchSuggestionWhereInput | MatchSuggestionWhereInput[]
    userId?: StringFilter<"MatchSuggestion"> | string
    suggestedId?: StringFilter<"MatchSuggestion"> | string
    eventId?: StringFilter<"MatchSuggestion"> | string
    score?: FloatFilter<"MatchSuggestion"> | number
    reason?: StringNullableFilter<"MatchSuggestion"> | string | null
    createdAt?: DateTimeFilter<"MatchSuggestion"> | Date | string
    event?: XOR<EventScalarRelationFilter, EventWhereInput>
    suggested?: XOR<UserScalarRelationFilter, UserWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_suggestedId_eventId">

  export type MatchSuggestionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    suggestedId?: SortOrder
    eventId?: SortOrder
    score?: SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: MatchSuggestionCountOrderByAggregateInput
    _avg?: MatchSuggestionAvgOrderByAggregateInput
    _max?: MatchSuggestionMaxOrderByAggregateInput
    _min?: MatchSuggestionMinOrderByAggregateInput
    _sum?: MatchSuggestionSumOrderByAggregateInput
  }

  export type MatchSuggestionScalarWhereWithAggregatesInput = {
    AND?: MatchSuggestionScalarWhereWithAggregatesInput | MatchSuggestionScalarWhereWithAggregatesInput[]
    OR?: MatchSuggestionScalarWhereWithAggregatesInput[]
    NOT?: MatchSuggestionScalarWhereWithAggregatesInput | MatchSuggestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MatchSuggestion"> | string
    userId?: StringWithAggregatesFilter<"MatchSuggestion"> | string
    suggestedId?: StringWithAggregatesFilter<"MatchSuggestion"> | string
    eventId?: StringWithAggregatesFilter<"MatchSuggestion"> | string
    score?: FloatWithAggregatesFilter<"MatchSuggestion"> | number
    reason?: StringNullableWithAggregatesFilter<"MatchSuggestion"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MatchSuggestion"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionCreateNestedManyWithoutSuggestedInput
    suggestions?: MatchSuggestionCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionUncheckedCreateNestedManyWithoutSuggestedInput
    suggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUpdateManyWithoutSuggestedNestedInput
    suggestions?: MatchSuggestionUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUncheckedUpdateManyWithoutSuggestedNestedInput
    suggestions?: MatchSuggestionUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RegistrationCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentCreateNestedManyWithoutRequesterInput
    games?: GameCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutRegistrationInput
    event: EventCreateNestedOneWithoutRegistrationsInput
    ticket?: TicketCreateNestedOneWithoutRegistrationsInput
    sessions?: SessionParticipantCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    eventId: string
    ticketId?: string | null
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentUncheckedCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentUncheckedCreateNestedManyWithoutRequesterInput
    games?: GameUncheckedCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutRegistrationInput
    sessions?: SessionParticipantUncheckedCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUpdateManyWithoutRequesterNestedInput
    games?: GameUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutRegistrationNestedInput
    event?: EventUpdateOneRequiredWithoutRegistrationsNestedInput
    ticket?: TicketUpdateOneWithoutRegistrationsNestedInput
    sessions?: SessionParticipantUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    ticketId?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUncheckedUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUncheckedUpdateManyWithoutRequesterNestedInput
    games?: GameUncheckedUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutRegistrationNestedInput
    sessions?: SessionParticipantUncheckedUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    eventId: string
    ticketId?: string | null
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
  }

  export type RegistrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RegistrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    ticketId?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TicketCreateInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string
    currency?: string
    quantity?: number | null
    sold?: number
    status?: string
    visibility?: string
    validFrom: Date | string
    validUntil: Date | string
    group?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    registrations?: RegistrationCreateNestedManyWithoutTicketInput
    event: EventCreateNestedOneWithoutTicketsInput
  }

  export type TicketUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string
    currency?: string
    quantity?: number | null
    sold?: number
    status?: string
    visibility?: string
    validFrom: Date | string
    validUntil: Date | string
    group?: string
    eventId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    registrations?: RegistrationUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    sold?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrations?: RegistrationUpdateManyWithoutTicketNestedInput
    event?: EventUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type TicketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    sold?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrations?: RegistrationUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string
    currency?: string
    quantity?: number | null
    sold?: number
    status?: string
    visibility?: string
    validFrom: Date | string
    validUntil: Date | string
    group?: string
    eventId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    sold?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    sold?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type event_sessionsCreateInput = {
    id: string
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    start_time: string
    end_time: string
    location?: string | null
    speaker?: string | null
    capacity?: number | null
    created_at?: Date | string
    updated_at: Date | string
    banner?: string | null
    format?: string | null
    video_url?: string | null
    events: EventCreateNestedOneWithoutEvent_sessionsInput
    participants?: SessionParticipantCreateNestedManyWithoutSessionInput
  }

  export type event_sessionsUncheckedCreateInput = {
    id: string
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    start_time: string
    end_time: string
    location?: string | null
    speaker?: string | null
    capacity?: number | null
    event_id: string
    created_at?: Date | string
    updated_at: Date | string
    banner?: string | null
    format?: string | null
    video_url?: string | null
    participants?: SessionParticipantUncheckedCreateNestedManyWithoutSessionInput
  }

  export type event_sessionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateOneRequiredWithoutEvent_sessionsNestedInput
    participants?: SessionParticipantUpdateManyWithoutSessionNestedInput
  }

  export type event_sessionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    event_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: SessionParticipantUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type event_sessionsCreateManyInput = {
    id: string
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    start_time: string
    end_time: string
    location?: string | null
    speaker?: string | null
    capacity?: number | null
    event_id: string
    created_at?: Date | string
    updated_at: Date | string
    banner?: string | null
    format?: string | null
    video_url?: string | null
  }

  export type event_sessionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type event_sessionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    event_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SponsorCreateInput = {
    id?: string
    name: string
    description?: string | null
    logo?: string | null
    website?: string | null
    level?: string
    visible?: boolean
    location?: string | null
    address?: string | null
    phone?: string | null
    mobile?: string | null
    email?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    facebookUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutSponsorsInput
  }

  export type SponsorUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    logo?: string | null
    website?: string | null
    level?: string
    visible?: boolean
    eventId: string
    location?: string | null
    address?: string | null
    phone?: string | null
    mobile?: string | null
    email?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    facebookUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SponsorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    level?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutSponsorsNestedInput
  }

  export type SponsorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    level?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    eventId?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SponsorCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    logo?: string | null
    website?: string | null
    level?: string
    visible?: boolean
    eventId: string
    location?: string | null
    address?: string | null
    phone?: string | null
    mobile?: string | null
    email?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    facebookUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SponsorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    level?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SponsorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    level?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    eventId?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionParticipantCreateInput = {
    id?: string
    registeredAt?: Date | string
    attendedSession?: boolean
    attendanceTime?: Date | string | null
    participant: RegistrationCreateNestedOneWithoutSessionsInput
    session: event_sessionsCreateNestedOneWithoutParticipantsInput
  }

  export type SessionParticipantUncheckedCreateInput = {
    id?: string
    sessionId: string
    participantId: string
    registeredAt?: Date | string
    attendedSession?: boolean
    attendanceTime?: Date | string | null
  }

  export type SessionParticipantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendedSession?: BoolFieldUpdateOperationsInput | boolean
    attendanceTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    participant?: RegistrationUpdateOneRequiredWithoutSessionsNestedInput
    session?: event_sessionsUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type SessionParticipantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendedSession?: BoolFieldUpdateOperationsInput | boolean
    attendanceTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionParticipantCreateManyInput = {
    id?: string
    sessionId: string
    participantId: string
    registeredAt?: Date | string
    attendedSession?: boolean
    attendanceTime?: Date | string | null
  }

  export type SessionParticipantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendedSession?: BoolFieldUpdateOperationsInput | boolean
    attendanceTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionParticipantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendedSession?: BoolFieldUpdateOperationsInput | boolean
    attendanceTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentCreateInput = {
    id?: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutAppointmentsInput
    recipient: RegistrationCreateNestedOneWithoutReceivedAppointmentsInput
    requester: RegistrationCreateNestedOneWithoutSentAppointmentsInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: string
    eventId: string
    requesterId: string
    recipientId: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAppointmentsNestedInput
    recipient?: RegistrationUpdateOneRequiredWithoutReceivedAppointmentsNestedInput
    requester?: RegistrationUpdateOneRequiredWithoutSentAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyInput = {
    id?: string
    eventId: string
    requesterId: string
    recipientId: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCodeCreateInput = {
    id?: string
    email: string
    code: string
    event_id?: string | null
    expires_at: Date | string
    used?: boolean
    created_at?: Date | string
  }

  export type OtpCodeUncheckedCreateInput = {
    id?: string
    email: string
    code: string
    event_id?: string | null
    expires_at: Date | string
    used?: boolean
    created_at?: Date | string
  }

  export type OtpCodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    event_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    event_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCodeCreateManyInput = {
    id?: string
    email: string
    code: string
    event_id?: string | null
    expires_at: Date | string
    used?: boolean
    created_at?: Date | string
  }

  export type OtpCodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    event_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    event_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeCreateInput = {
    id?: string
    name?: string | null
    canvasData?: string | null
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutBadgesInput
  }

  export type BadgeUncheckedCreateInput = {
    id?: string
    eventId: string
    name?: string | null
    canvasData?: string | null
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutBadgesNestedInput
  }

  export type BadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeCreateManyInput = {
    id?: string
    eventId: string
    name?: string | null
    canvasData?: string | null
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    canvasData: string
    isGlobal?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    event?: EventCreateNestedOneWithoutBadgeTemplatesInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutTemplateInput
  }

  export type BadgeTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    canvasData: string
    isGlobal?: boolean
    eventId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type BadgeTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: StringFieldUpdateOperationsInput | string
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutBadgeTemplatesNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutTemplateNestedInput
  }

  export type BadgeTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: StringFieldUpdateOperationsInput | string
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type BadgeTemplateCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    canvasData: string
    isGlobal?: boolean
    eventId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BadgeTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: StringFieldUpdateOperationsInput | string
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: StringFieldUpdateOperationsInput | string
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParticipantBadgeCreateInput = {
    id?: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutParticipantBadgesInput
    registration: RegistrationCreateNestedOneWithoutParticipantBadgesInput
    template: BadgeTemplateCreateNestedOneWithoutParticipantBadgesInput
  }

  export type ParticipantBadgeUncheckedCreateInput = {
    id?: string
    registrationId: string
    eventId: string
    templateId: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParticipantBadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutParticipantBadgesNestedInput
    registration?: RegistrationUpdateOneRequiredWithoutParticipantBadgesNestedInput
    template?: BadgeTemplateUpdateOneRequiredWithoutParticipantBadgesNestedInput
  }

  export type ParticipantBadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParticipantBadgeCreateManyInput = {
    id?: string
    registrationId: string
    eventId: string
    templateId: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParticipantBadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParticipantBadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailCampaignCreateInput = {
    id?: string
    name: string
    description?: string | null
    type?: string
    recipientType?: string
    subject: string
    htmlContent: string
    textContent?: string | null
    status?: string
    scheduledAt?: Date | string | null
    sentAt?: Date | string | null
    totalRecipients?: number | null
    successCount?: number | null
    failureCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutEmailCampaignsInput
    emailLogs?: EmailLogCreateNestedManyWithoutCampaignInput
  }

  export type EmailCampaignUncheckedCreateInput = {
    id?: string
    eventId: string
    name: string
    description?: string | null
    type?: string
    recipientType?: string
    subject: string
    htmlContent: string
    textContent?: string | null
    status?: string
    scheduledAt?: Date | string | null
    sentAt?: Date | string | null
    totalRecipients?: number | null
    successCount?: number | null
    failureCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailLogs?: EmailLogUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type EmailCampaignUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalRecipients?: NullableIntFieldUpdateOperationsInput | number | null
    successCount?: NullableIntFieldUpdateOperationsInput | number | null
    failureCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutEmailCampaignsNestedInput
    emailLogs?: EmailLogUpdateManyWithoutCampaignNestedInput
  }

  export type EmailCampaignUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalRecipients?: NullableIntFieldUpdateOperationsInput | number | null
    successCount?: NullableIntFieldUpdateOperationsInput | number | null
    failureCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailLogs?: EmailLogUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type EmailCampaignCreateManyInput = {
    id?: string
    eventId: string
    name: string
    description?: string | null
    type?: string
    recipientType?: string
    subject: string
    htmlContent: string
    textContent?: string | null
    status?: string
    scheduledAt?: Date | string | null
    sentAt?: Date | string | null
    totalRecipients?: number | null
    successCount?: number | null
    failureCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailCampaignUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalRecipients?: NullableIntFieldUpdateOperationsInput | number | null
    successCount?: NullableIntFieldUpdateOperationsInput | number | null
    failureCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailCampaignUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalRecipients?: NullableIntFieldUpdateOperationsInput | number | null
    successCount?: NullableIntFieldUpdateOperationsInput | number | null
    failureCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    htmlContent: string
    textContent?: string | null
    type?: string
    category?: string | null
    isGlobal?: boolean
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    event?: EventCreateNestedOneWithoutEmailTemplatesInput
  }

  export type EmailTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    htmlContent: string
    textContent?: string | null
    type?: string
    category?: string | null
    isGlobal?: boolean
    eventId?: string | null
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutEmailTemplatesNestedInput
  }

  export type EmailTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    htmlContent: string
    textContent?: string | null
    type?: string
    category?: string | null
    isGlobal?: boolean
    eventId?: string | null
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogCreateInput = {
    id?: string
    recipientEmail: string
    recipientName?: string | null
    status?: string
    errorMessage?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: EmailCampaignCreateNestedOneWithoutEmailLogsInput
  }

  export type EmailLogUncheckedCreateInput = {
    id?: string
    campaignId: string
    recipientEmail: string
    recipientName?: string | null
    status?: string
    errorMessage?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: EmailCampaignUpdateOneRequiredWithoutEmailLogsNestedInput
  }

  export type EmailLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogCreateManyInput = {
    id?: string
    campaignId: string
    recipientEmail: string
    recipientName?: string | null
    status?: string
    errorMessage?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateInput = {
    id?: string
    action: string
    points: number
    actionDetails?: string | null
    relatedEntityId?: string | null
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutGamesInput
    participant: RegistrationCreateNestedOneWithoutGamesInput
  }

  export type GameUncheckedCreateInput = {
    id?: string
    eventId: string
    participantId: string
    action: string
    points: number
    actionDetails?: string | null
    relatedEntityId?: string | null
    createdAt?: Date | string
  }

  export type GameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    actionDetails?: NullableStringFieldUpdateOperationsInput | string | null
    relatedEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutGamesNestedInput
    participant?: RegistrationUpdateOneRequiredWithoutGamesNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    actionDetails?: NullableStringFieldUpdateOperationsInput | string | null
    relatedEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateManyInput = {
    id?: string
    eventId: string
    participantId: string
    action: string
    points: number
    actionDetails?: string | null
    relatedEntityId?: string | null
    createdAt?: Date | string
  }

  export type GameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    actionDetails?: NullableStringFieldUpdateOperationsInput | string | null
    relatedEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    actionDetails?: NullableStringFieldUpdateOperationsInput | string | null
    relatedEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserEventScoreCreateInput = {
    id?: string
    totalPoints?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutUserEventScoresInput
    participant: RegistrationCreateNestedOneWithoutUserEventScoresInput
  }

  export type UserEventScoreUncheckedCreateInput = {
    id?: string
    eventId: string
    participantId: string
    totalPoints?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type UserEventScoreUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPoints?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutUserEventScoresNestedInput
    participant?: RegistrationUpdateOneRequiredWithoutUserEventScoresNestedInput
  }

  export type UserEventScoreUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    totalPoints?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserEventScoreCreateManyInput = {
    id?: string
    eventId: string
    participantId: string
    totalPoints?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type UserEventScoreUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPoints?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserEventScoreUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    totalPoints?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchProfileCreateInput = {
    id?: string
    headline?: string | null
    bio?: string | null
    jobTitle?: string | null
    company?: string | null
    interests?: UserMatchProfileCreateinterestsInput | string[]
    goals?: UserMatchProfileCreategoalsInput | string[]
    availability?: UserMatchProfileCreateavailabilityInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutMatchProfilesInput
    user: UserCreateNestedOneWithoutMatchProfilesInput
  }

  export type UserMatchProfileUncheckedCreateInput = {
    id?: string
    userId: string
    eventId: string
    headline?: string | null
    bio?: string | null
    jobTitle?: string | null
    company?: string | null
    interests?: UserMatchProfileCreateinterestsInput | string[]
    goals?: UserMatchProfileCreategoalsInput | string[]
    availability?: UserMatchProfileCreateavailabilityInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMatchProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    headline?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: UserMatchProfileUpdateinterestsInput | string[]
    goals?: UserMatchProfileUpdategoalsInput | string[]
    availability?: UserMatchProfileUpdateavailabilityInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutMatchProfilesNestedInput
    user?: UserUpdateOneRequiredWithoutMatchProfilesNestedInput
  }

  export type UserMatchProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    headline?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: UserMatchProfileUpdateinterestsInput | string[]
    goals?: UserMatchProfileUpdategoalsInput | string[]
    availability?: UserMatchProfileUpdateavailabilityInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchProfileCreateManyInput = {
    id?: string
    userId: string
    eventId: string
    headline?: string | null
    bio?: string | null
    jobTitle?: string | null
    company?: string | null
    interests?: UserMatchProfileCreateinterestsInput | string[]
    goals?: UserMatchProfileCreategoalsInput | string[]
    availability?: UserMatchProfileCreateavailabilityInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMatchProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    headline?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: UserMatchProfileUpdateinterestsInput | string[]
    goals?: UserMatchProfileUpdategoalsInput | string[]
    availability?: UserMatchProfileUpdateavailabilityInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    headline?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: UserMatchProfileUpdateinterestsInput | string[]
    goals?: UserMatchProfileUpdategoalsInput | string[]
    availability?: UserMatchProfileUpdateavailabilityInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchSuggestionCreateInput = {
    id?: string
    score: number
    reason?: string | null
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutMatchSuggestionsInput
    suggested: UserCreateNestedOneWithoutSuggestedForInput
    user: UserCreateNestedOneWithoutSuggestionsInput
  }

  export type MatchSuggestionUncheckedCreateInput = {
    id?: string
    userId: string
    suggestedId: string
    eventId: string
    score: number
    reason?: string | null
    createdAt?: Date | string
  }

  export type MatchSuggestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutMatchSuggestionsNestedInput
    suggested?: UserUpdateOneRequiredWithoutSuggestedForNestedInput
    user?: UserUpdateOneRequiredWithoutSuggestionsNestedInput
  }

  export type MatchSuggestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    suggestedId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchSuggestionCreateManyInput = {
    id?: string
    userId: string
    suggestedId: string
    eventId: string
    score: number
    reason?: string | null
    createdAt?: Date | string
  }

  export type MatchSuggestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchSuggestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    suggestedId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type MatchSuggestionListRelationFilter = {
    every?: MatchSuggestionWhereInput
    some?: MatchSuggestionWhereInput
    none?: MatchSuggestionWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type UserMatchProfileListRelationFilter = {
    every?: UserMatchProfileWhereInput
    some?: UserMatchProfileWhereInput
    none?: UserMatchProfileWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchSuggestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserMatchProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    permissions?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrder
    phone?: SortOrder
    plan?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrder
    phone?: SortOrder
    plan?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    lastLogin?: SortOrder
    phone?: SortOrder
    plan?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type BadgeTemplateListRelationFilter = {
    every?: BadgeTemplateWhereInput
    some?: BadgeTemplateWhereInput
    none?: BadgeTemplateWhereInput
  }

  export type BadgeListRelationFilter = {
    every?: BadgeWhereInput
    some?: BadgeWhereInput
    none?: BadgeWhereInput
  }

  export type EmailCampaignListRelationFilter = {
    every?: EmailCampaignWhereInput
    some?: EmailCampaignWhereInput
    none?: EmailCampaignWhereInput
  }

  export type EmailTemplateListRelationFilter = {
    every?: EmailTemplateWhereInput
    some?: EmailTemplateWhereInput
    none?: EmailTemplateWhereInput
  }

  export type Event_sessionsListRelationFilter = {
    every?: event_sessionsWhereInput
    some?: event_sessionsWhereInput
    none?: event_sessionsWhereInput
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type ParticipantBadgeListRelationFilter = {
    every?: ParticipantBadgeWhereInput
    some?: ParticipantBadgeWhereInput
    none?: ParticipantBadgeWhereInput
  }

  export type RegistrationListRelationFilter = {
    every?: RegistrationWhereInput
    some?: RegistrationWhereInput
    none?: RegistrationWhereInput
  }

  export type SponsorListRelationFilter = {
    every?: SponsorWhereInput
    some?: SponsorWhereInput
    none?: SponsorWhereInput
  }

  export type TicketListRelationFilter = {
    every?: TicketWhereInput
    some?: TicketWhereInput
    none?: TicketWhereInput
  }

  export type UserEventScoreListRelationFilter = {
    every?: UserEventScoreWhereInput
    some?: UserEventScoreWhereInput
    none?: UserEventScoreWhereInput
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BadgeTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BadgeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailCampaignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type event_sessionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParticipantBadgeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegistrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SponsorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserEventScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    location?: SortOrder
    slug?: SortOrder
    banner?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sector?: SortOrder
    type?: SortOrder
    format?: SortOrder
    timezone?: SortOrder
    videoUrl?: SortOrder
    supportEmail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    logo?: SortOrder
    archived?: SortOrder
    archivedAt?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    location?: SortOrder
    slug?: SortOrder
    banner?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sector?: SortOrder
    type?: SortOrder
    format?: SortOrder
    timezone?: SortOrder
    videoUrl?: SortOrder
    supportEmail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    logo?: SortOrder
    archived?: SortOrder
    archivedAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    location?: SortOrder
    slug?: SortOrder
    banner?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sector?: SortOrder
    type?: SortOrder
    format?: SortOrder
    timezone?: SortOrder
    videoUrl?: SortOrder
    supportEmail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    logo?: SortOrder
    archived?: SortOrder
    archivedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EventScalarRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type TicketNullableScalarRelationFilter = {
    is?: TicketWhereInput | null
    isNot?: TicketWhereInput | null
  }

  export type SessionParticipantListRelationFilter = {
    every?: SessionParticipantWhereInput
    some?: SessionParticipantWhereInput
    none?: SessionParticipantWhereInput
  }

  export type SessionParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegistrationCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    type?: SortOrder
    eventId?: SortOrder
    ticketId?: SortOrder
    qrCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    checkedIn?: SortOrder
    checkInTime?: SortOrder
    shortCode?: SortOrder
    company?: SortOrder
    jobTitle?: SortOrder
  }

  export type RegistrationMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    type?: SortOrder
    eventId?: SortOrder
    ticketId?: SortOrder
    qrCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    checkedIn?: SortOrder
    checkInTime?: SortOrder
    shortCode?: SortOrder
    company?: SortOrder
    jobTitle?: SortOrder
  }

  export type RegistrationMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    type?: SortOrder
    eventId?: SortOrder
    ticketId?: SortOrder
    qrCode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    checkedIn?: SortOrder
    checkInTime?: SortOrder
    shortCode?: SortOrder
    company?: SortOrder
    jobTitle?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type TicketCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    sold?: SortOrder
    status?: SortOrder
    visibility?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    group?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TicketAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    sold?: SortOrder
  }

  export type TicketMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    sold?: SortOrder
    status?: SortOrder
    visibility?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    group?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TicketMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    quantity?: SortOrder
    sold?: SortOrder
    status?: SortOrder
    visibility?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    group?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TicketSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    sold?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type event_sessionsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    location?: SortOrder
    speaker?: SortOrder
    capacity?: SortOrder
    event_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    banner?: SortOrder
    format?: SortOrder
    video_url?: SortOrder
  }

  export type event_sessionsAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type event_sessionsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    location?: SortOrder
    speaker?: SortOrder
    capacity?: SortOrder
    event_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    banner?: SortOrder
    format?: SortOrder
    video_url?: SortOrder
  }

  export type event_sessionsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    location?: SortOrder
    speaker?: SortOrder
    capacity?: SortOrder
    event_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    banner?: SortOrder
    format?: SortOrder
    video_url?: SortOrder
  }

  export type event_sessionsSumOrderByAggregateInput = {
    capacity?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SponsorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    level?: SortOrder
    visible?: SortOrder
    eventId?: SortOrder
    location?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    mobile?: SortOrder
    email?: SortOrder
    linkedinUrl?: SortOrder
    twitterUrl?: SortOrder
    facebookUrl?: SortOrder
    documents?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SponsorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    level?: SortOrder
    visible?: SortOrder
    eventId?: SortOrder
    location?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    mobile?: SortOrder
    email?: SortOrder
    linkedinUrl?: SortOrder
    twitterUrl?: SortOrder
    facebookUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SponsorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    logo?: SortOrder
    website?: SortOrder
    level?: SortOrder
    visible?: SortOrder
    eventId?: SortOrder
    location?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    mobile?: SortOrder
    email?: SortOrder
    linkedinUrl?: SortOrder
    twitterUrl?: SortOrder
    facebookUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type RegistrationScalarRelationFilter = {
    is?: RegistrationWhereInput
    isNot?: RegistrationWhereInput
  }

  export type Event_sessionsScalarRelationFilter = {
    is?: event_sessionsWhereInput
    isNot?: event_sessionsWhereInput
  }

  export type SessionParticipantSessionIdParticipantIdCompoundUniqueInput = {
    sessionId: string
    participantId: string
  }

  export type SessionParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    participantId?: SortOrder
    registeredAt?: SortOrder
    attendedSession?: SortOrder
    attendanceTime?: SortOrder
  }

  export type SessionParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    participantId?: SortOrder
    registeredAt?: SortOrder
    attendedSession?: SortOrder
    attendanceTime?: SortOrder
  }

  export type SessionParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    participantId?: SortOrder
    registeredAt?: SortOrder
    attendedSession?: SortOrder
    attendanceTime?: SortOrder
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    requesterId?: SortOrder
    recipientId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    proposedTime?: SortOrder
    confirmedTime?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    requesterId?: SortOrder
    recipientId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    proposedTime?: SortOrder
    confirmedTime?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    requesterId?: SortOrder
    recipientId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    proposedTime?: SortOrder
    confirmedTime?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OtpCodeCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    code?: SortOrder
    event_id?: SortOrder
    expires_at?: SortOrder
    used?: SortOrder
    created_at?: SortOrder
  }

  export type OtpCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    code?: SortOrder
    event_id?: SortOrder
    expires_at?: SortOrder
    used?: SortOrder
    created_at?: SortOrder
  }

  export type OtpCodeMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    code?: SortOrder
    event_id?: SortOrder
    expires_at?: SortOrder
    used?: SortOrder
    created_at?: SortOrder
  }

  export type BadgeCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    canvasData?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    canvasData?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BadgeMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    canvasData?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventNullableScalarRelationFilter = {
    is?: EventWhereInput | null
    isNot?: EventWhereInput | null
  }

  export type BadgeTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    canvasData?: SortOrder
    isGlobal?: SortOrder
    eventId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BadgeTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    canvasData?: SortOrder
    isGlobal?: SortOrder
    eventId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BadgeTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    canvasData?: SortOrder
    isGlobal?: SortOrder
    eventId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BadgeTemplateScalarRelationFilter = {
    is?: BadgeTemplateWhereInput
    isNot?: BadgeTemplateWhereInput
  }

  export type ParticipantBadgeRegistrationIdEventIdCompoundUniqueInput = {
    registrationId: string
    eventId: string
  }

  export type ParticipantBadgeCountOrderByAggregateInput = {
    id?: SortOrder
    registrationId?: SortOrder
    eventId?: SortOrder
    templateId?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    printedAt?: SortOrder
    deliveredAt?: SortOrder
    customData?: SortOrder
    qrCodeData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParticipantBadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    registrationId?: SortOrder
    eventId?: SortOrder
    templateId?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    printedAt?: SortOrder
    deliveredAt?: SortOrder
    customData?: SortOrder
    qrCodeData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParticipantBadgeMinOrderByAggregateInput = {
    id?: SortOrder
    registrationId?: SortOrder
    eventId?: SortOrder
    templateId?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    printedAt?: SortOrder
    deliveredAt?: SortOrder
    customData?: SortOrder
    qrCodeData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailLogListRelationFilter = {
    every?: EmailLogWhereInput
    some?: EmailLogWhereInput
    none?: EmailLogWhereInput
  }

  export type EmailLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailCampaignCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    recipientType?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    sentAt?: SortOrder
    totalRecipients?: SortOrder
    successCount?: SortOrder
    failureCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailCampaignAvgOrderByAggregateInput = {
    totalRecipients?: SortOrder
    successCount?: SortOrder
    failureCount?: SortOrder
  }

  export type EmailCampaignMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    recipientType?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    sentAt?: SortOrder
    totalRecipients?: SortOrder
    successCount?: SortOrder
    failureCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailCampaignMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    recipientType?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    sentAt?: SortOrder
    totalRecipients?: SortOrder
    successCount?: SortOrder
    failureCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailCampaignSumOrderByAggregateInput = {
    totalRecipients?: SortOrder
    successCount?: SortOrder
    failureCount?: SortOrder
  }

  export type EmailTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    type?: SortOrder
    category?: SortOrder
    isGlobal?: SortOrder
    eventId?: SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    type?: SortOrder
    category?: SortOrder
    isGlobal?: SortOrder
    eventId?: SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subject?: SortOrder
    htmlContent?: SortOrder
    textContent?: SortOrder
    type?: SortOrder
    category?: SortOrder
    isGlobal?: SortOrder
    eventId?: SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailCampaignScalarRelationFilter = {
    is?: EmailCampaignWhereInput
    isNot?: EmailCampaignWhereInput
  }

  export type EmailLogCountOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    recipientEmail?: SortOrder
    recipientName?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    openedAt?: SortOrder
    clickedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailLogMaxOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    recipientEmail?: SortOrder
    recipientName?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    openedAt?: SortOrder
    clickedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailLogMinOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    recipientEmail?: SortOrder
    recipientName?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    openedAt?: SortOrder
    clickedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    participantId?: SortOrder
    action?: SortOrder
    points?: SortOrder
    actionDetails?: SortOrder
    relatedEntityId?: SortOrder
    createdAt?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    points?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    participantId?: SortOrder
    action?: SortOrder
    points?: SortOrder
    actionDetails?: SortOrder
    relatedEntityId?: SortOrder
    createdAt?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    participantId?: SortOrder
    action?: SortOrder
    points?: SortOrder
    actionDetails?: SortOrder
    relatedEntityId?: SortOrder
    createdAt?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    points?: SortOrder
  }

  export type UserEventScoreEventIdParticipantIdCompoundUniqueInput = {
    eventId: string
    participantId: string
  }

  export type UserEventScoreCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    participantId?: SortOrder
    totalPoints?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type UserEventScoreAvgOrderByAggregateInput = {
    totalPoints?: SortOrder
  }

  export type UserEventScoreMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    participantId?: SortOrder
    totalPoints?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type UserEventScoreMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    participantId?: SortOrder
    totalPoints?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type UserEventScoreSumOrderByAggregateInput = {
    totalPoints?: SortOrder
  }

  export type UserMatchProfileUserIdEventIdCompoundUniqueInput = {
    userId: string
    eventId: string
  }

  export type UserMatchProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    headline?: SortOrder
    bio?: SortOrder
    jobTitle?: SortOrder
    company?: SortOrder
    interests?: SortOrder
    goals?: SortOrder
    availability?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMatchProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    headline?: SortOrder
    bio?: SortOrder
    jobTitle?: SortOrder
    company?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMatchProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventId?: SortOrder
    headline?: SortOrder
    bio?: SortOrder
    jobTitle?: SortOrder
    company?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type MatchSuggestionUserIdSuggestedIdEventIdCompoundUniqueInput = {
    userId: string
    suggestedId: string
    eventId: string
  }

  export type MatchSuggestionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    suggestedId?: SortOrder
    eventId?: SortOrder
    score?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchSuggestionAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type MatchSuggestionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    suggestedId?: SortOrder
    eventId?: SortOrder
    score?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchSuggestionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    suggestedId?: SortOrder
    eventId?: SortOrder
    score?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchSuggestionSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserCreatepermissionsInput = {
    set: string[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutUserInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type MatchSuggestionCreateNestedManyWithoutSuggestedInput = {
    create?: XOR<MatchSuggestionCreateWithoutSuggestedInput, MatchSuggestionUncheckedCreateWithoutSuggestedInput> | MatchSuggestionCreateWithoutSuggestedInput[] | MatchSuggestionUncheckedCreateWithoutSuggestedInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutSuggestedInput | MatchSuggestionCreateOrConnectWithoutSuggestedInput[]
    createMany?: MatchSuggestionCreateManySuggestedInputEnvelope
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
  }

  export type MatchSuggestionCreateNestedManyWithoutUserInput = {
    create?: XOR<MatchSuggestionCreateWithoutUserInput, MatchSuggestionUncheckedCreateWithoutUserInput> | MatchSuggestionCreateWithoutUserInput[] | MatchSuggestionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutUserInput | MatchSuggestionCreateOrConnectWithoutUserInput[]
    createMany?: MatchSuggestionCreateManyUserInputEnvelope
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserMatchProfileCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMatchProfileCreateWithoutUserInput, UserMatchProfileUncheckedCreateWithoutUserInput> | UserMatchProfileCreateWithoutUserInput[] | UserMatchProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMatchProfileCreateOrConnectWithoutUserInput | UserMatchProfileCreateOrConnectWithoutUserInput[]
    createMany?: UserMatchProfileCreateManyUserInputEnvelope
    connect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type MatchSuggestionUncheckedCreateNestedManyWithoutSuggestedInput = {
    create?: XOR<MatchSuggestionCreateWithoutSuggestedInput, MatchSuggestionUncheckedCreateWithoutSuggestedInput> | MatchSuggestionCreateWithoutSuggestedInput[] | MatchSuggestionUncheckedCreateWithoutSuggestedInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutSuggestedInput | MatchSuggestionCreateOrConnectWithoutSuggestedInput[]
    createMany?: MatchSuggestionCreateManySuggestedInputEnvelope
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
  }

  export type MatchSuggestionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MatchSuggestionCreateWithoutUserInput, MatchSuggestionUncheckedCreateWithoutUserInput> | MatchSuggestionCreateWithoutUserInput[] | MatchSuggestionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutUserInput | MatchSuggestionCreateOrConnectWithoutUserInput[]
    createMany?: MatchSuggestionCreateManyUserInputEnvelope
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserMatchProfileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMatchProfileCreateWithoutUserInput, UserMatchProfileUncheckedCreateWithoutUserInput> | UserMatchProfileCreateWithoutUserInput[] | UserMatchProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMatchProfileCreateOrConnectWithoutUserInput | UserMatchProfileCreateOrConnectWithoutUserInput[]
    createMany?: UserMatchProfileCreateManyUserInputEnvelope
    connect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdatepermissionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type EventUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutUserInput | EventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutUserInput | EventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventUpdateManyWithWhereWithoutUserInput | EventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type MatchSuggestionUpdateManyWithoutSuggestedNestedInput = {
    create?: XOR<MatchSuggestionCreateWithoutSuggestedInput, MatchSuggestionUncheckedCreateWithoutSuggestedInput> | MatchSuggestionCreateWithoutSuggestedInput[] | MatchSuggestionUncheckedCreateWithoutSuggestedInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutSuggestedInput | MatchSuggestionCreateOrConnectWithoutSuggestedInput[]
    upsert?: MatchSuggestionUpsertWithWhereUniqueWithoutSuggestedInput | MatchSuggestionUpsertWithWhereUniqueWithoutSuggestedInput[]
    createMany?: MatchSuggestionCreateManySuggestedInputEnvelope
    set?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    disconnect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    delete?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    update?: MatchSuggestionUpdateWithWhereUniqueWithoutSuggestedInput | MatchSuggestionUpdateWithWhereUniqueWithoutSuggestedInput[]
    updateMany?: MatchSuggestionUpdateManyWithWhereWithoutSuggestedInput | MatchSuggestionUpdateManyWithWhereWithoutSuggestedInput[]
    deleteMany?: MatchSuggestionScalarWhereInput | MatchSuggestionScalarWhereInput[]
  }

  export type MatchSuggestionUpdateManyWithoutUserNestedInput = {
    create?: XOR<MatchSuggestionCreateWithoutUserInput, MatchSuggestionUncheckedCreateWithoutUserInput> | MatchSuggestionCreateWithoutUserInput[] | MatchSuggestionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutUserInput | MatchSuggestionCreateOrConnectWithoutUserInput[]
    upsert?: MatchSuggestionUpsertWithWhereUniqueWithoutUserInput | MatchSuggestionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MatchSuggestionCreateManyUserInputEnvelope
    set?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    disconnect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    delete?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    update?: MatchSuggestionUpdateWithWhereUniqueWithoutUserInput | MatchSuggestionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MatchSuggestionUpdateManyWithWhereWithoutUserInput | MatchSuggestionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MatchSuggestionScalarWhereInput | MatchSuggestionScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserMatchProfileUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMatchProfileCreateWithoutUserInput, UserMatchProfileUncheckedCreateWithoutUserInput> | UserMatchProfileCreateWithoutUserInput[] | UserMatchProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMatchProfileCreateOrConnectWithoutUserInput | UserMatchProfileCreateOrConnectWithoutUserInput[]
    upsert?: UserMatchProfileUpsertWithWhereUniqueWithoutUserInput | UserMatchProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMatchProfileCreateManyUserInputEnvelope
    set?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    disconnect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    delete?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    connect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    update?: UserMatchProfileUpdateWithWhereUniqueWithoutUserInput | UserMatchProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMatchProfileUpdateManyWithWhereWithoutUserInput | UserMatchProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMatchProfileScalarWhereInput | UserMatchProfileScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutUserInput | EventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutUserInput | EventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventUpdateManyWithWhereWithoutUserInput | EventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type MatchSuggestionUncheckedUpdateManyWithoutSuggestedNestedInput = {
    create?: XOR<MatchSuggestionCreateWithoutSuggestedInput, MatchSuggestionUncheckedCreateWithoutSuggestedInput> | MatchSuggestionCreateWithoutSuggestedInput[] | MatchSuggestionUncheckedCreateWithoutSuggestedInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutSuggestedInput | MatchSuggestionCreateOrConnectWithoutSuggestedInput[]
    upsert?: MatchSuggestionUpsertWithWhereUniqueWithoutSuggestedInput | MatchSuggestionUpsertWithWhereUniqueWithoutSuggestedInput[]
    createMany?: MatchSuggestionCreateManySuggestedInputEnvelope
    set?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    disconnect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    delete?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    update?: MatchSuggestionUpdateWithWhereUniqueWithoutSuggestedInput | MatchSuggestionUpdateWithWhereUniqueWithoutSuggestedInput[]
    updateMany?: MatchSuggestionUpdateManyWithWhereWithoutSuggestedInput | MatchSuggestionUpdateManyWithWhereWithoutSuggestedInput[]
    deleteMany?: MatchSuggestionScalarWhereInput | MatchSuggestionScalarWhereInput[]
  }

  export type MatchSuggestionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MatchSuggestionCreateWithoutUserInput, MatchSuggestionUncheckedCreateWithoutUserInput> | MatchSuggestionCreateWithoutUserInput[] | MatchSuggestionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutUserInput | MatchSuggestionCreateOrConnectWithoutUserInput[]
    upsert?: MatchSuggestionUpsertWithWhereUniqueWithoutUserInput | MatchSuggestionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MatchSuggestionCreateManyUserInputEnvelope
    set?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    disconnect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    delete?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    update?: MatchSuggestionUpdateWithWhereUniqueWithoutUserInput | MatchSuggestionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MatchSuggestionUpdateManyWithWhereWithoutUserInput | MatchSuggestionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MatchSuggestionScalarWhereInput | MatchSuggestionScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserMatchProfileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMatchProfileCreateWithoutUserInput, UserMatchProfileUncheckedCreateWithoutUserInput> | UserMatchProfileCreateWithoutUserInput[] | UserMatchProfileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMatchProfileCreateOrConnectWithoutUserInput | UserMatchProfileCreateOrConnectWithoutUserInput[]
    upsert?: UserMatchProfileUpsertWithWhereUniqueWithoutUserInput | UserMatchProfileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMatchProfileCreateManyUserInputEnvelope
    set?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    disconnect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    delete?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    connect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    update?: UserMatchProfileUpdateWithWhereUniqueWithoutUserInput | UserMatchProfileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMatchProfileUpdateManyWithWhereWithoutUserInput | UserMatchProfileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMatchProfileScalarWhereInput | UserMatchProfileScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AppointmentCreateNestedManyWithoutEventInput = {
    create?: XOR<AppointmentCreateWithoutEventInput, AppointmentUncheckedCreateWithoutEventInput> | AppointmentCreateWithoutEventInput[] | AppointmentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutEventInput | AppointmentCreateOrConnectWithoutEventInput[]
    createMany?: AppointmentCreateManyEventInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type BadgeTemplateCreateNestedManyWithoutEventInput = {
    create?: XOR<BadgeTemplateCreateWithoutEventInput, BadgeTemplateUncheckedCreateWithoutEventInput> | BadgeTemplateCreateWithoutEventInput[] | BadgeTemplateUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BadgeTemplateCreateOrConnectWithoutEventInput | BadgeTemplateCreateOrConnectWithoutEventInput[]
    createMany?: BadgeTemplateCreateManyEventInputEnvelope
    connect?: BadgeTemplateWhereUniqueInput | BadgeTemplateWhereUniqueInput[]
  }

  export type BadgeCreateNestedManyWithoutEventInput = {
    create?: XOR<BadgeCreateWithoutEventInput, BadgeUncheckedCreateWithoutEventInput> | BadgeCreateWithoutEventInput[] | BadgeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BadgeCreateOrConnectWithoutEventInput | BadgeCreateOrConnectWithoutEventInput[]
    createMany?: BadgeCreateManyEventInputEnvelope
    connect?: BadgeWhereUniqueInput | BadgeWhereUniqueInput[]
  }

  export type EmailCampaignCreateNestedManyWithoutEventInput = {
    create?: XOR<EmailCampaignCreateWithoutEventInput, EmailCampaignUncheckedCreateWithoutEventInput> | EmailCampaignCreateWithoutEventInput[] | EmailCampaignUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutEventInput | EmailCampaignCreateOrConnectWithoutEventInput[]
    createMany?: EmailCampaignCreateManyEventInputEnvelope
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
  }

  export type EmailTemplateCreateNestedManyWithoutEventInput = {
    create?: XOR<EmailTemplateCreateWithoutEventInput, EmailTemplateUncheckedCreateWithoutEventInput> | EmailTemplateCreateWithoutEventInput[] | EmailTemplateUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailTemplateCreateOrConnectWithoutEventInput | EmailTemplateCreateOrConnectWithoutEventInput[]
    createMany?: EmailTemplateCreateManyEventInputEnvelope
    connect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
  }

  export type event_sessionsCreateNestedManyWithoutEventsInput = {
    create?: XOR<event_sessionsCreateWithoutEventsInput, event_sessionsUncheckedCreateWithoutEventsInput> | event_sessionsCreateWithoutEventsInput[] | event_sessionsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: event_sessionsCreateOrConnectWithoutEventsInput | event_sessionsCreateOrConnectWithoutEventsInput[]
    createMany?: event_sessionsCreateManyEventsInputEnvelope
    connect?: event_sessionsWhereUniqueInput | event_sessionsWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutEventsInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    connect?: UserWhereUniqueInput
  }

  export type GameCreateNestedManyWithoutEventInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type MatchSuggestionCreateNestedManyWithoutEventInput = {
    create?: XOR<MatchSuggestionCreateWithoutEventInput, MatchSuggestionUncheckedCreateWithoutEventInput> | MatchSuggestionCreateWithoutEventInput[] | MatchSuggestionUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutEventInput | MatchSuggestionCreateOrConnectWithoutEventInput[]
    createMany?: MatchSuggestionCreateManyEventInputEnvelope
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
  }

  export type ParticipantBadgeCreateNestedManyWithoutEventInput = {
    create?: XOR<ParticipantBadgeCreateWithoutEventInput, ParticipantBadgeUncheckedCreateWithoutEventInput> | ParticipantBadgeCreateWithoutEventInput[] | ParticipantBadgeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutEventInput | ParticipantBadgeCreateOrConnectWithoutEventInput[]
    createMany?: ParticipantBadgeCreateManyEventInputEnvelope
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
  }

  export type RegistrationCreateNestedManyWithoutEventInput = {
    create?: XOR<RegistrationCreateWithoutEventInput, RegistrationUncheckedCreateWithoutEventInput> | RegistrationCreateWithoutEventInput[] | RegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutEventInput | RegistrationCreateOrConnectWithoutEventInput[]
    createMany?: RegistrationCreateManyEventInputEnvelope
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
  }

  export type SponsorCreateNestedManyWithoutEventInput = {
    create?: XOR<SponsorCreateWithoutEventInput, SponsorUncheckedCreateWithoutEventInput> | SponsorCreateWithoutEventInput[] | SponsorUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SponsorCreateOrConnectWithoutEventInput | SponsorCreateOrConnectWithoutEventInput[]
    createMany?: SponsorCreateManyEventInputEnvelope
    connect?: SponsorWhereUniqueInput | SponsorWhereUniqueInput[]
  }

  export type TicketCreateNestedManyWithoutEventInput = {
    create?: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput> | TicketCreateWithoutEventInput[] | TicketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutEventInput | TicketCreateOrConnectWithoutEventInput[]
    createMany?: TicketCreateManyEventInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type UserEventScoreCreateNestedManyWithoutEventInput = {
    create?: XOR<UserEventScoreCreateWithoutEventInput, UserEventScoreUncheckedCreateWithoutEventInput> | UserEventScoreCreateWithoutEventInput[] | UserEventScoreUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UserEventScoreCreateOrConnectWithoutEventInput | UserEventScoreCreateOrConnectWithoutEventInput[]
    createMany?: UserEventScoreCreateManyEventInputEnvelope
    connect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
  }

  export type UserMatchProfileCreateNestedManyWithoutEventInput = {
    create?: XOR<UserMatchProfileCreateWithoutEventInput, UserMatchProfileUncheckedCreateWithoutEventInput> | UserMatchProfileCreateWithoutEventInput[] | UserMatchProfileUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UserMatchProfileCreateOrConnectWithoutEventInput | UserMatchProfileCreateOrConnectWithoutEventInput[]
    createMany?: UserMatchProfileCreateManyEventInputEnvelope
    connect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<AppointmentCreateWithoutEventInput, AppointmentUncheckedCreateWithoutEventInput> | AppointmentCreateWithoutEventInput[] | AppointmentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutEventInput | AppointmentCreateOrConnectWithoutEventInput[]
    createMany?: AppointmentCreateManyEventInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type BadgeTemplateUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<BadgeTemplateCreateWithoutEventInput, BadgeTemplateUncheckedCreateWithoutEventInput> | BadgeTemplateCreateWithoutEventInput[] | BadgeTemplateUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BadgeTemplateCreateOrConnectWithoutEventInput | BadgeTemplateCreateOrConnectWithoutEventInput[]
    createMany?: BadgeTemplateCreateManyEventInputEnvelope
    connect?: BadgeTemplateWhereUniqueInput | BadgeTemplateWhereUniqueInput[]
  }

  export type BadgeUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<BadgeCreateWithoutEventInput, BadgeUncheckedCreateWithoutEventInput> | BadgeCreateWithoutEventInput[] | BadgeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BadgeCreateOrConnectWithoutEventInput | BadgeCreateOrConnectWithoutEventInput[]
    createMany?: BadgeCreateManyEventInputEnvelope
    connect?: BadgeWhereUniqueInput | BadgeWhereUniqueInput[]
  }

  export type EmailCampaignUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EmailCampaignCreateWithoutEventInput, EmailCampaignUncheckedCreateWithoutEventInput> | EmailCampaignCreateWithoutEventInput[] | EmailCampaignUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutEventInput | EmailCampaignCreateOrConnectWithoutEventInput[]
    createMany?: EmailCampaignCreateManyEventInputEnvelope
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
  }

  export type EmailTemplateUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EmailTemplateCreateWithoutEventInput, EmailTemplateUncheckedCreateWithoutEventInput> | EmailTemplateCreateWithoutEventInput[] | EmailTemplateUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailTemplateCreateOrConnectWithoutEventInput | EmailTemplateCreateOrConnectWithoutEventInput[]
    createMany?: EmailTemplateCreateManyEventInputEnvelope
    connect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
  }

  export type event_sessionsUncheckedCreateNestedManyWithoutEventsInput = {
    create?: XOR<event_sessionsCreateWithoutEventsInput, event_sessionsUncheckedCreateWithoutEventsInput> | event_sessionsCreateWithoutEventsInput[] | event_sessionsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: event_sessionsCreateOrConnectWithoutEventsInput | event_sessionsCreateOrConnectWithoutEventsInput[]
    createMany?: event_sessionsCreateManyEventsInputEnvelope
    connect?: event_sessionsWhereUniqueInput | event_sessionsWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type MatchSuggestionUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<MatchSuggestionCreateWithoutEventInput, MatchSuggestionUncheckedCreateWithoutEventInput> | MatchSuggestionCreateWithoutEventInput[] | MatchSuggestionUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutEventInput | MatchSuggestionCreateOrConnectWithoutEventInput[]
    createMany?: MatchSuggestionCreateManyEventInputEnvelope
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
  }

  export type ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<ParticipantBadgeCreateWithoutEventInput, ParticipantBadgeUncheckedCreateWithoutEventInput> | ParticipantBadgeCreateWithoutEventInput[] | ParticipantBadgeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutEventInput | ParticipantBadgeCreateOrConnectWithoutEventInput[]
    createMany?: ParticipantBadgeCreateManyEventInputEnvelope
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
  }

  export type RegistrationUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<RegistrationCreateWithoutEventInput, RegistrationUncheckedCreateWithoutEventInput> | RegistrationCreateWithoutEventInput[] | RegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutEventInput | RegistrationCreateOrConnectWithoutEventInput[]
    createMany?: RegistrationCreateManyEventInputEnvelope
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
  }

  export type SponsorUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<SponsorCreateWithoutEventInput, SponsorUncheckedCreateWithoutEventInput> | SponsorCreateWithoutEventInput[] | SponsorUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SponsorCreateOrConnectWithoutEventInput | SponsorCreateOrConnectWithoutEventInput[]
    createMany?: SponsorCreateManyEventInputEnvelope
    connect?: SponsorWhereUniqueInput | SponsorWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput> | TicketCreateWithoutEventInput[] | TicketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutEventInput | TicketCreateOrConnectWithoutEventInput[]
    createMany?: TicketCreateManyEventInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type UserEventScoreUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<UserEventScoreCreateWithoutEventInput, UserEventScoreUncheckedCreateWithoutEventInput> | UserEventScoreCreateWithoutEventInput[] | UserEventScoreUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UserEventScoreCreateOrConnectWithoutEventInput | UserEventScoreCreateOrConnectWithoutEventInput[]
    createMany?: UserEventScoreCreateManyEventInputEnvelope
    connect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
  }

  export type UserMatchProfileUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<UserMatchProfileCreateWithoutEventInput, UserMatchProfileUncheckedCreateWithoutEventInput> | UserMatchProfileCreateWithoutEventInput[] | UserMatchProfileUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UserMatchProfileCreateOrConnectWithoutEventInput | UserMatchProfileCreateOrConnectWithoutEventInput[]
    createMany?: UserMatchProfileCreateManyEventInputEnvelope
    connect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AppointmentUpdateManyWithoutEventNestedInput = {
    create?: XOR<AppointmentCreateWithoutEventInput, AppointmentUncheckedCreateWithoutEventInput> | AppointmentCreateWithoutEventInput[] | AppointmentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutEventInput | AppointmentCreateOrConnectWithoutEventInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutEventInput | AppointmentUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AppointmentCreateManyEventInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutEventInput | AppointmentUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutEventInput | AppointmentUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type BadgeTemplateUpdateManyWithoutEventNestedInput = {
    create?: XOR<BadgeTemplateCreateWithoutEventInput, BadgeTemplateUncheckedCreateWithoutEventInput> | BadgeTemplateCreateWithoutEventInput[] | BadgeTemplateUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BadgeTemplateCreateOrConnectWithoutEventInput | BadgeTemplateCreateOrConnectWithoutEventInput[]
    upsert?: BadgeTemplateUpsertWithWhereUniqueWithoutEventInput | BadgeTemplateUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: BadgeTemplateCreateManyEventInputEnvelope
    set?: BadgeTemplateWhereUniqueInput | BadgeTemplateWhereUniqueInput[]
    disconnect?: BadgeTemplateWhereUniqueInput | BadgeTemplateWhereUniqueInput[]
    delete?: BadgeTemplateWhereUniqueInput | BadgeTemplateWhereUniqueInput[]
    connect?: BadgeTemplateWhereUniqueInput | BadgeTemplateWhereUniqueInput[]
    update?: BadgeTemplateUpdateWithWhereUniqueWithoutEventInput | BadgeTemplateUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: BadgeTemplateUpdateManyWithWhereWithoutEventInput | BadgeTemplateUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: BadgeTemplateScalarWhereInput | BadgeTemplateScalarWhereInput[]
  }

  export type BadgeUpdateManyWithoutEventNestedInput = {
    create?: XOR<BadgeCreateWithoutEventInput, BadgeUncheckedCreateWithoutEventInput> | BadgeCreateWithoutEventInput[] | BadgeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BadgeCreateOrConnectWithoutEventInput | BadgeCreateOrConnectWithoutEventInput[]
    upsert?: BadgeUpsertWithWhereUniqueWithoutEventInput | BadgeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: BadgeCreateManyEventInputEnvelope
    set?: BadgeWhereUniqueInput | BadgeWhereUniqueInput[]
    disconnect?: BadgeWhereUniqueInput | BadgeWhereUniqueInput[]
    delete?: BadgeWhereUniqueInput | BadgeWhereUniqueInput[]
    connect?: BadgeWhereUniqueInput | BadgeWhereUniqueInput[]
    update?: BadgeUpdateWithWhereUniqueWithoutEventInput | BadgeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: BadgeUpdateManyWithWhereWithoutEventInput | BadgeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: BadgeScalarWhereInput | BadgeScalarWhereInput[]
  }

  export type EmailCampaignUpdateManyWithoutEventNestedInput = {
    create?: XOR<EmailCampaignCreateWithoutEventInput, EmailCampaignUncheckedCreateWithoutEventInput> | EmailCampaignCreateWithoutEventInput[] | EmailCampaignUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutEventInput | EmailCampaignCreateOrConnectWithoutEventInput[]
    upsert?: EmailCampaignUpsertWithWhereUniqueWithoutEventInput | EmailCampaignUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EmailCampaignCreateManyEventInputEnvelope
    set?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    disconnect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    delete?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    update?: EmailCampaignUpdateWithWhereUniqueWithoutEventInput | EmailCampaignUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EmailCampaignUpdateManyWithWhereWithoutEventInput | EmailCampaignUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EmailCampaignScalarWhereInput | EmailCampaignScalarWhereInput[]
  }

  export type EmailTemplateUpdateManyWithoutEventNestedInput = {
    create?: XOR<EmailTemplateCreateWithoutEventInput, EmailTemplateUncheckedCreateWithoutEventInput> | EmailTemplateCreateWithoutEventInput[] | EmailTemplateUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailTemplateCreateOrConnectWithoutEventInput | EmailTemplateCreateOrConnectWithoutEventInput[]
    upsert?: EmailTemplateUpsertWithWhereUniqueWithoutEventInput | EmailTemplateUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EmailTemplateCreateManyEventInputEnvelope
    set?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    disconnect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    delete?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    connect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    update?: EmailTemplateUpdateWithWhereUniqueWithoutEventInput | EmailTemplateUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EmailTemplateUpdateManyWithWhereWithoutEventInput | EmailTemplateUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EmailTemplateScalarWhereInput | EmailTemplateScalarWhereInput[]
  }

  export type event_sessionsUpdateManyWithoutEventsNestedInput = {
    create?: XOR<event_sessionsCreateWithoutEventsInput, event_sessionsUncheckedCreateWithoutEventsInput> | event_sessionsCreateWithoutEventsInput[] | event_sessionsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: event_sessionsCreateOrConnectWithoutEventsInput | event_sessionsCreateOrConnectWithoutEventsInput[]
    upsert?: event_sessionsUpsertWithWhereUniqueWithoutEventsInput | event_sessionsUpsertWithWhereUniqueWithoutEventsInput[]
    createMany?: event_sessionsCreateManyEventsInputEnvelope
    set?: event_sessionsWhereUniqueInput | event_sessionsWhereUniqueInput[]
    disconnect?: event_sessionsWhereUniqueInput | event_sessionsWhereUniqueInput[]
    delete?: event_sessionsWhereUniqueInput | event_sessionsWhereUniqueInput[]
    connect?: event_sessionsWhereUniqueInput | event_sessionsWhereUniqueInput[]
    update?: event_sessionsUpdateWithWhereUniqueWithoutEventsInput | event_sessionsUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: event_sessionsUpdateManyWithWhereWithoutEventsInput | event_sessionsUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: event_sessionsScalarWhereInput | event_sessionsScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    upsert?: UserUpsertWithoutEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventsInput, UserUpdateWithoutEventsInput>, UserUncheckedUpdateWithoutEventsInput>
  }

  export type GameUpdateManyWithoutEventNestedInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutEventInput | GameUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutEventInput | GameUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: GameUpdateManyWithWhereWithoutEventInput | GameUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type MatchSuggestionUpdateManyWithoutEventNestedInput = {
    create?: XOR<MatchSuggestionCreateWithoutEventInput, MatchSuggestionUncheckedCreateWithoutEventInput> | MatchSuggestionCreateWithoutEventInput[] | MatchSuggestionUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutEventInput | MatchSuggestionCreateOrConnectWithoutEventInput[]
    upsert?: MatchSuggestionUpsertWithWhereUniqueWithoutEventInput | MatchSuggestionUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: MatchSuggestionCreateManyEventInputEnvelope
    set?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    disconnect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    delete?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    update?: MatchSuggestionUpdateWithWhereUniqueWithoutEventInput | MatchSuggestionUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: MatchSuggestionUpdateManyWithWhereWithoutEventInput | MatchSuggestionUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: MatchSuggestionScalarWhereInput | MatchSuggestionScalarWhereInput[]
  }

  export type ParticipantBadgeUpdateManyWithoutEventNestedInput = {
    create?: XOR<ParticipantBadgeCreateWithoutEventInput, ParticipantBadgeUncheckedCreateWithoutEventInput> | ParticipantBadgeCreateWithoutEventInput[] | ParticipantBadgeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutEventInput | ParticipantBadgeCreateOrConnectWithoutEventInput[]
    upsert?: ParticipantBadgeUpsertWithWhereUniqueWithoutEventInput | ParticipantBadgeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ParticipantBadgeCreateManyEventInputEnvelope
    set?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    disconnect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    delete?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    update?: ParticipantBadgeUpdateWithWhereUniqueWithoutEventInput | ParticipantBadgeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ParticipantBadgeUpdateManyWithWhereWithoutEventInput | ParticipantBadgeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ParticipantBadgeScalarWhereInput | ParticipantBadgeScalarWhereInput[]
  }

  export type RegistrationUpdateManyWithoutEventNestedInput = {
    create?: XOR<RegistrationCreateWithoutEventInput, RegistrationUncheckedCreateWithoutEventInput> | RegistrationCreateWithoutEventInput[] | RegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutEventInput | RegistrationCreateOrConnectWithoutEventInput[]
    upsert?: RegistrationUpsertWithWhereUniqueWithoutEventInput | RegistrationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: RegistrationCreateManyEventInputEnvelope
    set?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    disconnect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    delete?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    update?: RegistrationUpdateWithWhereUniqueWithoutEventInput | RegistrationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: RegistrationUpdateManyWithWhereWithoutEventInput | RegistrationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
  }

  export type SponsorUpdateManyWithoutEventNestedInput = {
    create?: XOR<SponsorCreateWithoutEventInput, SponsorUncheckedCreateWithoutEventInput> | SponsorCreateWithoutEventInput[] | SponsorUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SponsorCreateOrConnectWithoutEventInput | SponsorCreateOrConnectWithoutEventInput[]
    upsert?: SponsorUpsertWithWhereUniqueWithoutEventInput | SponsorUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: SponsorCreateManyEventInputEnvelope
    set?: SponsorWhereUniqueInput | SponsorWhereUniqueInput[]
    disconnect?: SponsorWhereUniqueInput | SponsorWhereUniqueInput[]
    delete?: SponsorWhereUniqueInput | SponsorWhereUniqueInput[]
    connect?: SponsorWhereUniqueInput | SponsorWhereUniqueInput[]
    update?: SponsorUpdateWithWhereUniqueWithoutEventInput | SponsorUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: SponsorUpdateManyWithWhereWithoutEventInput | SponsorUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: SponsorScalarWhereInput | SponsorScalarWhereInput[]
  }

  export type TicketUpdateManyWithoutEventNestedInput = {
    create?: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput> | TicketCreateWithoutEventInput[] | TicketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutEventInput | TicketCreateOrConnectWithoutEventInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutEventInput | TicketUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: TicketCreateManyEventInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutEventInput | TicketUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutEventInput | TicketUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type UserEventScoreUpdateManyWithoutEventNestedInput = {
    create?: XOR<UserEventScoreCreateWithoutEventInput, UserEventScoreUncheckedCreateWithoutEventInput> | UserEventScoreCreateWithoutEventInput[] | UserEventScoreUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UserEventScoreCreateOrConnectWithoutEventInput | UserEventScoreCreateOrConnectWithoutEventInput[]
    upsert?: UserEventScoreUpsertWithWhereUniqueWithoutEventInput | UserEventScoreUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: UserEventScoreCreateManyEventInputEnvelope
    set?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    disconnect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    delete?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    connect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    update?: UserEventScoreUpdateWithWhereUniqueWithoutEventInput | UserEventScoreUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: UserEventScoreUpdateManyWithWhereWithoutEventInput | UserEventScoreUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: UserEventScoreScalarWhereInput | UserEventScoreScalarWhereInput[]
  }

  export type UserMatchProfileUpdateManyWithoutEventNestedInput = {
    create?: XOR<UserMatchProfileCreateWithoutEventInput, UserMatchProfileUncheckedCreateWithoutEventInput> | UserMatchProfileCreateWithoutEventInput[] | UserMatchProfileUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UserMatchProfileCreateOrConnectWithoutEventInput | UserMatchProfileCreateOrConnectWithoutEventInput[]
    upsert?: UserMatchProfileUpsertWithWhereUniqueWithoutEventInput | UserMatchProfileUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: UserMatchProfileCreateManyEventInputEnvelope
    set?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    disconnect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    delete?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    connect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    update?: UserMatchProfileUpdateWithWhereUniqueWithoutEventInput | UserMatchProfileUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: UserMatchProfileUpdateManyWithWhereWithoutEventInput | UserMatchProfileUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: UserMatchProfileScalarWhereInput | UserMatchProfileScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<AppointmentCreateWithoutEventInput, AppointmentUncheckedCreateWithoutEventInput> | AppointmentCreateWithoutEventInput[] | AppointmentUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutEventInput | AppointmentCreateOrConnectWithoutEventInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutEventInput | AppointmentUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AppointmentCreateManyEventInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutEventInput | AppointmentUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutEventInput | AppointmentUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<BadgeTemplateCreateWithoutEventInput, BadgeTemplateUncheckedCreateWithoutEventInput> | BadgeTemplateCreateWithoutEventInput[] | BadgeTemplateUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BadgeTemplateCreateOrConnectWithoutEventInput | BadgeTemplateCreateOrConnectWithoutEventInput[]
    upsert?: BadgeTemplateUpsertWithWhereUniqueWithoutEventInput | BadgeTemplateUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: BadgeTemplateCreateManyEventInputEnvelope
    set?: BadgeTemplateWhereUniqueInput | BadgeTemplateWhereUniqueInput[]
    disconnect?: BadgeTemplateWhereUniqueInput | BadgeTemplateWhereUniqueInput[]
    delete?: BadgeTemplateWhereUniqueInput | BadgeTemplateWhereUniqueInput[]
    connect?: BadgeTemplateWhereUniqueInput | BadgeTemplateWhereUniqueInput[]
    update?: BadgeTemplateUpdateWithWhereUniqueWithoutEventInput | BadgeTemplateUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: BadgeTemplateUpdateManyWithWhereWithoutEventInput | BadgeTemplateUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: BadgeTemplateScalarWhereInput | BadgeTemplateScalarWhereInput[]
  }

  export type BadgeUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<BadgeCreateWithoutEventInput, BadgeUncheckedCreateWithoutEventInput> | BadgeCreateWithoutEventInput[] | BadgeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BadgeCreateOrConnectWithoutEventInput | BadgeCreateOrConnectWithoutEventInput[]
    upsert?: BadgeUpsertWithWhereUniqueWithoutEventInput | BadgeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: BadgeCreateManyEventInputEnvelope
    set?: BadgeWhereUniqueInput | BadgeWhereUniqueInput[]
    disconnect?: BadgeWhereUniqueInput | BadgeWhereUniqueInput[]
    delete?: BadgeWhereUniqueInput | BadgeWhereUniqueInput[]
    connect?: BadgeWhereUniqueInput | BadgeWhereUniqueInput[]
    update?: BadgeUpdateWithWhereUniqueWithoutEventInput | BadgeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: BadgeUpdateManyWithWhereWithoutEventInput | BadgeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: BadgeScalarWhereInput | BadgeScalarWhereInput[]
  }

  export type EmailCampaignUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EmailCampaignCreateWithoutEventInput, EmailCampaignUncheckedCreateWithoutEventInput> | EmailCampaignCreateWithoutEventInput[] | EmailCampaignUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutEventInput | EmailCampaignCreateOrConnectWithoutEventInput[]
    upsert?: EmailCampaignUpsertWithWhereUniqueWithoutEventInput | EmailCampaignUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EmailCampaignCreateManyEventInputEnvelope
    set?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    disconnect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    delete?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    update?: EmailCampaignUpdateWithWhereUniqueWithoutEventInput | EmailCampaignUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EmailCampaignUpdateManyWithWhereWithoutEventInput | EmailCampaignUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EmailCampaignScalarWhereInput | EmailCampaignScalarWhereInput[]
  }

  export type EmailTemplateUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EmailTemplateCreateWithoutEventInput, EmailTemplateUncheckedCreateWithoutEventInput> | EmailTemplateCreateWithoutEventInput[] | EmailTemplateUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EmailTemplateCreateOrConnectWithoutEventInput | EmailTemplateCreateOrConnectWithoutEventInput[]
    upsert?: EmailTemplateUpsertWithWhereUniqueWithoutEventInput | EmailTemplateUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EmailTemplateCreateManyEventInputEnvelope
    set?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    disconnect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    delete?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    connect?: EmailTemplateWhereUniqueInput | EmailTemplateWhereUniqueInput[]
    update?: EmailTemplateUpdateWithWhereUniqueWithoutEventInput | EmailTemplateUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EmailTemplateUpdateManyWithWhereWithoutEventInput | EmailTemplateUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EmailTemplateScalarWhereInput | EmailTemplateScalarWhereInput[]
  }

  export type event_sessionsUncheckedUpdateManyWithoutEventsNestedInput = {
    create?: XOR<event_sessionsCreateWithoutEventsInput, event_sessionsUncheckedCreateWithoutEventsInput> | event_sessionsCreateWithoutEventsInput[] | event_sessionsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: event_sessionsCreateOrConnectWithoutEventsInput | event_sessionsCreateOrConnectWithoutEventsInput[]
    upsert?: event_sessionsUpsertWithWhereUniqueWithoutEventsInput | event_sessionsUpsertWithWhereUniqueWithoutEventsInput[]
    createMany?: event_sessionsCreateManyEventsInputEnvelope
    set?: event_sessionsWhereUniqueInput | event_sessionsWhereUniqueInput[]
    disconnect?: event_sessionsWhereUniqueInput | event_sessionsWhereUniqueInput[]
    delete?: event_sessionsWhereUniqueInput | event_sessionsWhereUniqueInput[]
    connect?: event_sessionsWhereUniqueInput | event_sessionsWhereUniqueInput[]
    update?: event_sessionsUpdateWithWhereUniqueWithoutEventsInput | event_sessionsUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: event_sessionsUpdateManyWithWhereWithoutEventsInput | event_sessionsUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: event_sessionsScalarWhereInput | event_sessionsScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutEventInput | GameUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutEventInput | GameUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: GameUpdateManyWithWhereWithoutEventInput | GameUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<MatchSuggestionCreateWithoutEventInput, MatchSuggestionUncheckedCreateWithoutEventInput> | MatchSuggestionCreateWithoutEventInput[] | MatchSuggestionUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MatchSuggestionCreateOrConnectWithoutEventInput | MatchSuggestionCreateOrConnectWithoutEventInput[]
    upsert?: MatchSuggestionUpsertWithWhereUniqueWithoutEventInput | MatchSuggestionUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: MatchSuggestionCreateManyEventInputEnvelope
    set?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    disconnect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    delete?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    connect?: MatchSuggestionWhereUniqueInput | MatchSuggestionWhereUniqueInput[]
    update?: MatchSuggestionUpdateWithWhereUniqueWithoutEventInput | MatchSuggestionUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: MatchSuggestionUpdateManyWithWhereWithoutEventInput | MatchSuggestionUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: MatchSuggestionScalarWhereInput | MatchSuggestionScalarWhereInput[]
  }

  export type ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<ParticipantBadgeCreateWithoutEventInput, ParticipantBadgeUncheckedCreateWithoutEventInput> | ParticipantBadgeCreateWithoutEventInput[] | ParticipantBadgeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutEventInput | ParticipantBadgeCreateOrConnectWithoutEventInput[]
    upsert?: ParticipantBadgeUpsertWithWhereUniqueWithoutEventInput | ParticipantBadgeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ParticipantBadgeCreateManyEventInputEnvelope
    set?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    disconnect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    delete?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    update?: ParticipantBadgeUpdateWithWhereUniqueWithoutEventInput | ParticipantBadgeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ParticipantBadgeUpdateManyWithWhereWithoutEventInput | ParticipantBadgeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ParticipantBadgeScalarWhereInput | ParticipantBadgeScalarWhereInput[]
  }

  export type RegistrationUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<RegistrationCreateWithoutEventInput, RegistrationUncheckedCreateWithoutEventInput> | RegistrationCreateWithoutEventInput[] | RegistrationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutEventInput | RegistrationCreateOrConnectWithoutEventInput[]
    upsert?: RegistrationUpsertWithWhereUniqueWithoutEventInput | RegistrationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: RegistrationCreateManyEventInputEnvelope
    set?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    disconnect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    delete?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    update?: RegistrationUpdateWithWhereUniqueWithoutEventInput | RegistrationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: RegistrationUpdateManyWithWhereWithoutEventInput | RegistrationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
  }

  export type SponsorUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<SponsorCreateWithoutEventInput, SponsorUncheckedCreateWithoutEventInput> | SponsorCreateWithoutEventInput[] | SponsorUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SponsorCreateOrConnectWithoutEventInput | SponsorCreateOrConnectWithoutEventInput[]
    upsert?: SponsorUpsertWithWhereUniqueWithoutEventInput | SponsorUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: SponsorCreateManyEventInputEnvelope
    set?: SponsorWhereUniqueInput | SponsorWhereUniqueInput[]
    disconnect?: SponsorWhereUniqueInput | SponsorWhereUniqueInput[]
    delete?: SponsorWhereUniqueInput | SponsorWhereUniqueInput[]
    connect?: SponsorWhereUniqueInput | SponsorWhereUniqueInput[]
    update?: SponsorUpdateWithWhereUniqueWithoutEventInput | SponsorUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: SponsorUpdateManyWithWhereWithoutEventInput | SponsorUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: SponsorScalarWhereInput | SponsorScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput> | TicketCreateWithoutEventInput[] | TicketUncheckedCreateWithoutEventInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutEventInput | TicketCreateOrConnectWithoutEventInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutEventInput | TicketUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: TicketCreateManyEventInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutEventInput | TicketUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutEventInput | TicketUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type UserEventScoreUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<UserEventScoreCreateWithoutEventInput, UserEventScoreUncheckedCreateWithoutEventInput> | UserEventScoreCreateWithoutEventInput[] | UserEventScoreUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UserEventScoreCreateOrConnectWithoutEventInput | UserEventScoreCreateOrConnectWithoutEventInput[]
    upsert?: UserEventScoreUpsertWithWhereUniqueWithoutEventInput | UserEventScoreUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: UserEventScoreCreateManyEventInputEnvelope
    set?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    disconnect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    delete?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    connect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    update?: UserEventScoreUpdateWithWhereUniqueWithoutEventInput | UserEventScoreUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: UserEventScoreUpdateManyWithWhereWithoutEventInput | UserEventScoreUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: UserEventScoreScalarWhereInput | UserEventScoreScalarWhereInput[]
  }

  export type UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<UserMatchProfileCreateWithoutEventInput, UserMatchProfileUncheckedCreateWithoutEventInput> | UserMatchProfileCreateWithoutEventInput[] | UserMatchProfileUncheckedCreateWithoutEventInput[]
    connectOrCreate?: UserMatchProfileCreateOrConnectWithoutEventInput | UserMatchProfileCreateOrConnectWithoutEventInput[]
    upsert?: UserMatchProfileUpsertWithWhereUniqueWithoutEventInput | UserMatchProfileUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: UserMatchProfileCreateManyEventInputEnvelope
    set?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    disconnect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    delete?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    connect?: UserMatchProfileWhereUniqueInput | UserMatchProfileWhereUniqueInput[]
    update?: UserMatchProfileUpdateWithWhereUniqueWithoutEventInput | UserMatchProfileUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: UserMatchProfileUpdateManyWithWhereWithoutEventInput | UserMatchProfileUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: UserMatchProfileScalarWhereInput | UserMatchProfileScalarWhereInput[]
  }

  export type AppointmentCreateNestedManyWithoutRecipientInput = {
    create?: XOR<AppointmentCreateWithoutRecipientInput, AppointmentUncheckedCreateWithoutRecipientInput> | AppointmentCreateWithoutRecipientInput[] | AppointmentUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRecipientInput | AppointmentCreateOrConnectWithoutRecipientInput[]
    createMany?: AppointmentCreateManyRecipientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutRequesterInput = {
    create?: XOR<AppointmentCreateWithoutRequesterInput, AppointmentUncheckedCreateWithoutRequesterInput> | AppointmentCreateWithoutRequesterInput[] | AppointmentUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRequesterInput | AppointmentCreateOrConnectWithoutRequesterInput[]
    createMany?: AppointmentCreateManyRequesterInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type GameCreateNestedManyWithoutParticipantInput = {
    create?: XOR<GameCreateWithoutParticipantInput, GameUncheckedCreateWithoutParticipantInput> | GameCreateWithoutParticipantInput[] | GameUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: GameCreateOrConnectWithoutParticipantInput | GameCreateOrConnectWithoutParticipantInput[]
    createMany?: GameCreateManyParticipantInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type ParticipantBadgeCreateNestedManyWithoutRegistrationInput = {
    create?: XOR<ParticipantBadgeCreateWithoutRegistrationInput, ParticipantBadgeUncheckedCreateWithoutRegistrationInput> | ParticipantBadgeCreateWithoutRegistrationInput[] | ParticipantBadgeUncheckedCreateWithoutRegistrationInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutRegistrationInput | ParticipantBadgeCreateOrConnectWithoutRegistrationInput[]
    createMany?: ParticipantBadgeCreateManyRegistrationInputEnvelope
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
  }

  export type EventCreateNestedOneWithoutRegistrationsInput = {
    create?: XOR<EventCreateWithoutRegistrationsInput, EventUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: EventCreateOrConnectWithoutRegistrationsInput
    connect?: EventWhereUniqueInput
  }

  export type TicketCreateNestedOneWithoutRegistrationsInput = {
    create?: XOR<TicketCreateWithoutRegistrationsInput, TicketUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutRegistrationsInput
    connect?: TicketWhereUniqueInput
  }

  export type SessionParticipantCreateNestedManyWithoutParticipantInput = {
    create?: XOR<SessionParticipantCreateWithoutParticipantInput, SessionParticipantUncheckedCreateWithoutParticipantInput> | SessionParticipantCreateWithoutParticipantInput[] | SessionParticipantUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutParticipantInput | SessionParticipantCreateOrConnectWithoutParticipantInput[]
    createMany?: SessionParticipantCreateManyParticipantInputEnvelope
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
  }

  export type UserEventScoreCreateNestedManyWithoutParticipantInput = {
    create?: XOR<UserEventScoreCreateWithoutParticipantInput, UserEventScoreUncheckedCreateWithoutParticipantInput> | UserEventScoreCreateWithoutParticipantInput[] | UserEventScoreUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: UserEventScoreCreateOrConnectWithoutParticipantInput | UserEventScoreCreateOrConnectWithoutParticipantInput[]
    createMany?: UserEventScoreCreateManyParticipantInputEnvelope
    connect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutRecipientInput = {
    create?: XOR<AppointmentCreateWithoutRecipientInput, AppointmentUncheckedCreateWithoutRecipientInput> | AppointmentCreateWithoutRecipientInput[] | AppointmentUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRecipientInput | AppointmentCreateOrConnectWithoutRecipientInput[]
    createMany?: AppointmentCreateManyRecipientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutRequesterInput = {
    create?: XOR<AppointmentCreateWithoutRequesterInput, AppointmentUncheckedCreateWithoutRequesterInput> | AppointmentCreateWithoutRequesterInput[] | AppointmentUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRequesterInput | AppointmentCreateOrConnectWithoutRequesterInput[]
    createMany?: AppointmentCreateManyRequesterInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutParticipantInput = {
    create?: XOR<GameCreateWithoutParticipantInput, GameUncheckedCreateWithoutParticipantInput> | GameCreateWithoutParticipantInput[] | GameUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: GameCreateOrConnectWithoutParticipantInput | GameCreateOrConnectWithoutParticipantInput[]
    createMany?: GameCreateManyParticipantInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type ParticipantBadgeUncheckedCreateNestedManyWithoutRegistrationInput = {
    create?: XOR<ParticipantBadgeCreateWithoutRegistrationInput, ParticipantBadgeUncheckedCreateWithoutRegistrationInput> | ParticipantBadgeCreateWithoutRegistrationInput[] | ParticipantBadgeUncheckedCreateWithoutRegistrationInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutRegistrationInput | ParticipantBadgeCreateOrConnectWithoutRegistrationInput[]
    createMany?: ParticipantBadgeCreateManyRegistrationInputEnvelope
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
  }

  export type SessionParticipantUncheckedCreateNestedManyWithoutParticipantInput = {
    create?: XOR<SessionParticipantCreateWithoutParticipantInput, SessionParticipantUncheckedCreateWithoutParticipantInput> | SessionParticipantCreateWithoutParticipantInput[] | SessionParticipantUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutParticipantInput | SessionParticipantCreateOrConnectWithoutParticipantInput[]
    createMany?: SessionParticipantCreateManyParticipantInputEnvelope
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
  }

  export type UserEventScoreUncheckedCreateNestedManyWithoutParticipantInput = {
    create?: XOR<UserEventScoreCreateWithoutParticipantInput, UserEventScoreUncheckedCreateWithoutParticipantInput> | UserEventScoreCreateWithoutParticipantInput[] | UserEventScoreUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: UserEventScoreCreateOrConnectWithoutParticipantInput | UserEventScoreCreateOrConnectWithoutParticipantInput[]
    createMany?: UserEventScoreCreateManyParticipantInputEnvelope
    connect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
  }

  export type AppointmentUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<AppointmentCreateWithoutRecipientInput, AppointmentUncheckedCreateWithoutRecipientInput> | AppointmentCreateWithoutRecipientInput[] | AppointmentUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRecipientInput | AppointmentCreateOrConnectWithoutRecipientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutRecipientInput | AppointmentUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: AppointmentCreateManyRecipientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutRecipientInput | AppointmentUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutRecipientInput | AppointmentUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<AppointmentCreateWithoutRequesterInput, AppointmentUncheckedCreateWithoutRequesterInput> | AppointmentCreateWithoutRequesterInput[] | AppointmentUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRequesterInput | AppointmentCreateOrConnectWithoutRequesterInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutRequesterInput | AppointmentUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: AppointmentCreateManyRequesterInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutRequesterInput | AppointmentUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutRequesterInput | AppointmentUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type GameUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<GameCreateWithoutParticipantInput, GameUncheckedCreateWithoutParticipantInput> | GameCreateWithoutParticipantInput[] | GameUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: GameCreateOrConnectWithoutParticipantInput | GameCreateOrConnectWithoutParticipantInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutParticipantInput | GameUpsertWithWhereUniqueWithoutParticipantInput[]
    createMany?: GameCreateManyParticipantInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutParticipantInput | GameUpdateWithWhereUniqueWithoutParticipantInput[]
    updateMany?: GameUpdateManyWithWhereWithoutParticipantInput | GameUpdateManyWithWhereWithoutParticipantInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type ParticipantBadgeUpdateManyWithoutRegistrationNestedInput = {
    create?: XOR<ParticipantBadgeCreateWithoutRegistrationInput, ParticipantBadgeUncheckedCreateWithoutRegistrationInput> | ParticipantBadgeCreateWithoutRegistrationInput[] | ParticipantBadgeUncheckedCreateWithoutRegistrationInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutRegistrationInput | ParticipantBadgeCreateOrConnectWithoutRegistrationInput[]
    upsert?: ParticipantBadgeUpsertWithWhereUniqueWithoutRegistrationInput | ParticipantBadgeUpsertWithWhereUniqueWithoutRegistrationInput[]
    createMany?: ParticipantBadgeCreateManyRegistrationInputEnvelope
    set?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    disconnect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    delete?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    update?: ParticipantBadgeUpdateWithWhereUniqueWithoutRegistrationInput | ParticipantBadgeUpdateWithWhereUniqueWithoutRegistrationInput[]
    updateMany?: ParticipantBadgeUpdateManyWithWhereWithoutRegistrationInput | ParticipantBadgeUpdateManyWithWhereWithoutRegistrationInput[]
    deleteMany?: ParticipantBadgeScalarWhereInput | ParticipantBadgeScalarWhereInput[]
  }

  export type EventUpdateOneRequiredWithoutRegistrationsNestedInput = {
    create?: XOR<EventCreateWithoutRegistrationsInput, EventUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: EventCreateOrConnectWithoutRegistrationsInput
    upsert?: EventUpsertWithoutRegistrationsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutRegistrationsInput, EventUpdateWithoutRegistrationsInput>, EventUncheckedUpdateWithoutRegistrationsInput>
  }

  export type TicketUpdateOneWithoutRegistrationsNestedInput = {
    create?: XOR<TicketCreateWithoutRegistrationsInput, TicketUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: TicketCreateOrConnectWithoutRegistrationsInput
    upsert?: TicketUpsertWithoutRegistrationsInput
    disconnect?: TicketWhereInput | boolean
    delete?: TicketWhereInput | boolean
    connect?: TicketWhereUniqueInput
    update?: XOR<XOR<TicketUpdateToOneWithWhereWithoutRegistrationsInput, TicketUpdateWithoutRegistrationsInput>, TicketUncheckedUpdateWithoutRegistrationsInput>
  }

  export type SessionParticipantUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<SessionParticipantCreateWithoutParticipantInput, SessionParticipantUncheckedCreateWithoutParticipantInput> | SessionParticipantCreateWithoutParticipantInput[] | SessionParticipantUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutParticipantInput | SessionParticipantCreateOrConnectWithoutParticipantInput[]
    upsert?: SessionParticipantUpsertWithWhereUniqueWithoutParticipantInput | SessionParticipantUpsertWithWhereUniqueWithoutParticipantInput[]
    createMany?: SessionParticipantCreateManyParticipantInputEnvelope
    set?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    disconnect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    delete?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    update?: SessionParticipantUpdateWithWhereUniqueWithoutParticipantInput | SessionParticipantUpdateWithWhereUniqueWithoutParticipantInput[]
    updateMany?: SessionParticipantUpdateManyWithWhereWithoutParticipantInput | SessionParticipantUpdateManyWithWhereWithoutParticipantInput[]
    deleteMany?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
  }

  export type UserEventScoreUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<UserEventScoreCreateWithoutParticipantInput, UserEventScoreUncheckedCreateWithoutParticipantInput> | UserEventScoreCreateWithoutParticipantInput[] | UserEventScoreUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: UserEventScoreCreateOrConnectWithoutParticipantInput | UserEventScoreCreateOrConnectWithoutParticipantInput[]
    upsert?: UserEventScoreUpsertWithWhereUniqueWithoutParticipantInput | UserEventScoreUpsertWithWhereUniqueWithoutParticipantInput[]
    createMany?: UserEventScoreCreateManyParticipantInputEnvelope
    set?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    disconnect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    delete?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    connect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    update?: UserEventScoreUpdateWithWhereUniqueWithoutParticipantInput | UserEventScoreUpdateWithWhereUniqueWithoutParticipantInput[]
    updateMany?: UserEventScoreUpdateManyWithWhereWithoutParticipantInput | UserEventScoreUpdateManyWithWhereWithoutParticipantInput[]
    deleteMany?: UserEventScoreScalarWhereInput | UserEventScoreScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<AppointmentCreateWithoutRecipientInput, AppointmentUncheckedCreateWithoutRecipientInput> | AppointmentCreateWithoutRecipientInput[] | AppointmentUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRecipientInput | AppointmentCreateOrConnectWithoutRecipientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutRecipientInput | AppointmentUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: AppointmentCreateManyRecipientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutRecipientInput | AppointmentUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutRecipientInput | AppointmentUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<AppointmentCreateWithoutRequesterInput, AppointmentUncheckedCreateWithoutRequesterInput> | AppointmentCreateWithoutRequesterInput[] | AppointmentUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRequesterInput | AppointmentCreateOrConnectWithoutRequesterInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutRequesterInput | AppointmentUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: AppointmentCreateManyRequesterInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutRequesterInput | AppointmentUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutRequesterInput | AppointmentUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<GameCreateWithoutParticipantInput, GameUncheckedCreateWithoutParticipantInput> | GameCreateWithoutParticipantInput[] | GameUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: GameCreateOrConnectWithoutParticipantInput | GameCreateOrConnectWithoutParticipantInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutParticipantInput | GameUpsertWithWhereUniqueWithoutParticipantInput[]
    createMany?: GameCreateManyParticipantInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutParticipantInput | GameUpdateWithWhereUniqueWithoutParticipantInput[]
    updateMany?: GameUpdateManyWithWhereWithoutParticipantInput | GameUpdateManyWithWhereWithoutParticipantInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type ParticipantBadgeUncheckedUpdateManyWithoutRegistrationNestedInput = {
    create?: XOR<ParticipantBadgeCreateWithoutRegistrationInput, ParticipantBadgeUncheckedCreateWithoutRegistrationInput> | ParticipantBadgeCreateWithoutRegistrationInput[] | ParticipantBadgeUncheckedCreateWithoutRegistrationInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutRegistrationInput | ParticipantBadgeCreateOrConnectWithoutRegistrationInput[]
    upsert?: ParticipantBadgeUpsertWithWhereUniqueWithoutRegistrationInput | ParticipantBadgeUpsertWithWhereUniqueWithoutRegistrationInput[]
    createMany?: ParticipantBadgeCreateManyRegistrationInputEnvelope
    set?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    disconnect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    delete?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    update?: ParticipantBadgeUpdateWithWhereUniqueWithoutRegistrationInput | ParticipantBadgeUpdateWithWhereUniqueWithoutRegistrationInput[]
    updateMany?: ParticipantBadgeUpdateManyWithWhereWithoutRegistrationInput | ParticipantBadgeUpdateManyWithWhereWithoutRegistrationInput[]
    deleteMany?: ParticipantBadgeScalarWhereInput | ParticipantBadgeScalarWhereInput[]
  }

  export type SessionParticipantUncheckedUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<SessionParticipantCreateWithoutParticipantInput, SessionParticipantUncheckedCreateWithoutParticipantInput> | SessionParticipantCreateWithoutParticipantInput[] | SessionParticipantUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutParticipantInput | SessionParticipantCreateOrConnectWithoutParticipantInput[]
    upsert?: SessionParticipantUpsertWithWhereUniqueWithoutParticipantInput | SessionParticipantUpsertWithWhereUniqueWithoutParticipantInput[]
    createMany?: SessionParticipantCreateManyParticipantInputEnvelope
    set?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    disconnect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    delete?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    update?: SessionParticipantUpdateWithWhereUniqueWithoutParticipantInput | SessionParticipantUpdateWithWhereUniqueWithoutParticipantInput[]
    updateMany?: SessionParticipantUpdateManyWithWhereWithoutParticipantInput | SessionParticipantUpdateManyWithWhereWithoutParticipantInput[]
    deleteMany?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
  }

  export type UserEventScoreUncheckedUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<UserEventScoreCreateWithoutParticipantInput, UserEventScoreUncheckedCreateWithoutParticipantInput> | UserEventScoreCreateWithoutParticipantInput[] | UserEventScoreUncheckedCreateWithoutParticipantInput[]
    connectOrCreate?: UserEventScoreCreateOrConnectWithoutParticipantInput | UserEventScoreCreateOrConnectWithoutParticipantInput[]
    upsert?: UserEventScoreUpsertWithWhereUniqueWithoutParticipantInput | UserEventScoreUpsertWithWhereUniqueWithoutParticipantInput[]
    createMany?: UserEventScoreCreateManyParticipantInputEnvelope
    set?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    disconnect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    delete?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    connect?: UserEventScoreWhereUniqueInput | UserEventScoreWhereUniqueInput[]
    update?: UserEventScoreUpdateWithWhereUniqueWithoutParticipantInput | UserEventScoreUpdateWithWhereUniqueWithoutParticipantInput[]
    updateMany?: UserEventScoreUpdateManyWithWhereWithoutParticipantInput | UserEventScoreUpdateManyWithWhereWithoutParticipantInput[]
    deleteMany?: UserEventScoreScalarWhereInput | UserEventScoreScalarWhereInput[]
  }

  export type RegistrationCreateNestedManyWithoutTicketInput = {
    create?: XOR<RegistrationCreateWithoutTicketInput, RegistrationUncheckedCreateWithoutTicketInput> | RegistrationCreateWithoutTicketInput[] | RegistrationUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutTicketInput | RegistrationCreateOrConnectWithoutTicketInput[]
    createMany?: RegistrationCreateManyTicketInputEnvelope
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
  }

  export type EventCreateNestedOneWithoutTicketsInput = {
    create?: XOR<EventCreateWithoutTicketsInput, EventUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: EventCreateOrConnectWithoutTicketsInput
    connect?: EventWhereUniqueInput
  }

  export type RegistrationUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<RegistrationCreateWithoutTicketInput, RegistrationUncheckedCreateWithoutTicketInput> | RegistrationCreateWithoutTicketInput[] | RegistrationUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutTicketInput | RegistrationCreateOrConnectWithoutTicketInput[]
    createMany?: RegistrationCreateManyTicketInputEnvelope
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RegistrationUpdateManyWithoutTicketNestedInput = {
    create?: XOR<RegistrationCreateWithoutTicketInput, RegistrationUncheckedCreateWithoutTicketInput> | RegistrationCreateWithoutTicketInput[] | RegistrationUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutTicketInput | RegistrationCreateOrConnectWithoutTicketInput[]
    upsert?: RegistrationUpsertWithWhereUniqueWithoutTicketInput | RegistrationUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: RegistrationCreateManyTicketInputEnvelope
    set?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    disconnect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    delete?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    update?: RegistrationUpdateWithWhereUniqueWithoutTicketInput | RegistrationUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: RegistrationUpdateManyWithWhereWithoutTicketInput | RegistrationUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
  }

  export type EventUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<EventCreateWithoutTicketsInput, EventUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: EventCreateOrConnectWithoutTicketsInput
    upsert?: EventUpsertWithoutTicketsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutTicketsInput, EventUpdateWithoutTicketsInput>, EventUncheckedUpdateWithoutTicketsInput>
  }

  export type RegistrationUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<RegistrationCreateWithoutTicketInput, RegistrationUncheckedCreateWithoutTicketInput> | RegistrationCreateWithoutTicketInput[] | RegistrationUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutTicketInput | RegistrationCreateOrConnectWithoutTicketInput[]
    upsert?: RegistrationUpsertWithWhereUniqueWithoutTicketInput | RegistrationUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: RegistrationCreateManyTicketInputEnvelope
    set?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    disconnect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    delete?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    update?: RegistrationUpdateWithWhereUniqueWithoutTicketInput | RegistrationUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: RegistrationUpdateManyWithWhereWithoutTicketInput | RegistrationUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutEvent_sessionsInput = {
    create?: XOR<EventCreateWithoutEvent_sessionsInput, EventUncheckedCreateWithoutEvent_sessionsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEvent_sessionsInput
    connect?: EventWhereUniqueInput
  }

  export type SessionParticipantCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput> | SessionParticipantCreateWithoutSessionInput[] | SessionParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutSessionInput | SessionParticipantCreateOrConnectWithoutSessionInput[]
    createMany?: SessionParticipantCreateManySessionInputEnvelope
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
  }

  export type SessionParticipantUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput> | SessionParticipantCreateWithoutSessionInput[] | SessionParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutSessionInput | SessionParticipantCreateOrConnectWithoutSessionInput[]
    createMany?: SessionParticipantCreateManySessionInputEnvelope
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
  }

  export type EventUpdateOneRequiredWithoutEvent_sessionsNestedInput = {
    create?: XOR<EventCreateWithoutEvent_sessionsInput, EventUncheckedCreateWithoutEvent_sessionsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEvent_sessionsInput
    upsert?: EventUpsertWithoutEvent_sessionsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEvent_sessionsInput, EventUpdateWithoutEvent_sessionsInput>, EventUncheckedUpdateWithoutEvent_sessionsInput>
  }

  export type SessionParticipantUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput> | SessionParticipantCreateWithoutSessionInput[] | SessionParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutSessionInput | SessionParticipantCreateOrConnectWithoutSessionInput[]
    upsert?: SessionParticipantUpsertWithWhereUniqueWithoutSessionInput | SessionParticipantUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionParticipantCreateManySessionInputEnvelope
    set?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    disconnect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    delete?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    update?: SessionParticipantUpdateWithWhereUniqueWithoutSessionInput | SessionParticipantUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionParticipantUpdateManyWithWhereWithoutSessionInput | SessionParticipantUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
  }

  export type SessionParticipantUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput> | SessionParticipantCreateWithoutSessionInput[] | SessionParticipantUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionParticipantCreateOrConnectWithoutSessionInput | SessionParticipantCreateOrConnectWithoutSessionInput[]
    upsert?: SessionParticipantUpsertWithWhereUniqueWithoutSessionInput | SessionParticipantUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionParticipantCreateManySessionInputEnvelope
    set?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    disconnect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    delete?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    connect?: SessionParticipantWhereUniqueInput | SessionParticipantWhereUniqueInput[]
    update?: SessionParticipantUpdateWithWhereUniqueWithoutSessionInput | SessionParticipantUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionParticipantUpdateManyWithWhereWithoutSessionInput | SessionParticipantUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutSponsorsInput = {
    create?: XOR<EventCreateWithoutSponsorsInput, EventUncheckedCreateWithoutSponsorsInput>
    connectOrCreate?: EventCreateOrConnectWithoutSponsorsInput
    connect?: EventWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutSponsorsNestedInput = {
    create?: XOR<EventCreateWithoutSponsorsInput, EventUncheckedCreateWithoutSponsorsInput>
    connectOrCreate?: EventCreateOrConnectWithoutSponsorsInput
    upsert?: EventUpsertWithoutSponsorsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutSponsorsInput, EventUpdateWithoutSponsorsInput>, EventUncheckedUpdateWithoutSponsorsInput>
  }

  export type RegistrationCreateNestedOneWithoutSessionsInput = {
    create?: XOR<RegistrationCreateWithoutSessionsInput, RegistrationUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutSessionsInput
    connect?: RegistrationWhereUniqueInput
  }

  export type event_sessionsCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<event_sessionsCreateWithoutParticipantsInput, event_sessionsUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: event_sessionsCreateOrConnectWithoutParticipantsInput
    connect?: event_sessionsWhereUniqueInput
  }

  export type RegistrationUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<RegistrationCreateWithoutSessionsInput, RegistrationUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutSessionsInput
    upsert?: RegistrationUpsertWithoutSessionsInput
    connect?: RegistrationWhereUniqueInput
    update?: XOR<XOR<RegistrationUpdateToOneWithWhereWithoutSessionsInput, RegistrationUpdateWithoutSessionsInput>, RegistrationUncheckedUpdateWithoutSessionsInput>
  }

  export type event_sessionsUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<event_sessionsCreateWithoutParticipantsInput, event_sessionsUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: event_sessionsCreateOrConnectWithoutParticipantsInput
    upsert?: event_sessionsUpsertWithoutParticipantsInput
    connect?: event_sessionsWhereUniqueInput
    update?: XOR<XOR<event_sessionsUpdateToOneWithWhereWithoutParticipantsInput, event_sessionsUpdateWithoutParticipantsInput>, event_sessionsUncheckedUpdateWithoutParticipantsInput>
  }

  export type EventCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<EventCreateWithoutAppointmentsInput, EventUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: EventCreateOrConnectWithoutAppointmentsInput
    connect?: EventWhereUniqueInput
  }

  export type RegistrationCreateNestedOneWithoutReceivedAppointmentsInput = {
    create?: XOR<RegistrationCreateWithoutReceivedAppointmentsInput, RegistrationUncheckedCreateWithoutReceivedAppointmentsInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutReceivedAppointmentsInput
    connect?: RegistrationWhereUniqueInput
  }

  export type RegistrationCreateNestedOneWithoutSentAppointmentsInput = {
    create?: XOR<RegistrationCreateWithoutSentAppointmentsInput, RegistrationUncheckedCreateWithoutSentAppointmentsInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutSentAppointmentsInput
    connect?: RegistrationWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<EventCreateWithoutAppointmentsInput, EventUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: EventCreateOrConnectWithoutAppointmentsInput
    upsert?: EventUpsertWithoutAppointmentsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutAppointmentsInput, EventUpdateWithoutAppointmentsInput>, EventUncheckedUpdateWithoutAppointmentsInput>
  }

  export type RegistrationUpdateOneRequiredWithoutReceivedAppointmentsNestedInput = {
    create?: XOR<RegistrationCreateWithoutReceivedAppointmentsInput, RegistrationUncheckedCreateWithoutReceivedAppointmentsInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutReceivedAppointmentsInput
    upsert?: RegistrationUpsertWithoutReceivedAppointmentsInput
    connect?: RegistrationWhereUniqueInput
    update?: XOR<XOR<RegistrationUpdateToOneWithWhereWithoutReceivedAppointmentsInput, RegistrationUpdateWithoutReceivedAppointmentsInput>, RegistrationUncheckedUpdateWithoutReceivedAppointmentsInput>
  }

  export type RegistrationUpdateOneRequiredWithoutSentAppointmentsNestedInput = {
    create?: XOR<RegistrationCreateWithoutSentAppointmentsInput, RegistrationUncheckedCreateWithoutSentAppointmentsInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutSentAppointmentsInput
    upsert?: RegistrationUpsertWithoutSentAppointmentsInput
    connect?: RegistrationWhereUniqueInput
    update?: XOR<XOR<RegistrationUpdateToOneWithWhereWithoutSentAppointmentsInput, RegistrationUpdateWithoutSentAppointmentsInput>, RegistrationUncheckedUpdateWithoutSentAppointmentsInput>
  }

  export type EventCreateNestedOneWithoutBadgesInput = {
    create?: XOR<EventCreateWithoutBadgesInput, EventUncheckedCreateWithoutBadgesInput>
    connectOrCreate?: EventCreateOrConnectWithoutBadgesInput
    connect?: EventWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutBadgesNestedInput = {
    create?: XOR<EventCreateWithoutBadgesInput, EventUncheckedCreateWithoutBadgesInput>
    connectOrCreate?: EventCreateOrConnectWithoutBadgesInput
    upsert?: EventUpsertWithoutBadgesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutBadgesInput, EventUpdateWithoutBadgesInput>, EventUncheckedUpdateWithoutBadgesInput>
  }

  export type EventCreateNestedOneWithoutBadgeTemplatesInput = {
    create?: XOR<EventCreateWithoutBadgeTemplatesInput, EventUncheckedCreateWithoutBadgeTemplatesInput>
    connectOrCreate?: EventCreateOrConnectWithoutBadgeTemplatesInput
    connect?: EventWhereUniqueInput
  }

  export type ParticipantBadgeCreateNestedManyWithoutTemplateInput = {
    create?: XOR<ParticipantBadgeCreateWithoutTemplateInput, ParticipantBadgeUncheckedCreateWithoutTemplateInput> | ParticipantBadgeCreateWithoutTemplateInput[] | ParticipantBadgeUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutTemplateInput | ParticipantBadgeCreateOrConnectWithoutTemplateInput[]
    createMany?: ParticipantBadgeCreateManyTemplateInputEnvelope
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
  }

  export type ParticipantBadgeUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<ParticipantBadgeCreateWithoutTemplateInput, ParticipantBadgeUncheckedCreateWithoutTemplateInput> | ParticipantBadgeCreateWithoutTemplateInput[] | ParticipantBadgeUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutTemplateInput | ParticipantBadgeCreateOrConnectWithoutTemplateInput[]
    createMany?: ParticipantBadgeCreateManyTemplateInputEnvelope
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
  }

  export type EventUpdateOneWithoutBadgeTemplatesNestedInput = {
    create?: XOR<EventCreateWithoutBadgeTemplatesInput, EventUncheckedCreateWithoutBadgeTemplatesInput>
    connectOrCreate?: EventCreateOrConnectWithoutBadgeTemplatesInput
    upsert?: EventUpsertWithoutBadgeTemplatesInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutBadgeTemplatesInput, EventUpdateWithoutBadgeTemplatesInput>, EventUncheckedUpdateWithoutBadgeTemplatesInput>
  }

  export type ParticipantBadgeUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<ParticipantBadgeCreateWithoutTemplateInput, ParticipantBadgeUncheckedCreateWithoutTemplateInput> | ParticipantBadgeCreateWithoutTemplateInput[] | ParticipantBadgeUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutTemplateInput | ParticipantBadgeCreateOrConnectWithoutTemplateInput[]
    upsert?: ParticipantBadgeUpsertWithWhereUniqueWithoutTemplateInput | ParticipantBadgeUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: ParticipantBadgeCreateManyTemplateInputEnvelope
    set?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    disconnect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    delete?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    update?: ParticipantBadgeUpdateWithWhereUniqueWithoutTemplateInput | ParticipantBadgeUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: ParticipantBadgeUpdateManyWithWhereWithoutTemplateInput | ParticipantBadgeUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: ParticipantBadgeScalarWhereInput | ParticipantBadgeScalarWhereInput[]
  }

  export type ParticipantBadgeUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<ParticipantBadgeCreateWithoutTemplateInput, ParticipantBadgeUncheckedCreateWithoutTemplateInput> | ParticipantBadgeCreateWithoutTemplateInput[] | ParticipantBadgeUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ParticipantBadgeCreateOrConnectWithoutTemplateInput | ParticipantBadgeCreateOrConnectWithoutTemplateInput[]
    upsert?: ParticipantBadgeUpsertWithWhereUniqueWithoutTemplateInput | ParticipantBadgeUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: ParticipantBadgeCreateManyTemplateInputEnvelope
    set?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    disconnect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    delete?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    connect?: ParticipantBadgeWhereUniqueInput | ParticipantBadgeWhereUniqueInput[]
    update?: ParticipantBadgeUpdateWithWhereUniqueWithoutTemplateInput | ParticipantBadgeUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: ParticipantBadgeUpdateManyWithWhereWithoutTemplateInput | ParticipantBadgeUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: ParticipantBadgeScalarWhereInput | ParticipantBadgeScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutParticipantBadgesInput = {
    create?: XOR<EventCreateWithoutParticipantBadgesInput, EventUncheckedCreateWithoutParticipantBadgesInput>
    connectOrCreate?: EventCreateOrConnectWithoutParticipantBadgesInput
    connect?: EventWhereUniqueInput
  }

  export type RegistrationCreateNestedOneWithoutParticipantBadgesInput = {
    create?: XOR<RegistrationCreateWithoutParticipantBadgesInput, RegistrationUncheckedCreateWithoutParticipantBadgesInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutParticipantBadgesInput
    connect?: RegistrationWhereUniqueInput
  }

  export type BadgeTemplateCreateNestedOneWithoutParticipantBadgesInput = {
    create?: XOR<BadgeTemplateCreateWithoutParticipantBadgesInput, BadgeTemplateUncheckedCreateWithoutParticipantBadgesInput>
    connectOrCreate?: BadgeTemplateCreateOrConnectWithoutParticipantBadgesInput
    connect?: BadgeTemplateWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutParticipantBadgesNestedInput = {
    create?: XOR<EventCreateWithoutParticipantBadgesInput, EventUncheckedCreateWithoutParticipantBadgesInput>
    connectOrCreate?: EventCreateOrConnectWithoutParticipantBadgesInput
    upsert?: EventUpsertWithoutParticipantBadgesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutParticipantBadgesInput, EventUpdateWithoutParticipantBadgesInput>, EventUncheckedUpdateWithoutParticipantBadgesInput>
  }

  export type RegistrationUpdateOneRequiredWithoutParticipantBadgesNestedInput = {
    create?: XOR<RegistrationCreateWithoutParticipantBadgesInput, RegistrationUncheckedCreateWithoutParticipantBadgesInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutParticipantBadgesInput
    upsert?: RegistrationUpsertWithoutParticipantBadgesInput
    connect?: RegistrationWhereUniqueInput
    update?: XOR<XOR<RegistrationUpdateToOneWithWhereWithoutParticipantBadgesInput, RegistrationUpdateWithoutParticipantBadgesInput>, RegistrationUncheckedUpdateWithoutParticipantBadgesInput>
  }

  export type BadgeTemplateUpdateOneRequiredWithoutParticipantBadgesNestedInput = {
    create?: XOR<BadgeTemplateCreateWithoutParticipantBadgesInput, BadgeTemplateUncheckedCreateWithoutParticipantBadgesInput>
    connectOrCreate?: BadgeTemplateCreateOrConnectWithoutParticipantBadgesInput
    upsert?: BadgeTemplateUpsertWithoutParticipantBadgesInput
    connect?: BadgeTemplateWhereUniqueInput
    update?: XOR<XOR<BadgeTemplateUpdateToOneWithWhereWithoutParticipantBadgesInput, BadgeTemplateUpdateWithoutParticipantBadgesInput>, BadgeTemplateUncheckedUpdateWithoutParticipantBadgesInput>
  }

  export type EventCreateNestedOneWithoutEmailCampaignsInput = {
    create?: XOR<EventCreateWithoutEmailCampaignsInput, EventUncheckedCreateWithoutEmailCampaignsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEmailCampaignsInput
    connect?: EventWhereUniqueInput
  }

  export type EmailLogCreateNestedManyWithoutCampaignInput = {
    create?: XOR<EmailLogCreateWithoutCampaignInput, EmailLogUncheckedCreateWithoutCampaignInput> | EmailLogCreateWithoutCampaignInput[] | EmailLogUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutCampaignInput | EmailLogCreateOrConnectWithoutCampaignInput[]
    createMany?: EmailLogCreateManyCampaignInputEnvelope
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
  }

  export type EmailLogUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<EmailLogCreateWithoutCampaignInput, EmailLogUncheckedCreateWithoutCampaignInput> | EmailLogCreateWithoutCampaignInput[] | EmailLogUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutCampaignInput | EmailLogCreateOrConnectWithoutCampaignInput[]
    createMany?: EmailLogCreateManyCampaignInputEnvelope
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
  }

  export type EventUpdateOneRequiredWithoutEmailCampaignsNestedInput = {
    create?: XOR<EventCreateWithoutEmailCampaignsInput, EventUncheckedCreateWithoutEmailCampaignsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEmailCampaignsInput
    upsert?: EventUpsertWithoutEmailCampaignsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEmailCampaignsInput, EventUpdateWithoutEmailCampaignsInput>, EventUncheckedUpdateWithoutEmailCampaignsInput>
  }

  export type EmailLogUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<EmailLogCreateWithoutCampaignInput, EmailLogUncheckedCreateWithoutCampaignInput> | EmailLogCreateWithoutCampaignInput[] | EmailLogUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutCampaignInput | EmailLogCreateOrConnectWithoutCampaignInput[]
    upsert?: EmailLogUpsertWithWhereUniqueWithoutCampaignInput | EmailLogUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: EmailLogCreateManyCampaignInputEnvelope
    set?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    disconnect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    delete?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    update?: EmailLogUpdateWithWhereUniqueWithoutCampaignInput | EmailLogUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: EmailLogUpdateManyWithWhereWithoutCampaignInput | EmailLogUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
  }

  export type EmailLogUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<EmailLogCreateWithoutCampaignInput, EmailLogUncheckedCreateWithoutCampaignInput> | EmailLogCreateWithoutCampaignInput[] | EmailLogUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutCampaignInput | EmailLogCreateOrConnectWithoutCampaignInput[]
    upsert?: EmailLogUpsertWithWhereUniqueWithoutCampaignInput | EmailLogUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: EmailLogCreateManyCampaignInputEnvelope
    set?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    disconnect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    delete?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    update?: EmailLogUpdateWithWhereUniqueWithoutCampaignInput | EmailLogUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: EmailLogUpdateManyWithWhereWithoutCampaignInput | EmailLogUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutEmailTemplatesInput = {
    create?: XOR<EventCreateWithoutEmailTemplatesInput, EventUncheckedCreateWithoutEmailTemplatesInput>
    connectOrCreate?: EventCreateOrConnectWithoutEmailTemplatesInput
    connect?: EventWhereUniqueInput
  }

  export type EventUpdateOneWithoutEmailTemplatesNestedInput = {
    create?: XOR<EventCreateWithoutEmailTemplatesInput, EventUncheckedCreateWithoutEmailTemplatesInput>
    connectOrCreate?: EventCreateOrConnectWithoutEmailTemplatesInput
    upsert?: EventUpsertWithoutEmailTemplatesInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEmailTemplatesInput, EventUpdateWithoutEmailTemplatesInput>, EventUncheckedUpdateWithoutEmailTemplatesInput>
  }

  export type EmailCampaignCreateNestedOneWithoutEmailLogsInput = {
    create?: XOR<EmailCampaignCreateWithoutEmailLogsInput, EmailCampaignUncheckedCreateWithoutEmailLogsInput>
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutEmailLogsInput
    connect?: EmailCampaignWhereUniqueInput
  }

  export type EmailCampaignUpdateOneRequiredWithoutEmailLogsNestedInput = {
    create?: XOR<EmailCampaignCreateWithoutEmailLogsInput, EmailCampaignUncheckedCreateWithoutEmailLogsInput>
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutEmailLogsInput
    upsert?: EmailCampaignUpsertWithoutEmailLogsInput
    connect?: EmailCampaignWhereUniqueInput
    update?: XOR<XOR<EmailCampaignUpdateToOneWithWhereWithoutEmailLogsInput, EmailCampaignUpdateWithoutEmailLogsInput>, EmailCampaignUncheckedUpdateWithoutEmailLogsInput>
  }

  export type EventCreateNestedOneWithoutGamesInput = {
    create?: XOR<EventCreateWithoutGamesInput, EventUncheckedCreateWithoutGamesInput>
    connectOrCreate?: EventCreateOrConnectWithoutGamesInput
    connect?: EventWhereUniqueInput
  }

  export type RegistrationCreateNestedOneWithoutGamesInput = {
    create?: XOR<RegistrationCreateWithoutGamesInput, RegistrationUncheckedCreateWithoutGamesInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutGamesInput
    connect?: RegistrationWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutGamesNestedInput = {
    create?: XOR<EventCreateWithoutGamesInput, EventUncheckedCreateWithoutGamesInput>
    connectOrCreate?: EventCreateOrConnectWithoutGamesInput
    upsert?: EventUpsertWithoutGamesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutGamesInput, EventUpdateWithoutGamesInput>, EventUncheckedUpdateWithoutGamesInput>
  }

  export type RegistrationUpdateOneRequiredWithoutGamesNestedInput = {
    create?: XOR<RegistrationCreateWithoutGamesInput, RegistrationUncheckedCreateWithoutGamesInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutGamesInput
    upsert?: RegistrationUpsertWithoutGamesInput
    connect?: RegistrationWhereUniqueInput
    update?: XOR<XOR<RegistrationUpdateToOneWithWhereWithoutGamesInput, RegistrationUpdateWithoutGamesInput>, RegistrationUncheckedUpdateWithoutGamesInput>
  }

  export type EventCreateNestedOneWithoutUserEventScoresInput = {
    create?: XOR<EventCreateWithoutUserEventScoresInput, EventUncheckedCreateWithoutUserEventScoresInput>
    connectOrCreate?: EventCreateOrConnectWithoutUserEventScoresInput
    connect?: EventWhereUniqueInput
  }

  export type RegistrationCreateNestedOneWithoutUserEventScoresInput = {
    create?: XOR<RegistrationCreateWithoutUserEventScoresInput, RegistrationUncheckedCreateWithoutUserEventScoresInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutUserEventScoresInput
    connect?: RegistrationWhereUniqueInput
  }

  export type EventUpdateOneRequiredWithoutUserEventScoresNestedInput = {
    create?: XOR<EventCreateWithoutUserEventScoresInput, EventUncheckedCreateWithoutUserEventScoresInput>
    connectOrCreate?: EventCreateOrConnectWithoutUserEventScoresInput
    upsert?: EventUpsertWithoutUserEventScoresInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutUserEventScoresInput, EventUpdateWithoutUserEventScoresInput>, EventUncheckedUpdateWithoutUserEventScoresInput>
  }

  export type RegistrationUpdateOneRequiredWithoutUserEventScoresNestedInput = {
    create?: XOR<RegistrationCreateWithoutUserEventScoresInput, RegistrationUncheckedCreateWithoutUserEventScoresInput>
    connectOrCreate?: RegistrationCreateOrConnectWithoutUserEventScoresInput
    upsert?: RegistrationUpsertWithoutUserEventScoresInput
    connect?: RegistrationWhereUniqueInput
    update?: XOR<XOR<RegistrationUpdateToOneWithWhereWithoutUserEventScoresInput, RegistrationUpdateWithoutUserEventScoresInput>, RegistrationUncheckedUpdateWithoutUserEventScoresInput>
  }

  export type UserMatchProfileCreateinterestsInput = {
    set: string[]
  }

  export type UserMatchProfileCreategoalsInput = {
    set: string[]
  }

  export type UserMatchProfileCreateavailabilityInput = {
    set: string[]
  }

  export type EventCreateNestedOneWithoutMatchProfilesInput = {
    create?: XOR<EventCreateWithoutMatchProfilesInput, EventUncheckedCreateWithoutMatchProfilesInput>
    connectOrCreate?: EventCreateOrConnectWithoutMatchProfilesInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchProfilesInput = {
    create?: XOR<UserCreateWithoutMatchProfilesInput, UserUncheckedCreateWithoutMatchProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type UserMatchProfileUpdateinterestsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserMatchProfileUpdategoalsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserMatchProfileUpdateavailabilityInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EventUpdateOneRequiredWithoutMatchProfilesNestedInput = {
    create?: XOR<EventCreateWithoutMatchProfilesInput, EventUncheckedCreateWithoutMatchProfilesInput>
    connectOrCreate?: EventCreateOrConnectWithoutMatchProfilesInput
    upsert?: EventUpsertWithoutMatchProfilesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutMatchProfilesInput, EventUpdateWithoutMatchProfilesInput>, EventUncheckedUpdateWithoutMatchProfilesInput>
  }

  export type UserUpdateOneRequiredWithoutMatchProfilesNestedInput = {
    create?: XOR<UserCreateWithoutMatchProfilesInput, UserUncheckedCreateWithoutMatchProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchProfilesInput
    upsert?: UserUpsertWithoutMatchProfilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchProfilesInput, UserUpdateWithoutMatchProfilesInput>, UserUncheckedUpdateWithoutMatchProfilesInput>
  }

  export type EventCreateNestedOneWithoutMatchSuggestionsInput = {
    create?: XOR<EventCreateWithoutMatchSuggestionsInput, EventUncheckedCreateWithoutMatchSuggestionsInput>
    connectOrCreate?: EventCreateOrConnectWithoutMatchSuggestionsInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSuggestedForInput = {
    create?: XOR<UserCreateWithoutSuggestedForInput, UserUncheckedCreateWithoutSuggestedForInput>
    connectOrCreate?: UserCreateOrConnectWithoutSuggestedForInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSuggestionsInput = {
    create?: XOR<UserCreateWithoutSuggestionsInput, UserUncheckedCreateWithoutSuggestionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSuggestionsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventUpdateOneRequiredWithoutMatchSuggestionsNestedInput = {
    create?: XOR<EventCreateWithoutMatchSuggestionsInput, EventUncheckedCreateWithoutMatchSuggestionsInput>
    connectOrCreate?: EventCreateOrConnectWithoutMatchSuggestionsInput
    upsert?: EventUpsertWithoutMatchSuggestionsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutMatchSuggestionsInput, EventUpdateWithoutMatchSuggestionsInput>, EventUncheckedUpdateWithoutMatchSuggestionsInput>
  }

  export type UserUpdateOneRequiredWithoutSuggestedForNestedInput = {
    create?: XOR<UserCreateWithoutSuggestedForInput, UserUncheckedCreateWithoutSuggestedForInput>
    connectOrCreate?: UserCreateOrConnectWithoutSuggestedForInput
    upsert?: UserUpsertWithoutSuggestedForInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSuggestedForInput, UserUpdateWithoutSuggestedForInput>, UserUncheckedUpdateWithoutSuggestedForInput>
  }

  export type UserUpdateOneRequiredWithoutSuggestionsNestedInput = {
    create?: XOR<UserCreateWithoutSuggestionsInput, UserUncheckedCreateWithoutSuggestionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSuggestionsInput
    upsert?: UserUpsertWithoutSuggestionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSuggestionsInput, UserUpdateWithoutSuggestionsInput>, UserUncheckedUpdateWithoutSuggestionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutUserInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput>
  }

  export type EventCreateManyUserInputEnvelope = {
    data: EventCreateManyUserInput | EventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MatchSuggestionCreateWithoutSuggestedInput = {
    id?: string
    score: number
    reason?: string | null
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutMatchSuggestionsInput
    user: UserCreateNestedOneWithoutSuggestionsInput
  }

  export type MatchSuggestionUncheckedCreateWithoutSuggestedInput = {
    id?: string
    userId: string
    eventId: string
    score: number
    reason?: string | null
    createdAt?: Date | string
  }

  export type MatchSuggestionCreateOrConnectWithoutSuggestedInput = {
    where: MatchSuggestionWhereUniqueInput
    create: XOR<MatchSuggestionCreateWithoutSuggestedInput, MatchSuggestionUncheckedCreateWithoutSuggestedInput>
  }

  export type MatchSuggestionCreateManySuggestedInputEnvelope = {
    data: MatchSuggestionCreateManySuggestedInput | MatchSuggestionCreateManySuggestedInput[]
    skipDuplicates?: boolean
  }

  export type MatchSuggestionCreateWithoutUserInput = {
    id?: string
    score: number
    reason?: string | null
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutMatchSuggestionsInput
    suggested: UserCreateNestedOneWithoutSuggestedForInput
  }

  export type MatchSuggestionUncheckedCreateWithoutUserInput = {
    id?: string
    suggestedId: string
    eventId: string
    score: number
    reason?: string | null
    createdAt?: Date | string
  }

  export type MatchSuggestionCreateOrConnectWithoutUserInput = {
    where: MatchSuggestionWhereUniqueInput
    create: XOR<MatchSuggestionCreateWithoutUserInput, MatchSuggestionUncheckedCreateWithoutUserInput>
  }

  export type MatchSuggestionCreateManyUserInputEnvelope = {
    data: MatchSuggestionCreateManyUserInput | MatchSuggestionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserMatchProfileCreateWithoutUserInput = {
    id?: string
    headline?: string | null
    bio?: string | null
    jobTitle?: string | null
    company?: string | null
    interests?: UserMatchProfileCreateinterestsInput | string[]
    goals?: UserMatchProfileCreategoalsInput | string[]
    availability?: UserMatchProfileCreateavailabilityInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutMatchProfilesInput
  }

  export type UserMatchProfileUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    headline?: string | null
    bio?: string | null
    jobTitle?: string | null
    company?: string | null
    interests?: UserMatchProfileCreateinterestsInput | string[]
    goals?: UserMatchProfileCreategoalsInput | string[]
    availability?: UserMatchProfileCreateavailabilityInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMatchProfileCreateOrConnectWithoutUserInput = {
    where: UserMatchProfileWhereUniqueInput
    create: XOR<UserMatchProfileCreateWithoutUserInput, UserMatchProfileUncheckedCreateWithoutUserInput>
  }

  export type UserMatchProfileCreateManyUserInputEnvelope = {
    data: UserMatchProfileCreateManyUserInput | UserMatchProfileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type EventUpsertWithWhereUniqueWithoutUserInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutUserInput, EventUncheckedUpdateWithoutUserInput>
    create: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput>
  }

  export type EventUpdateWithWhereUniqueWithoutUserInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutUserInput, EventUncheckedUpdateWithoutUserInput>
  }

  export type EventUpdateManyWithWhereWithoutUserInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutUserInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: StringFilter<"Event"> | string
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    location?: StringFilter<"Event"> | string
    slug?: StringFilter<"Event"> | string
    banner?: StringNullableFilter<"Event"> | string | null
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    startTime?: StringNullableFilter<"Event"> | string | null
    endTime?: StringNullableFilter<"Event"> | string | null
    sector?: StringNullableFilter<"Event"> | string | null
    type?: StringNullableFilter<"Event"> | string | null
    format?: StringNullableFilter<"Event"> | string | null
    timezone?: StringNullableFilter<"Event"> | string | null
    videoUrl?: StringNullableFilter<"Event"> | string | null
    supportEmail?: StringNullableFilter<"Event"> | string | null
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    userId?: StringFilter<"Event"> | string
    logo?: StringNullableFilter<"Event"> | string | null
    archived?: BoolFilter<"Event"> | boolean
    archivedAt?: DateTimeNullableFilter<"Event"> | Date | string | null
  }

  export type MatchSuggestionUpsertWithWhereUniqueWithoutSuggestedInput = {
    where: MatchSuggestionWhereUniqueInput
    update: XOR<MatchSuggestionUpdateWithoutSuggestedInput, MatchSuggestionUncheckedUpdateWithoutSuggestedInput>
    create: XOR<MatchSuggestionCreateWithoutSuggestedInput, MatchSuggestionUncheckedCreateWithoutSuggestedInput>
  }

  export type MatchSuggestionUpdateWithWhereUniqueWithoutSuggestedInput = {
    where: MatchSuggestionWhereUniqueInput
    data: XOR<MatchSuggestionUpdateWithoutSuggestedInput, MatchSuggestionUncheckedUpdateWithoutSuggestedInput>
  }

  export type MatchSuggestionUpdateManyWithWhereWithoutSuggestedInput = {
    where: MatchSuggestionScalarWhereInput
    data: XOR<MatchSuggestionUpdateManyMutationInput, MatchSuggestionUncheckedUpdateManyWithoutSuggestedInput>
  }

  export type MatchSuggestionScalarWhereInput = {
    AND?: MatchSuggestionScalarWhereInput | MatchSuggestionScalarWhereInput[]
    OR?: MatchSuggestionScalarWhereInput[]
    NOT?: MatchSuggestionScalarWhereInput | MatchSuggestionScalarWhereInput[]
    id?: StringFilter<"MatchSuggestion"> | string
    userId?: StringFilter<"MatchSuggestion"> | string
    suggestedId?: StringFilter<"MatchSuggestion"> | string
    eventId?: StringFilter<"MatchSuggestion"> | string
    score?: FloatFilter<"MatchSuggestion"> | number
    reason?: StringNullableFilter<"MatchSuggestion"> | string | null
    createdAt?: DateTimeFilter<"MatchSuggestion"> | Date | string
  }

  export type MatchSuggestionUpsertWithWhereUniqueWithoutUserInput = {
    where: MatchSuggestionWhereUniqueInput
    update: XOR<MatchSuggestionUpdateWithoutUserInput, MatchSuggestionUncheckedUpdateWithoutUserInput>
    create: XOR<MatchSuggestionCreateWithoutUserInput, MatchSuggestionUncheckedCreateWithoutUserInput>
  }

  export type MatchSuggestionUpdateWithWhereUniqueWithoutUserInput = {
    where: MatchSuggestionWhereUniqueInput
    data: XOR<MatchSuggestionUpdateWithoutUserInput, MatchSuggestionUncheckedUpdateWithoutUserInput>
  }

  export type MatchSuggestionUpdateManyWithWhereWithoutUserInput = {
    where: MatchSuggestionScalarWhereInput
    data: XOR<MatchSuggestionUpdateManyMutationInput, MatchSuggestionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type UserMatchProfileUpsertWithWhereUniqueWithoutUserInput = {
    where: UserMatchProfileWhereUniqueInput
    update: XOR<UserMatchProfileUpdateWithoutUserInput, UserMatchProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserMatchProfileCreateWithoutUserInput, UserMatchProfileUncheckedCreateWithoutUserInput>
  }

  export type UserMatchProfileUpdateWithWhereUniqueWithoutUserInput = {
    where: UserMatchProfileWhereUniqueInput
    data: XOR<UserMatchProfileUpdateWithoutUserInput, UserMatchProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserMatchProfileUpdateManyWithWhereWithoutUserInput = {
    where: UserMatchProfileScalarWhereInput
    data: XOR<UserMatchProfileUpdateManyMutationInput, UserMatchProfileUncheckedUpdateManyWithoutUserInput>
  }

  export type UserMatchProfileScalarWhereInput = {
    AND?: UserMatchProfileScalarWhereInput | UserMatchProfileScalarWhereInput[]
    OR?: UserMatchProfileScalarWhereInput[]
    NOT?: UserMatchProfileScalarWhereInput | UserMatchProfileScalarWhereInput[]
    id?: StringFilter<"UserMatchProfile"> | string
    userId?: StringFilter<"UserMatchProfile"> | string
    eventId?: StringFilter<"UserMatchProfile"> | string
    headline?: StringNullableFilter<"UserMatchProfile"> | string | null
    bio?: StringNullableFilter<"UserMatchProfile"> | string | null
    jobTitle?: StringNullableFilter<"UserMatchProfile"> | string | null
    company?: StringNullableFilter<"UserMatchProfile"> | string | null
    interests?: StringNullableListFilter<"UserMatchProfile">
    goals?: StringNullableListFilter<"UserMatchProfile">
    availability?: StringNullableListFilter<"UserMatchProfile">
    createdAt?: DateTimeFilter<"UserMatchProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserMatchProfile"> | Date | string
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    events?: EventCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionCreateNestedManyWithoutSuggestedInput
    suggestions?: MatchSuggestionCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionUncheckedCreateNestedManyWithoutSuggestedInput
    suggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    events?: EventUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUpdateManyWithoutSuggestedNestedInput
    suggestions?: MatchSuggestionUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUncheckedUpdateManyWithoutSuggestedNestedInput
    suggestions?: MatchSuggestionUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionCreateNestedManyWithoutSuggestedInput
    suggestions?: MatchSuggestionCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionUncheckedCreateNestedManyWithoutSuggestedInput
    suggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUpdateManyWithoutSuggestedNestedInput
    suggestions?: MatchSuggestionUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUncheckedUpdateManyWithoutSuggestedNestedInput
    suggestions?: MatchSuggestionUncheckedUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AppointmentCreateWithoutEventInput = {
    id?: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    recipient: RegistrationCreateNestedOneWithoutReceivedAppointmentsInput
    requester: RegistrationCreateNestedOneWithoutSentAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutEventInput = {
    id?: string
    requesterId: string
    recipientId: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateOrConnectWithoutEventInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutEventInput, AppointmentUncheckedCreateWithoutEventInput>
  }

  export type AppointmentCreateManyEventInputEnvelope = {
    data: AppointmentCreateManyEventInput | AppointmentCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type BadgeTemplateCreateWithoutEventInput = {
    id?: string
    name: string
    description?: string | null
    canvasData: string
    isGlobal?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutTemplateInput
  }

  export type BadgeTemplateUncheckedCreateWithoutEventInput = {
    id?: string
    name: string
    description?: string | null
    canvasData: string
    isGlobal?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type BadgeTemplateCreateOrConnectWithoutEventInput = {
    where: BadgeTemplateWhereUniqueInput
    create: XOR<BadgeTemplateCreateWithoutEventInput, BadgeTemplateUncheckedCreateWithoutEventInput>
  }

  export type BadgeTemplateCreateManyEventInputEnvelope = {
    data: BadgeTemplateCreateManyEventInput | BadgeTemplateCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type BadgeCreateWithoutEventInput = {
    id?: string
    name?: string | null
    canvasData?: string | null
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BadgeUncheckedCreateWithoutEventInput = {
    id?: string
    name?: string | null
    canvasData?: string | null
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BadgeCreateOrConnectWithoutEventInput = {
    where: BadgeWhereUniqueInput
    create: XOR<BadgeCreateWithoutEventInput, BadgeUncheckedCreateWithoutEventInput>
  }

  export type BadgeCreateManyEventInputEnvelope = {
    data: BadgeCreateManyEventInput | BadgeCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EmailCampaignCreateWithoutEventInput = {
    id?: string
    name: string
    description?: string | null
    type?: string
    recipientType?: string
    subject: string
    htmlContent: string
    textContent?: string | null
    status?: string
    scheduledAt?: Date | string | null
    sentAt?: Date | string | null
    totalRecipients?: number | null
    successCount?: number | null
    failureCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailLogs?: EmailLogCreateNestedManyWithoutCampaignInput
  }

  export type EmailCampaignUncheckedCreateWithoutEventInput = {
    id?: string
    name: string
    description?: string | null
    type?: string
    recipientType?: string
    subject: string
    htmlContent: string
    textContent?: string | null
    status?: string
    scheduledAt?: Date | string | null
    sentAt?: Date | string | null
    totalRecipients?: number | null
    successCount?: number | null
    failureCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailLogs?: EmailLogUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type EmailCampaignCreateOrConnectWithoutEventInput = {
    where: EmailCampaignWhereUniqueInput
    create: XOR<EmailCampaignCreateWithoutEventInput, EmailCampaignUncheckedCreateWithoutEventInput>
  }

  export type EmailCampaignCreateManyEventInputEnvelope = {
    data: EmailCampaignCreateManyEventInput | EmailCampaignCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type EmailTemplateCreateWithoutEventInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    htmlContent: string
    textContent?: string | null
    type?: string
    category?: string | null
    isGlobal?: boolean
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateUncheckedCreateWithoutEventInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    htmlContent: string
    textContent?: string | null
    type?: string
    category?: string | null
    isGlobal?: boolean
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateCreateOrConnectWithoutEventInput = {
    where: EmailTemplateWhereUniqueInput
    create: XOR<EmailTemplateCreateWithoutEventInput, EmailTemplateUncheckedCreateWithoutEventInput>
  }

  export type EmailTemplateCreateManyEventInputEnvelope = {
    data: EmailTemplateCreateManyEventInput | EmailTemplateCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type event_sessionsCreateWithoutEventsInput = {
    id: string
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    start_time: string
    end_time: string
    location?: string | null
    speaker?: string | null
    capacity?: number | null
    created_at?: Date | string
    updated_at: Date | string
    banner?: string | null
    format?: string | null
    video_url?: string | null
    participants?: SessionParticipantCreateNestedManyWithoutSessionInput
  }

  export type event_sessionsUncheckedCreateWithoutEventsInput = {
    id: string
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    start_time: string
    end_time: string
    location?: string | null
    speaker?: string | null
    capacity?: number | null
    created_at?: Date | string
    updated_at: Date | string
    banner?: string | null
    format?: string | null
    video_url?: string | null
    participants?: SessionParticipantUncheckedCreateNestedManyWithoutSessionInput
  }

  export type event_sessionsCreateOrConnectWithoutEventsInput = {
    where: event_sessionsWhereUniqueInput
    create: XOR<event_sessionsCreateWithoutEventsInput, event_sessionsUncheckedCreateWithoutEventsInput>
  }

  export type event_sessionsCreateManyEventsInputEnvelope = {
    data: event_sessionsCreateManyEventsInput | event_sessionsCreateManyEventsInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutEventsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionCreateNestedManyWithoutSuggestedInput
    suggestions?: MatchSuggestionCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEventsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionUncheckedCreateNestedManyWithoutSuggestedInput
    suggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
  }

  export type GameCreateWithoutEventInput = {
    id?: string
    action: string
    points: number
    actionDetails?: string | null
    relatedEntityId?: string | null
    createdAt?: Date | string
    participant: RegistrationCreateNestedOneWithoutGamesInput
  }

  export type GameUncheckedCreateWithoutEventInput = {
    id?: string
    participantId: string
    action: string
    points: number
    actionDetails?: string | null
    relatedEntityId?: string | null
    createdAt?: Date | string
  }

  export type GameCreateOrConnectWithoutEventInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput>
  }

  export type GameCreateManyEventInputEnvelope = {
    data: GameCreateManyEventInput | GameCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type MatchSuggestionCreateWithoutEventInput = {
    id?: string
    score: number
    reason?: string | null
    createdAt?: Date | string
    suggested: UserCreateNestedOneWithoutSuggestedForInput
    user: UserCreateNestedOneWithoutSuggestionsInput
  }

  export type MatchSuggestionUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    suggestedId: string
    score: number
    reason?: string | null
    createdAt?: Date | string
  }

  export type MatchSuggestionCreateOrConnectWithoutEventInput = {
    where: MatchSuggestionWhereUniqueInput
    create: XOR<MatchSuggestionCreateWithoutEventInput, MatchSuggestionUncheckedCreateWithoutEventInput>
  }

  export type MatchSuggestionCreateManyEventInputEnvelope = {
    data: MatchSuggestionCreateManyEventInput | MatchSuggestionCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ParticipantBadgeCreateWithoutEventInput = {
    id?: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    registration: RegistrationCreateNestedOneWithoutParticipantBadgesInput
    template: BadgeTemplateCreateNestedOneWithoutParticipantBadgesInput
  }

  export type ParticipantBadgeUncheckedCreateWithoutEventInput = {
    id?: string
    registrationId: string
    templateId: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParticipantBadgeCreateOrConnectWithoutEventInput = {
    where: ParticipantBadgeWhereUniqueInput
    create: XOR<ParticipantBadgeCreateWithoutEventInput, ParticipantBadgeUncheckedCreateWithoutEventInput>
  }

  export type ParticipantBadgeCreateManyEventInputEnvelope = {
    data: ParticipantBadgeCreateManyEventInput | ParticipantBadgeCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type RegistrationCreateWithoutEventInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentCreateNestedManyWithoutRequesterInput
    games?: GameCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutRegistrationInput
    ticket?: TicketCreateNestedOneWithoutRegistrationsInput
    sessions?: SessionParticipantCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationUncheckedCreateWithoutEventInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    ticketId?: string | null
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentUncheckedCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentUncheckedCreateNestedManyWithoutRequesterInput
    games?: GameUncheckedCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutRegistrationInput
    sessions?: SessionParticipantUncheckedCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationCreateOrConnectWithoutEventInput = {
    where: RegistrationWhereUniqueInput
    create: XOR<RegistrationCreateWithoutEventInput, RegistrationUncheckedCreateWithoutEventInput>
  }

  export type RegistrationCreateManyEventInputEnvelope = {
    data: RegistrationCreateManyEventInput | RegistrationCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type SponsorCreateWithoutEventInput = {
    id?: string
    name: string
    description?: string | null
    logo?: string | null
    website?: string | null
    level?: string
    visible?: boolean
    location?: string | null
    address?: string | null
    phone?: string | null
    mobile?: string | null
    email?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    facebookUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SponsorUncheckedCreateWithoutEventInput = {
    id?: string
    name: string
    description?: string | null
    logo?: string | null
    website?: string | null
    level?: string
    visible?: boolean
    location?: string | null
    address?: string | null
    phone?: string | null
    mobile?: string | null
    email?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    facebookUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SponsorCreateOrConnectWithoutEventInput = {
    where: SponsorWhereUniqueInput
    create: XOR<SponsorCreateWithoutEventInput, SponsorUncheckedCreateWithoutEventInput>
  }

  export type SponsorCreateManyEventInputEnvelope = {
    data: SponsorCreateManyEventInput | SponsorCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type TicketCreateWithoutEventInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string
    currency?: string
    quantity?: number | null
    sold?: number
    status?: string
    visibility?: string
    validFrom: Date | string
    validUntil: Date | string
    group?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    registrations?: RegistrationCreateNestedManyWithoutTicketInput
  }

  export type TicketUncheckedCreateWithoutEventInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string
    currency?: string
    quantity?: number | null
    sold?: number
    status?: string
    visibility?: string
    validFrom: Date | string
    validUntil: Date | string
    group?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    registrations?: RegistrationUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketCreateOrConnectWithoutEventInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput>
  }

  export type TicketCreateManyEventInputEnvelope = {
    data: TicketCreateManyEventInput | TicketCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type UserEventScoreCreateWithoutEventInput = {
    id?: string
    totalPoints?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    participant: RegistrationCreateNestedOneWithoutUserEventScoresInput
  }

  export type UserEventScoreUncheckedCreateWithoutEventInput = {
    id?: string
    participantId: string
    totalPoints?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type UserEventScoreCreateOrConnectWithoutEventInput = {
    where: UserEventScoreWhereUniqueInput
    create: XOR<UserEventScoreCreateWithoutEventInput, UserEventScoreUncheckedCreateWithoutEventInput>
  }

  export type UserEventScoreCreateManyEventInputEnvelope = {
    data: UserEventScoreCreateManyEventInput | UserEventScoreCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type UserMatchProfileCreateWithoutEventInput = {
    id?: string
    headline?: string | null
    bio?: string | null
    jobTitle?: string | null
    company?: string | null
    interests?: UserMatchProfileCreateinterestsInput | string[]
    goals?: UserMatchProfileCreategoalsInput | string[]
    availability?: UserMatchProfileCreateavailabilityInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMatchProfilesInput
  }

  export type UserMatchProfileUncheckedCreateWithoutEventInput = {
    id?: string
    userId: string
    headline?: string | null
    bio?: string | null
    jobTitle?: string | null
    company?: string | null
    interests?: UserMatchProfileCreateinterestsInput | string[]
    goals?: UserMatchProfileCreategoalsInput | string[]
    availability?: UserMatchProfileCreateavailabilityInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMatchProfileCreateOrConnectWithoutEventInput = {
    where: UserMatchProfileWhereUniqueInput
    create: XOR<UserMatchProfileCreateWithoutEventInput, UserMatchProfileUncheckedCreateWithoutEventInput>
  }

  export type UserMatchProfileCreateManyEventInputEnvelope = {
    data: UserMatchProfileCreateManyEventInput | UserMatchProfileCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentUpsertWithWhereUniqueWithoutEventInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutEventInput, AppointmentUncheckedUpdateWithoutEventInput>
    create: XOR<AppointmentCreateWithoutEventInput, AppointmentUncheckedCreateWithoutEventInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutEventInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutEventInput, AppointmentUncheckedUpdateWithoutEventInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutEventInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutEventInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: StringFilter<"Appointment"> | string
    eventId?: StringFilter<"Appointment"> | string
    requesterId?: StringFilter<"Appointment"> | string
    recipientId?: StringFilter<"Appointment"> | string
    status?: StringFilter<"Appointment"> | string
    message?: StringNullableFilter<"Appointment"> | string | null
    proposedTime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    confirmedTime?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    location?: StringNullableFilter<"Appointment"> | string | null
    notes?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
  }

  export type BadgeTemplateUpsertWithWhereUniqueWithoutEventInput = {
    where: BadgeTemplateWhereUniqueInput
    update: XOR<BadgeTemplateUpdateWithoutEventInput, BadgeTemplateUncheckedUpdateWithoutEventInput>
    create: XOR<BadgeTemplateCreateWithoutEventInput, BadgeTemplateUncheckedCreateWithoutEventInput>
  }

  export type BadgeTemplateUpdateWithWhereUniqueWithoutEventInput = {
    where: BadgeTemplateWhereUniqueInput
    data: XOR<BadgeTemplateUpdateWithoutEventInput, BadgeTemplateUncheckedUpdateWithoutEventInput>
  }

  export type BadgeTemplateUpdateManyWithWhereWithoutEventInput = {
    where: BadgeTemplateScalarWhereInput
    data: XOR<BadgeTemplateUpdateManyMutationInput, BadgeTemplateUncheckedUpdateManyWithoutEventInput>
  }

  export type BadgeTemplateScalarWhereInput = {
    AND?: BadgeTemplateScalarWhereInput | BadgeTemplateScalarWhereInput[]
    OR?: BadgeTemplateScalarWhereInput[]
    NOT?: BadgeTemplateScalarWhereInput | BadgeTemplateScalarWhereInput[]
    id?: StringFilter<"BadgeTemplate"> | string
    name?: StringFilter<"BadgeTemplate"> | string
    description?: StringNullableFilter<"BadgeTemplate"> | string | null
    canvasData?: StringFilter<"BadgeTemplate"> | string
    isGlobal?: BoolFilter<"BadgeTemplate"> | boolean
    eventId?: StringNullableFilter<"BadgeTemplate"> | string | null
    isActive?: BoolFilter<"BadgeTemplate"> | boolean
    createdAt?: DateTimeFilter<"BadgeTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"BadgeTemplate"> | Date | string
  }

  export type BadgeUpsertWithWhereUniqueWithoutEventInput = {
    where: BadgeWhereUniqueInput
    update: XOR<BadgeUpdateWithoutEventInput, BadgeUncheckedUpdateWithoutEventInput>
    create: XOR<BadgeCreateWithoutEventInput, BadgeUncheckedCreateWithoutEventInput>
  }

  export type BadgeUpdateWithWhereUniqueWithoutEventInput = {
    where: BadgeWhereUniqueInput
    data: XOR<BadgeUpdateWithoutEventInput, BadgeUncheckedUpdateWithoutEventInput>
  }

  export type BadgeUpdateManyWithWhereWithoutEventInput = {
    where: BadgeScalarWhereInput
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyWithoutEventInput>
  }

  export type BadgeScalarWhereInput = {
    AND?: BadgeScalarWhereInput | BadgeScalarWhereInput[]
    OR?: BadgeScalarWhereInput[]
    NOT?: BadgeScalarWhereInput | BadgeScalarWhereInput[]
    id?: StringFilter<"Badge"> | string
    eventId?: StringFilter<"Badge"> | string
    name?: StringNullableFilter<"Badge"> | string | null
    canvasData?: StringNullableFilter<"Badge"> | string | null
    isDefault?: BoolFilter<"Badge"> | boolean
    createdAt?: DateTimeFilter<"Badge"> | Date | string
    updatedAt?: DateTimeFilter<"Badge"> | Date | string
  }

  export type EmailCampaignUpsertWithWhereUniqueWithoutEventInput = {
    where: EmailCampaignWhereUniqueInput
    update: XOR<EmailCampaignUpdateWithoutEventInput, EmailCampaignUncheckedUpdateWithoutEventInput>
    create: XOR<EmailCampaignCreateWithoutEventInput, EmailCampaignUncheckedCreateWithoutEventInput>
  }

  export type EmailCampaignUpdateWithWhereUniqueWithoutEventInput = {
    where: EmailCampaignWhereUniqueInput
    data: XOR<EmailCampaignUpdateWithoutEventInput, EmailCampaignUncheckedUpdateWithoutEventInput>
  }

  export type EmailCampaignUpdateManyWithWhereWithoutEventInput = {
    where: EmailCampaignScalarWhereInput
    data: XOR<EmailCampaignUpdateManyMutationInput, EmailCampaignUncheckedUpdateManyWithoutEventInput>
  }

  export type EmailCampaignScalarWhereInput = {
    AND?: EmailCampaignScalarWhereInput | EmailCampaignScalarWhereInput[]
    OR?: EmailCampaignScalarWhereInput[]
    NOT?: EmailCampaignScalarWhereInput | EmailCampaignScalarWhereInput[]
    id?: StringFilter<"EmailCampaign"> | string
    eventId?: StringFilter<"EmailCampaign"> | string
    name?: StringFilter<"EmailCampaign"> | string
    description?: StringNullableFilter<"EmailCampaign"> | string | null
    type?: StringFilter<"EmailCampaign"> | string
    recipientType?: StringFilter<"EmailCampaign"> | string
    subject?: StringFilter<"EmailCampaign"> | string
    htmlContent?: StringFilter<"EmailCampaign"> | string
    textContent?: StringNullableFilter<"EmailCampaign"> | string | null
    status?: StringFilter<"EmailCampaign"> | string
    scheduledAt?: DateTimeNullableFilter<"EmailCampaign"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"EmailCampaign"> | Date | string | null
    totalRecipients?: IntNullableFilter<"EmailCampaign"> | number | null
    successCount?: IntNullableFilter<"EmailCampaign"> | number | null
    failureCount?: IntNullableFilter<"EmailCampaign"> | number | null
    createdAt?: DateTimeFilter<"EmailCampaign"> | Date | string
    updatedAt?: DateTimeFilter<"EmailCampaign"> | Date | string
  }

  export type EmailTemplateUpsertWithWhereUniqueWithoutEventInput = {
    where: EmailTemplateWhereUniqueInput
    update: XOR<EmailTemplateUpdateWithoutEventInput, EmailTemplateUncheckedUpdateWithoutEventInput>
    create: XOR<EmailTemplateCreateWithoutEventInput, EmailTemplateUncheckedCreateWithoutEventInput>
  }

  export type EmailTemplateUpdateWithWhereUniqueWithoutEventInput = {
    where: EmailTemplateWhereUniqueInput
    data: XOR<EmailTemplateUpdateWithoutEventInput, EmailTemplateUncheckedUpdateWithoutEventInput>
  }

  export type EmailTemplateUpdateManyWithWhereWithoutEventInput = {
    where: EmailTemplateScalarWhereInput
    data: XOR<EmailTemplateUpdateManyMutationInput, EmailTemplateUncheckedUpdateManyWithoutEventInput>
  }

  export type EmailTemplateScalarWhereInput = {
    AND?: EmailTemplateScalarWhereInput | EmailTemplateScalarWhereInput[]
    OR?: EmailTemplateScalarWhereInput[]
    NOT?: EmailTemplateScalarWhereInput | EmailTemplateScalarWhereInput[]
    id?: StringFilter<"EmailTemplate"> | string
    name?: StringFilter<"EmailTemplate"> | string
    description?: StringNullableFilter<"EmailTemplate"> | string | null
    subject?: StringFilter<"EmailTemplate"> | string
    htmlContent?: StringFilter<"EmailTemplate"> | string
    textContent?: StringNullableFilter<"EmailTemplate"> | string | null
    type?: StringFilter<"EmailTemplate"> | string
    category?: StringNullableFilter<"EmailTemplate"> | string | null
    isGlobal?: BoolFilter<"EmailTemplate"> | boolean
    eventId?: StringNullableFilter<"EmailTemplate"> | string | null
    isActive?: BoolFilter<"EmailTemplate"> | boolean
    isDefault?: BoolFilter<"EmailTemplate"> | boolean
    createdAt?: DateTimeFilter<"EmailTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"EmailTemplate"> | Date | string
  }

  export type event_sessionsUpsertWithWhereUniqueWithoutEventsInput = {
    where: event_sessionsWhereUniqueInput
    update: XOR<event_sessionsUpdateWithoutEventsInput, event_sessionsUncheckedUpdateWithoutEventsInput>
    create: XOR<event_sessionsCreateWithoutEventsInput, event_sessionsUncheckedCreateWithoutEventsInput>
  }

  export type event_sessionsUpdateWithWhereUniqueWithoutEventsInput = {
    where: event_sessionsWhereUniqueInput
    data: XOR<event_sessionsUpdateWithoutEventsInput, event_sessionsUncheckedUpdateWithoutEventsInput>
  }

  export type event_sessionsUpdateManyWithWhereWithoutEventsInput = {
    where: event_sessionsScalarWhereInput
    data: XOR<event_sessionsUpdateManyMutationInput, event_sessionsUncheckedUpdateManyWithoutEventsInput>
  }

  export type event_sessionsScalarWhereInput = {
    AND?: event_sessionsScalarWhereInput | event_sessionsScalarWhereInput[]
    OR?: event_sessionsScalarWhereInput[]
    NOT?: event_sessionsScalarWhereInput | event_sessionsScalarWhereInput[]
    id?: StringFilter<"event_sessions"> | string
    title?: StringFilter<"event_sessions"> | string
    description?: StringNullableFilter<"event_sessions"> | string | null
    start_date?: DateTimeFilter<"event_sessions"> | Date | string
    end_date?: DateTimeFilter<"event_sessions"> | Date | string
    start_time?: StringFilter<"event_sessions"> | string
    end_time?: StringFilter<"event_sessions"> | string
    location?: StringNullableFilter<"event_sessions"> | string | null
    speaker?: StringNullableFilter<"event_sessions"> | string | null
    capacity?: IntNullableFilter<"event_sessions"> | number | null
    event_id?: StringFilter<"event_sessions"> | string
    created_at?: DateTimeFilter<"event_sessions"> | Date | string
    updated_at?: DateTimeFilter<"event_sessions"> | Date | string
    banner?: StringNullableFilter<"event_sessions"> | string | null
    format?: StringNullableFilter<"event_sessions"> | string | null
    video_url?: StringNullableFilter<"event_sessions"> | string | null
  }

  export type UserUpsertWithoutEventsInput = {
    update: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
  }

  export type UserUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUpdateManyWithoutSuggestedNestedInput
    suggestions?: MatchSuggestionUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUncheckedUpdateManyWithoutSuggestedNestedInput
    suggestions?: MatchSuggestionUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameUpsertWithWhereUniqueWithoutEventInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutEventInput, GameUncheckedUpdateWithoutEventInput>
    create: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput>
  }

  export type GameUpdateWithWhereUniqueWithoutEventInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutEventInput, GameUncheckedUpdateWithoutEventInput>
  }

  export type GameUpdateManyWithWhereWithoutEventInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutEventInput>
  }

  export type GameScalarWhereInput = {
    AND?: GameScalarWhereInput | GameScalarWhereInput[]
    OR?: GameScalarWhereInput[]
    NOT?: GameScalarWhereInput | GameScalarWhereInput[]
    id?: StringFilter<"Game"> | string
    eventId?: StringFilter<"Game"> | string
    participantId?: StringFilter<"Game"> | string
    action?: StringFilter<"Game"> | string
    points?: IntFilter<"Game"> | number
    actionDetails?: StringNullableFilter<"Game"> | string | null
    relatedEntityId?: StringNullableFilter<"Game"> | string | null
    createdAt?: DateTimeFilter<"Game"> | Date | string
  }

  export type MatchSuggestionUpsertWithWhereUniqueWithoutEventInput = {
    where: MatchSuggestionWhereUniqueInput
    update: XOR<MatchSuggestionUpdateWithoutEventInput, MatchSuggestionUncheckedUpdateWithoutEventInput>
    create: XOR<MatchSuggestionCreateWithoutEventInput, MatchSuggestionUncheckedCreateWithoutEventInput>
  }

  export type MatchSuggestionUpdateWithWhereUniqueWithoutEventInput = {
    where: MatchSuggestionWhereUniqueInput
    data: XOR<MatchSuggestionUpdateWithoutEventInput, MatchSuggestionUncheckedUpdateWithoutEventInput>
  }

  export type MatchSuggestionUpdateManyWithWhereWithoutEventInput = {
    where: MatchSuggestionScalarWhereInput
    data: XOR<MatchSuggestionUpdateManyMutationInput, MatchSuggestionUncheckedUpdateManyWithoutEventInput>
  }

  export type ParticipantBadgeUpsertWithWhereUniqueWithoutEventInput = {
    where: ParticipantBadgeWhereUniqueInput
    update: XOR<ParticipantBadgeUpdateWithoutEventInput, ParticipantBadgeUncheckedUpdateWithoutEventInput>
    create: XOR<ParticipantBadgeCreateWithoutEventInput, ParticipantBadgeUncheckedCreateWithoutEventInput>
  }

  export type ParticipantBadgeUpdateWithWhereUniqueWithoutEventInput = {
    where: ParticipantBadgeWhereUniqueInput
    data: XOR<ParticipantBadgeUpdateWithoutEventInput, ParticipantBadgeUncheckedUpdateWithoutEventInput>
  }

  export type ParticipantBadgeUpdateManyWithWhereWithoutEventInput = {
    where: ParticipantBadgeScalarWhereInput
    data: XOR<ParticipantBadgeUpdateManyMutationInput, ParticipantBadgeUncheckedUpdateManyWithoutEventInput>
  }

  export type ParticipantBadgeScalarWhereInput = {
    AND?: ParticipantBadgeScalarWhereInput | ParticipantBadgeScalarWhereInput[]
    OR?: ParticipantBadgeScalarWhereInput[]
    NOT?: ParticipantBadgeScalarWhereInput | ParticipantBadgeScalarWhereInput[]
    id?: StringFilter<"ParticipantBadge"> | string
    registrationId?: StringFilter<"ParticipantBadge"> | string
    eventId?: StringFilter<"ParticipantBadge"> | string
    templateId?: StringFilter<"ParticipantBadge"> | string
    status?: StringFilter<"ParticipantBadge"> | string
    generatedAt?: DateTimeFilter<"ParticipantBadge"> | Date | string
    printedAt?: DateTimeNullableFilter<"ParticipantBadge"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"ParticipantBadge"> | Date | string | null
    customData?: StringNullableFilter<"ParticipantBadge"> | string | null
    qrCodeData?: StringNullableFilter<"ParticipantBadge"> | string | null
    createdAt?: DateTimeFilter<"ParticipantBadge"> | Date | string
    updatedAt?: DateTimeFilter<"ParticipantBadge"> | Date | string
  }

  export type RegistrationUpsertWithWhereUniqueWithoutEventInput = {
    where: RegistrationWhereUniqueInput
    update: XOR<RegistrationUpdateWithoutEventInput, RegistrationUncheckedUpdateWithoutEventInput>
    create: XOR<RegistrationCreateWithoutEventInput, RegistrationUncheckedCreateWithoutEventInput>
  }

  export type RegistrationUpdateWithWhereUniqueWithoutEventInput = {
    where: RegistrationWhereUniqueInput
    data: XOR<RegistrationUpdateWithoutEventInput, RegistrationUncheckedUpdateWithoutEventInput>
  }

  export type RegistrationUpdateManyWithWhereWithoutEventInput = {
    where: RegistrationScalarWhereInput
    data: XOR<RegistrationUpdateManyMutationInput, RegistrationUncheckedUpdateManyWithoutEventInput>
  }

  export type RegistrationScalarWhereInput = {
    AND?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
    OR?: RegistrationScalarWhereInput[]
    NOT?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
    id?: StringFilter<"Registration"> | string
    firstName?: StringFilter<"Registration"> | string
    lastName?: StringFilter<"Registration"> | string
    email?: StringFilter<"Registration"> | string
    phone?: StringFilter<"Registration"> | string
    type?: StringFilter<"Registration"> | string
    eventId?: StringFilter<"Registration"> | string
    ticketId?: StringNullableFilter<"Registration"> | string | null
    qrCode?: StringFilter<"Registration"> | string
    createdAt?: DateTimeFilter<"Registration"> | Date | string
    updatedAt?: DateTimeFilter<"Registration"> | Date | string
    checkedIn?: BoolFilter<"Registration"> | boolean
    checkInTime?: DateTimeNullableFilter<"Registration"> | Date | string | null
    shortCode?: StringNullableFilter<"Registration"> | string | null
    company?: StringNullableFilter<"Registration"> | string | null
    jobTitle?: StringNullableFilter<"Registration"> | string | null
  }

  export type SponsorUpsertWithWhereUniqueWithoutEventInput = {
    where: SponsorWhereUniqueInput
    update: XOR<SponsorUpdateWithoutEventInput, SponsorUncheckedUpdateWithoutEventInput>
    create: XOR<SponsorCreateWithoutEventInput, SponsorUncheckedCreateWithoutEventInput>
  }

  export type SponsorUpdateWithWhereUniqueWithoutEventInput = {
    where: SponsorWhereUniqueInput
    data: XOR<SponsorUpdateWithoutEventInput, SponsorUncheckedUpdateWithoutEventInput>
  }

  export type SponsorUpdateManyWithWhereWithoutEventInput = {
    where: SponsorScalarWhereInput
    data: XOR<SponsorUpdateManyMutationInput, SponsorUncheckedUpdateManyWithoutEventInput>
  }

  export type SponsorScalarWhereInput = {
    AND?: SponsorScalarWhereInput | SponsorScalarWhereInput[]
    OR?: SponsorScalarWhereInput[]
    NOT?: SponsorScalarWhereInput | SponsorScalarWhereInput[]
    id?: StringFilter<"Sponsor"> | string
    name?: StringFilter<"Sponsor"> | string
    description?: StringNullableFilter<"Sponsor"> | string | null
    logo?: StringNullableFilter<"Sponsor"> | string | null
    website?: StringNullableFilter<"Sponsor"> | string | null
    level?: StringFilter<"Sponsor"> | string
    visible?: BoolFilter<"Sponsor"> | boolean
    eventId?: StringFilter<"Sponsor"> | string
    location?: StringNullableFilter<"Sponsor"> | string | null
    address?: StringNullableFilter<"Sponsor"> | string | null
    phone?: StringNullableFilter<"Sponsor"> | string | null
    mobile?: StringNullableFilter<"Sponsor"> | string | null
    email?: StringNullableFilter<"Sponsor"> | string | null
    linkedinUrl?: StringNullableFilter<"Sponsor"> | string | null
    twitterUrl?: StringNullableFilter<"Sponsor"> | string | null
    facebookUrl?: StringNullableFilter<"Sponsor"> | string | null
    documents?: JsonNullableFilter<"Sponsor">
    createdAt?: DateTimeFilter<"Sponsor"> | Date | string
    updatedAt?: DateTimeFilter<"Sponsor"> | Date | string
  }

  export type TicketUpsertWithWhereUniqueWithoutEventInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutEventInput, TicketUncheckedUpdateWithoutEventInput>
    create: XOR<TicketCreateWithoutEventInput, TicketUncheckedCreateWithoutEventInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutEventInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutEventInput, TicketUncheckedUpdateWithoutEventInput>
  }

  export type TicketUpdateManyWithWhereWithoutEventInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutEventInput>
  }

  export type TicketScalarWhereInput = {
    AND?: TicketScalarWhereInput | TicketScalarWhereInput[]
    OR?: TicketScalarWhereInput[]
    NOT?: TicketScalarWhereInput | TicketScalarWhereInput[]
    id?: StringFilter<"Ticket"> | string
    name?: StringFilter<"Ticket"> | string
    description?: StringNullableFilter<"Ticket"> | string | null
    price?: DecimalFilter<"Ticket"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Ticket"> | string
    quantity?: IntNullableFilter<"Ticket"> | number | null
    sold?: IntFilter<"Ticket"> | number
    status?: StringFilter<"Ticket"> | string
    visibility?: StringFilter<"Ticket"> | string
    validFrom?: DateTimeFilter<"Ticket"> | Date | string
    validUntil?: DateTimeFilter<"Ticket"> | Date | string
    group?: StringFilter<"Ticket"> | string
    eventId?: StringFilter<"Ticket"> | string
    createdAt?: DateTimeFilter<"Ticket"> | Date | string
    updatedAt?: DateTimeFilter<"Ticket"> | Date | string
  }

  export type UserEventScoreUpsertWithWhereUniqueWithoutEventInput = {
    where: UserEventScoreWhereUniqueInput
    update: XOR<UserEventScoreUpdateWithoutEventInput, UserEventScoreUncheckedUpdateWithoutEventInput>
    create: XOR<UserEventScoreCreateWithoutEventInput, UserEventScoreUncheckedCreateWithoutEventInput>
  }

  export type UserEventScoreUpdateWithWhereUniqueWithoutEventInput = {
    where: UserEventScoreWhereUniqueInput
    data: XOR<UserEventScoreUpdateWithoutEventInput, UserEventScoreUncheckedUpdateWithoutEventInput>
  }

  export type UserEventScoreUpdateManyWithWhereWithoutEventInput = {
    where: UserEventScoreScalarWhereInput
    data: XOR<UserEventScoreUpdateManyMutationInput, UserEventScoreUncheckedUpdateManyWithoutEventInput>
  }

  export type UserEventScoreScalarWhereInput = {
    AND?: UserEventScoreScalarWhereInput | UserEventScoreScalarWhereInput[]
    OR?: UserEventScoreScalarWhereInput[]
    NOT?: UserEventScoreScalarWhereInput | UserEventScoreScalarWhereInput[]
    id?: StringFilter<"UserEventScore"> | string
    eventId?: StringFilter<"UserEventScore"> | string
    participantId?: StringFilter<"UserEventScore"> | string
    totalPoints?: IntFilter<"UserEventScore"> | number
    lastUpdated?: DateTimeFilter<"UserEventScore"> | Date | string
    createdAt?: DateTimeFilter<"UserEventScore"> | Date | string
  }

  export type UserMatchProfileUpsertWithWhereUniqueWithoutEventInput = {
    where: UserMatchProfileWhereUniqueInput
    update: XOR<UserMatchProfileUpdateWithoutEventInput, UserMatchProfileUncheckedUpdateWithoutEventInput>
    create: XOR<UserMatchProfileCreateWithoutEventInput, UserMatchProfileUncheckedCreateWithoutEventInput>
  }

  export type UserMatchProfileUpdateWithWhereUniqueWithoutEventInput = {
    where: UserMatchProfileWhereUniqueInput
    data: XOR<UserMatchProfileUpdateWithoutEventInput, UserMatchProfileUncheckedUpdateWithoutEventInput>
  }

  export type UserMatchProfileUpdateManyWithWhereWithoutEventInput = {
    where: UserMatchProfileScalarWhereInput
    data: XOR<UserMatchProfileUpdateManyMutationInput, UserMatchProfileUncheckedUpdateManyWithoutEventInput>
  }

  export type AppointmentCreateWithoutRecipientInput = {
    id?: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutAppointmentsInput
    requester: RegistrationCreateNestedOneWithoutSentAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutRecipientInput = {
    id?: string
    eventId: string
    requesterId: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateOrConnectWithoutRecipientInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutRecipientInput, AppointmentUncheckedCreateWithoutRecipientInput>
  }

  export type AppointmentCreateManyRecipientInputEnvelope = {
    data: AppointmentCreateManyRecipientInput | AppointmentCreateManyRecipientInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutRequesterInput = {
    id?: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutAppointmentsInput
    recipient: RegistrationCreateNestedOneWithoutReceivedAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutRequesterInput = {
    id?: string
    eventId: string
    recipientId: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateOrConnectWithoutRequesterInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutRequesterInput, AppointmentUncheckedCreateWithoutRequesterInput>
  }

  export type AppointmentCreateManyRequesterInputEnvelope = {
    data: AppointmentCreateManyRequesterInput | AppointmentCreateManyRequesterInput[]
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutParticipantInput = {
    id?: string
    action: string
    points: number
    actionDetails?: string | null
    relatedEntityId?: string | null
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutGamesInput
  }

  export type GameUncheckedCreateWithoutParticipantInput = {
    id?: string
    eventId: string
    action: string
    points: number
    actionDetails?: string | null
    relatedEntityId?: string | null
    createdAt?: Date | string
  }

  export type GameCreateOrConnectWithoutParticipantInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutParticipantInput, GameUncheckedCreateWithoutParticipantInput>
  }

  export type GameCreateManyParticipantInputEnvelope = {
    data: GameCreateManyParticipantInput | GameCreateManyParticipantInput[]
    skipDuplicates?: boolean
  }

  export type ParticipantBadgeCreateWithoutRegistrationInput = {
    id?: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutParticipantBadgesInput
    template: BadgeTemplateCreateNestedOneWithoutParticipantBadgesInput
  }

  export type ParticipantBadgeUncheckedCreateWithoutRegistrationInput = {
    id?: string
    eventId: string
    templateId: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParticipantBadgeCreateOrConnectWithoutRegistrationInput = {
    where: ParticipantBadgeWhereUniqueInput
    create: XOR<ParticipantBadgeCreateWithoutRegistrationInput, ParticipantBadgeUncheckedCreateWithoutRegistrationInput>
  }

  export type ParticipantBadgeCreateManyRegistrationInputEnvelope = {
    data: ParticipantBadgeCreateManyRegistrationInput | ParticipantBadgeCreateManyRegistrationInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutRegistrationsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutRegistrationsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutRegistrationsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutRegistrationsInput, EventUncheckedCreateWithoutRegistrationsInput>
  }

  export type TicketCreateWithoutRegistrationsInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string
    currency?: string
    quantity?: number | null
    sold?: number
    status?: string
    visibility?: string
    validFrom: Date | string
    validUntil: Date | string
    group?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutTicketsInput
  }

  export type TicketUncheckedCreateWithoutRegistrationsInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string
    currency?: string
    quantity?: number | null
    sold?: number
    status?: string
    visibility?: string
    validFrom: Date | string
    validUntil: Date | string
    group?: string
    eventId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketCreateOrConnectWithoutRegistrationsInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutRegistrationsInput, TicketUncheckedCreateWithoutRegistrationsInput>
  }

  export type SessionParticipantCreateWithoutParticipantInput = {
    id?: string
    registeredAt?: Date | string
    attendedSession?: boolean
    attendanceTime?: Date | string | null
    session: event_sessionsCreateNestedOneWithoutParticipantsInput
  }

  export type SessionParticipantUncheckedCreateWithoutParticipantInput = {
    id?: string
    sessionId: string
    registeredAt?: Date | string
    attendedSession?: boolean
    attendanceTime?: Date | string | null
  }

  export type SessionParticipantCreateOrConnectWithoutParticipantInput = {
    where: SessionParticipantWhereUniqueInput
    create: XOR<SessionParticipantCreateWithoutParticipantInput, SessionParticipantUncheckedCreateWithoutParticipantInput>
  }

  export type SessionParticipantCreateManyParticipantInputEnvelope = {
    data: SessionParticipantCreateManyParticipantInput | SessionParticipantCreateManyParticipantInput[]
    skipDuplicates?: boolean
  }

  export type UserEventScoreCreateWithoutParticipantInput = {
    id?: string
    totalPoints?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutUserEventScoresInput
  }

  export type UserEventScoreUncheckedCreateWithoutParticipantInput = {
    id?: string
    eventId: string
    totalPoints?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type UserEventScoreCreateOrConnectWithoutParticipantInput = {
    where: UserEventScoreWhereUniqueInput
    create: XOR<UserEventScoreCreateWithoutParticipantInput, UserEventScoreUncheckedCreateWithoutParticipantInput>
  }

  export type UserEventScoreCreateManyParticipantInputEnvelope = {
    data: UserEventScoreCreateManyParticipantInput | UserEventScoreCreateManyParticipantInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentUpsertWithWhereUniqueWithoutRecipientInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutRecipientInput, AppointmentUncheckedUpdateWithoutRecipientInput>
    create: XOR<AppointmentCreateWithoutRecipientInput, AppointmentUncheckedCreateWithoutRecipientInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutRecipientInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutRecipientInput, AppointmentUncheckedUpdateWithoutRecipientInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutRecipientInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutRecipientInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutRequesterInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutRequesterInput, AppointmentUncheckedUpdateWithoutRequesterInput>
    create: XOR<AppointmentCreateWithoutRequesterInput, AppointmentUncheckedCreateWithoutRequesterInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutRequesterInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutRequesterInput, AppointmentUncheckedUpdateWithoutRequesterInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutRequesterInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutRequesterInput>
  }

  export type GameUpsertWithWhereUniqueWithoutParticipantInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutParticipantInput, GameUncheckedUpdateWithoutParticipantInput>
    create: XOR<GameCreateWithoutParticipantInput, GameUncheckedCreateWithoutParticipantInput>
  }

  export type GameUpdateWithWhereUniqueWithoutParticipantInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutParticipantInput, GameUncheckedUpdateWithoutParticipantInput>
  }

  export type GameUpdateManyWithWhereWithoutParticipantInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutParticipantInput>
  }

  export type ParticipantBadgeUpsertWithWhereUniqueWithoutRegistrationInput = {
    where: ParticipantBadgeWhereUniqueInput
    update: XOR<ParticipantBadgeUpdateWithoutRegistrationInput, ParticipantBadgeUncheckedUpdateWithoutRegistrationInput>
    create: XOR<ParticipantBadgeCreateWithoutRegistrationInput, ParticipantBadgeUncheckedCreateWithoutRegistrationInput>
  }

  export type ParticipantBadgeUpdateWithWhereUniqueWithoutRegistrationInput = {
    where: ParticipantBadgeWhereUniqueInput
    data: XOR<ParticipantBadgeUpdateWithoutRegistrationInput, ParticipantBadgeUncheckedUpdateWithoutRegistrationInput>
  }

  export type ParticipantBadgeUpdateManyWithWhereWithoutRegistrationInput = {
    where: ParticipantBadgeScalarWhereInput
    data: XOR<ParticipantBadgeUpdateManyMutationInput, ParticipantBadgeUncheckedUpdateManyWithoutRegistrationInput>
  }

  export type EventUpsertWithoutRegistrationsInput = {
    update: XOR<EventUpdateWithoutRegistrationsInput, EventUncheckedUpdateWithoutRegistrationsInput>
    create: XOR<EventCreateWithoutRegistrationsInput, EventUncheckedCreateWithoutRegistrationsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutRegistrationsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutRegistrationsInput, EventUncheckedUpdateWithoutRegistrationsInput>
  }

  export type EventUpdateWithoutRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type TicketUpsertWithoutRegistrationsInput = {
    update: XOR<TicketUpdateWithoutRegistrationsInput, TicketUncheckedUpdateWithoutRegistrationsInput>
    create: XOR<TicketCreateWithoutRegistrationsInput, TicketUncheckedCreateWithoutRegistrationsInput>
    where?: TicketWhereInput
  }

  export type TicketUpdateToOneWithWhereWithoutRegistrationsInput = {
    where?: TicketWhereInput
    data: XOR<TicketUpdateWithoutRegistrationsInput, TicketUncheckedUpdateWithoutRegistrationsInput>
  }

  export type TicketUpdateWithoutRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    sold?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type TicketUncheckedUpdateWithoutRegistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    sold?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionParticipantUpsertWithWhereUniqueWithoutParticipantInput = {
    where: SessionParticipantWhereUniqueInput
    update: XOR<SessionParticipantUpdateWithoutParticipantInput, SessionParticipantUncheckedUpdateWithoutParticipantInput>
    create: XOR<SessionParticipantCreateWithoutParticipantInput, SessionParticipantUncheckedCreateWithoutParticipantInput>
  }

  export type SessionParticipantUpdateWithWhereUniqueWithoutParticipantInput = {
    where: SessionParticipantWhereUniqueInput
    data: XOR<SessionParticipantUpdateWithoutParticipantInput, SessionParticipantUncheckedUpdateWithoutParticipantInput>
  }

  export type SessionParticipantUpdateManyWithWhereWithoutParticipantInput = {
    where: SessionParticipantScalarWhereInput
    data: XOR<SessionParticipantUpdateManyMutationInput, SessionParticipantUncheckedUpdateManyWithoutParticipantInput>
  }

  export type SessionParticipantScalarWhereInput = {
    AND?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
    OR?: SessionParticipantScalarWhereInput[]
    NOT?: SessionParticipantScalarWhereInput | SessionParticipantScalarWhereInput[]
    id?: StringFilter<"SessionParticipant"> | string
    sessionId?: StringFilter<"SessionParticipant"> | string
    participantId?: StringFilter<"SessionParticipant"> | string
    registeredAt?: DateTimeFilter<"SessionParticipant"> | Date | string
    attendedSession?: BoolFilter<"SessionParticipant"> | boolean
    attendanceTime?: DateTimeNullableFilter<"SessionParticipant"> | Date | string | null
  }

  export type UserEventScoreUpsertWithWhereUniqueWithoutParticipantInput = {
    where: UserEventScoreWhereUniqueInput
    update: XOR<UserEventScoreUpdateWithoutParticipantInput, UserEventScoreUncheckedUpdateWithoutParticipantInput>
    create: XOR<UserEventScoreCreateWithoutParticipantInput, UserEventScoreUncheckedCreateWithoutParticipantInput>
  }

  export type UserEventScoreUpdateWithWhereUniqueWithoutParticipantInput = {
    where: UserEventScoreWhereUniqueInput
    data: XOR<UserEventScoreUpdateWithoutParticipantInput, UserEventScoreUncheckedUpdateWithoutParticipantInput>
  }

  export type UserEventScoreUpdateManyWithWhereWithoutParticipantInput = {
    where: UserEventScoreScalarWhereInput
    data: XOR<UserEventScoreUpdateManyMutationInput, UserEventScoreUncheckedUpdateManyWithoutParticipantInput>
  }

  export type RegistrationCreateWithoutTicketInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentCreateNestedManyWithoutRequesterInput
    games?: GameCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutRegistrationInput
    event: EventCreateNestedOneWithoutRegistrationsInput
    sessions?: SessionParticipantCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationUncheckedCreateWithoutTicketInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    eventId: string
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentUncheckedCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentUncheckedCreateNestedManyWithoutRequesterInput
    games?: GameUncheckedCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutRegistrationInput
    sessions?: SessionParticipantUncheckedCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationCreateOrConnectWithoutTicketInput = {
    where: RegistrationWhereUniqueInput
    create: XOR<RegistrationCreateWithoutTicketInput, RegistrationUncheckedCreateWithoutTicketInput>
  }

  export type RegistrationCreateManyTicketInputEnvelope = {
    data: RegistrationCreateManyTicketInput | RegistrationCreateManyTicketInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutTicketsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutTicketsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutTicketsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutTicketsInput, EventUncheckedCreateWithoutTicketsInput>
  }

  export type RegistrationUpsertWithWhereUniqueWithoutTicketInput = {
    where: RegistrationWhereUniqueInput
    update: XOR<RegistrationUpdateWithoutTicketInput, RegistrationUncheckedUpdateWithoutTicketInput>
    create: XOR<RegistrationCreateWithoutTicketInput, RegistrationUncheckedCreateWithoutTicketInput>
  }

  export type RegistrationUpdateWithWhereUniqueWithoutTicketInput = {
    where: RegistrationWhereUniqueInput
    data: XOR<RegistrationUpdateWithoutTicketInput, RegistrationUncheckedUpdateWithoutTicketInput>
  }

  export type RegistrationUpdateManyWithWhereWithoutTicketInput = {
    where: RegistrationScalarWhereInput
    data: XOR<RegistrationUpdateManyMutationInput, RegistrationUncheckedUpdateManyWithoutTicketInput>
  }

  export type EventUpsertWithoutTicketsInput = {
    update: XOR<EventUpdateWithoutTicketsInput, EventUncheckedUpdateWithoutTicketsInput>
    create: XOR<EventCreateWithoutTicketsInput, EventUncheckedCreateWithoutTicketsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutTicketsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutTicketsInput, EventUncheckedUpdateWithoutTicketsInput>
  }

  export type EventUpdateWithoutTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateWithoutEvent_sessionsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutEvent_sessionsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutEvent_sessionsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEvent_sessionsInput, EventUncheckedCreateWithoutEvent_sessionsInput>
  }

  export type SessionParticipantCreateWithoutSessionInput = {
    id?: string
    registeredAt?: Date | string
    attendedSession?: boolean
    attendanceTime?: Date | string | null
    participant: RegistrationCreateNestedOneWithoutSessionsInput
  }

  export type SessionParticipantUncheckedCreateWithoutSessionInput = {
    id?: string
    participantId: string
    registeredAt?: Date | string
    attendedSession?: boolean
    attendanceTime?: Date | string | null
  }

  export type SessionParticipantCreateOrConnectWithoutSessionInput = {
    where: SessionParticipantWhereUniqueInput
    create: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput>
  }

  export type SessionParticipantCreateManySessionInputEnvelope = {
    data: SessionParticipantCreateManySessionInput | SessionParticipantCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithoutEvent_sessionsInput = {
    update: XOR<EventUpdateWithoutEvent_sessionsInput, EventUncheckedUpdateWithoutEvent_sessionsInput>
    create: XOR<EventCreateWithoutEvent_sessionsInput, EventUncheckedCreateWithoutEvent_sessionsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEvent_sessionsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEvent_sessionsInput, EventUncheckedUpdateWithoutEvent_sessionsInput>
  }

  export type EventUpdateWithoutEvent_sessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutEvent_sessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type SessionParticipantUpsertWithWhereUniqueWithoutSessionInput = {
    where: SessionParticipantWhereUniqueInput
    update: XOR<SessionParticipantUpdateWithoutSessionInput, SessionParticipantUncheckedUpdateWithoutSessionInput>
    create: XOR<SessionParticipantCreateWithoutSessionInput, SessionParticipantUncheckedCreateWithoutSessionInput>
  }

  export type SessionParticipantUpdateWithWhereUniqueWithoutSessionInput = {
    where: SessionParticipantWhereUniqueInput
    data: XOR<SessionParticipantUpdateWithoutSessionInput, SessionParticipantUncheckedUpdateWithoutSessionInput>
  }

  export type SessionParticipantUpdateManyWithWhereWithoutSessionInput = {
    where: SessionParticipantScalarWhereInput
    data: XOR<SessionParticipantUpdateManyMutationInput, SessionParticipantUncheckedUpdateManyWithoutSessionInput>
  }

  export type EventCreateWithoutSponsorsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutSponsorsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutSponsorsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutSponsorsInput, EventUncheckedCreateWithoutSponsorsInput>
  }

  export type EventUpsertWithoutSponsorsInput = {
    update: XOR<EventUpdateWithoutSponsorsInput, EventUncheckedUpdateWithoutSponsorsInput>
    create: XOR<EventCreateWithoutSponsorsInput, EventUncheckedCreateWithoutSponsorsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutSponsorsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutSponsorsInput, EventUncheckedUpdateWithoutSponsorsInput>
  }

  export type EventUpdateWithoutSponsorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutSponsorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type RegistrationCreateWithoutSessionsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentCreateNestedManyWithoutRequesterInput
    games?: GameCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutRegistrationInput
    event: EventCreateNestedOneWithoutRegistrationsInput
    ticket?: TicketCreateNestedOneWithoutRegistrationsInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationUncheckedCreateWithoutSessionsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    eventId: string
    ticketId?: string | null
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentUncheckedCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentUncheckedCreateNestedManyWithoutRequesterInput
    games?: GameUncheckedCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutRegistrationInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationCreateOrConnectWithoutSessionsInput = {
    where: RegistrationWhereUniqueInput
    create: XOR<RegistrationCreateWithoutSessionsInput, RegistrationUncheckedCreateWithoutSessionsInput>
  }

  export type event_sessionsCreateWithoutParticipantsInput = {
    id: string
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    start_time: string
    end_time: string
    location?: string | null
    speaker?: string | null
    capacity?: number | null
    created_at?: Date | string
    updated_at: Date | string
    banner?: string | null
    format?: string | null
    video_url?: string | null
    events: EventCreateNestedOneWithoutEvent_sessionsInput
  }

  export type event_sessionsUncheckedCreateWithoutParticipantsInput = {
    id: string
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    start_time: string
    end_time: string
    location?: string | null
    speaker?: string | null
    capacity?: number | null
    event_id: string
    created_at?: Date | string
    updated_at: Date | string
    banner?: string | null
    format?: string | null
    video_url?: string | null
  }

  export type event_sessionsCreateOrConnectWithoutParticipantsInput = {
    where: event_sessionsWhereUniqueInput
    create: XOR<event_sessionsCreateWithoutParticipantsInput, event_sessionsUncheckedCreateWithoutParticipantsInput>
  }

  export type RegistrationUpsertWithoutSessionsInput = {
    update: XOR<RegistrationUpdateWithoutSessionsInput, RegistrationUncheckedUpdateWithoutSessionsInput>
    create: XOR<RegistrationCreateWithoutSessionsInput, RegistrationUncheckedCreateWithoutSessionsInput>
    where?: RegistrationWhereInput
  }

  export type RegistrationUpdateToOneWithWhereWithoutSessionsInput = {
    where?: RegistrationWhereInput
    data: XOR<RegistrationUpdateWithoutSessionsInput, RegistrationUncheckedUpdateWithoutSessionsInput>
  }

  export type RegistrationUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUpdateManyWithoutRequesterNestedInput
    games?: GameUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutRegistrationNestedInput
    event?: EventUpdateOneRequiredWithoutRegistrationsNestedInput
    ticket?: TicketUpdateOneWithoutRegistrationsNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    ticketId?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUncheckedUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUncheckedUpdateManyWithoutRequesterNestedInput
    games?: GameUncheckedUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutRegistrationNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type event_sessionsUpsertWithoutParticipantsInput = {
    update: XOR<event_sessionsUpdateWithoutParticipantsInput, event_sessionsUncheckedUpdateWithoutParticipantsInput>
    create: XOR<event_sessionsCreateWithoutParticipantsInput, event_sessionsUncheckedCreateWithoutParticipantsInput>
    where?: event_sessionsWhereInput
  }

  export type event_sessionsUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: event_sessionsWhereInput
    data: XOR<event_sessionsUpdateWithoutParticipantsInput, event_sessionsUncheckedUpdateWithoutParticipantsInput>
  }

  export type event_sessionsUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateOneRequiredWithoutEvent_sessionsNestedInput
  }

  export type event_sessionsUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    event_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutAppointmentsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAppointmentsInput, EventUncheckedCreateWithoutAppointmentsInput>
  }

  export type RegistrationCreateWithoutReceivedAppointmentsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    sentAppointments?: AppointmentCreateNestedManyWithoutRequesterInput
    games?: GameCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutRegistrationInput
    event: EventCreateNestedOneWithoutRegistrationsInput
    ticket?: TicketCreateNestedOneWithoutRegistrationsInput
    sessions?: SessionParticipantCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationUncheckedCreateWithoutReceivedAppointmentsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    eventId: string
    ticketId?: string | null
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    sentAppointments?: AppointmentUncheckedCreateNestedManyWithoutRequesterInput
    games?: GameUncheckedCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutRegistrationInput
    sessions?: SessionParticipantUncheckedCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationCreateOrConnectWithoutReceivedAppointmentsInput = {
    where: RegistrationWhereUniqueInput
    create: XOR<RegistrationCreateWithoutReceivedAppointmentsInput, RegistrationUncheckedCreateWithoutReceivedAppointmentsInput>
  }

  export type RegistrationCreateWithoutSentAppointmentsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentCreateNestedManyWithoutRecipientInput
    games?: GameCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutRegistrationInput
    event: EventCreateNestedOneWithoutRegistrationsInput
    ticket?: TicketCreateNestedOneWithoutRegistrationsInput
    sessions?: SessionParticipantCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationUncheckedCreateWithoutSentAppointmentsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    eventId: string
    ticketId?: string | null
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentUncheckedCreateNestedManyWithoutRecipientInput
    games?: GameUncheckedCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutRegistrationInput
    sessions?: SessionParticipantUncheckedCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationCreateOrConnectWithoutSentAppointmentsInput = {
    where: RegistrationWhereUniqueInput
    create: XOR<RegistrationCreateWithoutSentAppointmentsInput, RegistrationUncheckedCreateWithoutSentAppointmentsInput>
  }

  export type EventUpsertWithoutAppointmentsInput = {
    update: XOR<EventUpdateWithoutAppointmentsInput, EventUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<EventCreateWithoutAppointmentsInput, EventUncheckedCreateWithoutAppointmentsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutAppointmentsInput, EventUncheckedUpdateWithoutAppointmentsInput>
  }

  export type EventUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type RegistrationUpsertWithoutReceivedAppointmentsInput = {
    update: XOR<RegistrationUpdateWithoutReceivedAppointmentsInput, RegistrationUncheckedUpdateWithoutReceivedAppointmentsInput>
    create: XOR<RegistrationCreateWithoutReceivedAppointmentsInput, RegistrationUncheckedCreateWithoutReceivedAppointmentsInput>
    where?: RegistrationWhereInput
  }

  export type RegistrationUpdateToOneWithWhereWithoutReceivedAppointmentsInput = {
    where?: RegistrationWhereInput
    data: XOR<RegistrationUpdateWithoutReceivedAppointmentsInput, RegistrationUncheckedUpdateWithoutReceivedAppointmentsInput>
  }

  export type RegistrationUpdateWithoutReceivedAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    sentAppointments?: AppointmentUpdateManyWithoutRequesterNestedInput
    games?: GameUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutRegistrationNestedInput
    event?: EventUpdateOneRequiredWithoutRegistrationsNestedInput
    ticket?: TicketUpdateOneWithoutRegistrationsNestedInput
    sessions?: SessionParticipantUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUncheckedUpdateWithoutReceivedAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    ticketId?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    sentAppointments?: AppointmentUncheckedUpdateManyWithoutRequesterNestedInput
    games?: GameUncheckedUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutRegistrationNestedInput
    sessions?: SessionParticipantUncheckedUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUpsertWithoutSentAppointmentsInput = {
    update: XOR<RegistrationUpdateWithoutSentAppointmentsInput, RegistrationUncheckedUpdateWithoutSentAppointmentsInput>
    create: XOR<RegistrationCreateWithoutSentAppointmentsInput, RegistrationUncheckedCreateWithoutSentAppointmentsInput>
    where?: RegistrationWhereInput
  }

  export type RegistrationUpdateToOneWithWhereWithoutSentAppointmentsInput = {
    where?: RegistrationWhereInput
    data: XOR<RegistrationUpdateWithoutSentAppointmentsInput, RegistrationUncheckedUpdateWithoutSentAppointmentsInput>
  }

  export type RegistrationUpdateWithoutSentAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUpdateManyWithoutRecipientNestedInput
    games?: GameUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutRegistrationNestedInput
    event?: EventUpdateOneRequiredWithoutRegistrationsNestedInput
    ticket?: TicketUpdateOneWithoutRegistrationsNestedInput
    sessions?: SessionParticipantUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUncheckedUpdateWithoutSentAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    ticketId?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUncheckedUpdateManyWithoutRecipientNestedInput
    games?: GameUncheckedUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutRegistrationNestedInput
    sessions?: SessionParticipantUncheckedUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type EventCreateWithoutBadgesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutBadgesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutBadgesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutBadgesInput, EventUncheckedCreateWithoutBadgesInput>
  }

  export type EventUpsertWithoutBadgesInput = {
    update: XOR<EventUpdateWithoutBadgesInput, EventUncheckedUpdateWithoutBadgesInput>
    create: XOR<EventCreateWithoutBadgesInput, EventUncheckedCreateWithoutBadgesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutBadgesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutBadgesInput, EventUncheckedUpdateWithoutBadgesInput>
  }

  export type EventUpdateWithoutBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateWithoutBadgeTemplatesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutBadgeTemplatesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutBadgeTemplatesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutBadgeTemplatesInput, EventUncheckedCreateWithoutBadgeTemplatesInput>
  }

  export type ParticipantBadgeCreateWithoutTemplateInput = {
    id?: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutParticipantBadgesInput
    registration: RegistrationCreateNestedOneWithoutParticipantBadgesInput
  }

  export type ParticipantBadgeUncheckedCreateWithoutTemplateInput = {
    id?: string
    registrationId: string
    eventId: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParticipantBadgeCreateOrConnectWithoutTemplateInput = {
    where: ParticipantBadgeWhereUniqueInput
    create: XOR<ParticipantBadgeCreateWithoutTemplateInput, ParticipantBadgeUncheckedCreateWithoutTemplateInput>
  }

  export type ParticipantBadgeCreateManyTemplateInputEnvelope = {
    data: ParticipantBadgeCreateManyTemplateInput | ParticipantBadgeCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithoutBadgeTemplatesInput = {
    update: XOR<EventUpdateWithoutBadgeTemplatesInput, EventUncheckedUpdateWithoutBadgeTemplatesInput>
    create: XOR<EventCreateWithoutBadgeTemplatesInput, EventUncheckedCreateWithoutBadgeTemplatesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutBadgeTemplatesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutBadgeTemplatesInput, EventUncheckedUpdateWithoutBadgeTemplatesInput>
  }

  export type EventUpdateWithoutBadgeTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutBadgeTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ParticipantBadgeUpsertWithWhereUniqueWithoutTemplateInput = {
    where: ParticipantBadgeWhereUniqueInput
    update: XOR<ParticipantBadgeUpdateWithoutTemplateInput, ParticipantBadgeUncheckedUpdateWithoutTemplateInput>
    create: XOR<ParticipantBadgeCreateWithoutTemplateInput, ParticipantBadgeUncheckedCreateWithoutTemplateInput>
  }

  export type ParticipantBadgeUpdateWithWhereUniqueWithoutTemplateInput = {
    where: ParticipantBadgeWhereUniqueInput
    data: XOR<ParticipantBadgeUpdateWithoutTemplateInput, ParticipantBadgeUncheckedUpdateWithoutTemplateInput>
  }

  export type ParticipantBadgeUpdateManyWithWhereWithoutTemplateInput = {
    where: ParticipantBadgeScalarWhereInput
    data: XOR<ParticipantBadgeUpdateManyMutationInput, ParticipantBadgeUncheckedUpdateManyWithoutTemplateInput>
  }

  export type EventCreateWithoutParticipantBadgesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutParticipantBadgesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutParticipantBadgesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutParticipantBadgesInput, EventUncheckedCreateWithoutParticipantBadgesInput>
  }

  export type RegistrationCreateWithoutParticipantBadgesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentCreateNestedManyWithoutRequesterInput
    games?: GameCreateNestedManyWithoutParticipantInput
    event: EventCreateNestedOneWithoutRegistrationsInput
    ticket?: TicketCreateNestedOneWithoutRegistrationsInput
    sessions?: SessionParticipantCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationUncheckedCreateWithoutParticipantBadgesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    eventId: string
    ticketId?: string | null
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentUncheckedCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentUncheckedCreateNestedManyWithoutRequesterInput
    games?: GameUncheckedCreateNestedManyWithoutParticipantInput
    sessions?: SessionParticipantUncheckedCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationCreateOrConnectWithoutParticipantBadgesInput = {
    where: RegistrationWhereUniqueInput
    create: XOR<RegistrationCreateWithoutParticipantBadgesInput, RegistrationUncheckedCreateWithoutParticipantBadgesInput>
  }

  export type BadgeTemplateCreateWithoutParticipantBadgesInput = {
    id?: string
    name: string
    description?: string | null
    canvasData: string
    isGlobal?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    event?: EventCreateNestedOneWithoutBadgeTemplatesInput
  }

  export type BadgeTemplateUncheckedCreateWithoutParticipantBadgesInput = {
    id?: string
    name: string
    description?: string | null
    canvasData: string
    isGlobal?: boolean
    eventId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BadgeTemplateCreateOrConnectWithoutParticipantBadgesInput = {
    where: BadgeTemplateWhereUniqueInput
    create: XOR<BadgeTemplateCreateWithoutParticipantBadgesInput, BadgeTemplateUncheckedCreateWithoutParticipantBadgesInput>
  }

  export type EventUpsertWithoutParticipantBadgesInput = {
    update: XOR<EventUpdateWithoutParticipantBadgesInput, EventUncheckedUpdateWithoutParticipantBadgesInput>
    create: XOR<EventCreateWithoutParticipantBadgesInput, EventUncheckedCreateWithoutParticipantBadgesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutParticipantBadgesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutParticipantBadgesInput, EventUncheckedUpdateWithoutParticipantBadgesInput>
  }

  export type EventUpdateWithoutParticipantBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutParticipantBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type RegistrationUpsertWithoutParticipantBadgesInput = {
    update: XOR<RegistrationUpdateWithoutParticipantBadgesInput, RegistrationUncheckedUpdateWithoutParticipantBadgesInput>
    create: XOR<RegistrationCreateWithoutParticipantBadgesInput, RegistrationUncheckedCreateWithoutParticipantBadgesInput>
    where?: RegistrationWhereInput
  }

  export type RegistrationUpdateToOneWithWhereWithoutParticipantBadgesInput = {
    where?: RegistrationWhereInput
    data: XOR<RegistrationUpdateWithoutParticipantBadgesInput, RegistrationUncheckedUpdateWithoutParticipantBadgesInput>
  }

  export type RegistrationUpdateWithoutParticipantBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUpdateManyWithoutRequesterNestedInput
    games?: GameUpdateManyWithoutParticipantNestedInput
    event?: EventUpdateOneRequiredWithoutRegistrationsNestedInput
    ticket?: TicketUpdateOneWithoutRegistrationsNestedInput
    sessions?: SessionParticipantUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUncheckedUpdateWithoutParticipantBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    ticketId?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUncheckedUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUncheckedUpdateManyWithoutRequesterNestedInput
    games?: GameUncheckedUpdateManyWithoutParticipantNestedInput
    sessions?: SessionParticipantUncheckedUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type BadgeTemplateUpsertWithoutParticipantBadgesInput = {
    update: XOR<BadgeTemplateUpdateWithoutParticipantBadgesInput, BadgeTemplateUncheckedUpdateWithoutParticipantBadgesInput>
    create: XOR<BadgeTemplateCreateWithoutParticipantBadgesInput, BadgeTemplateUncheckedCreateWithoutParticipantBadgesInput>
    where?: BadgeTemplateWhereInput
  }

  export type BadgeTemplateUpdateToOneWithWhereWithoutParticipantBadgesInput = {
    where?: BadgeTemplateWhereInput
    data: XOR<BadgeTemplateUpdateWithoutParticipantBadgesInput, BadgeTemplateUncheckedUpdateWithoutParticipantBadgesInput>
  }

  export type BadgeTemplateUpdateWithoutParticipantBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: StringFieldUpdateOperationsInput | string
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutBadgeTemplatesNestedInput
  }

  export type BadgeTemplateUncheckedUpdateWithoutParticipantBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: StringFieldUpdateOperationsInput | string
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateWithoutEmailCampaignsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutEmailCampaignsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutEmailCampaignsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEmailCampaignsInput, EventUncheckedCreateWithoutEmailCampaignsInput>
  }

  export type EmailLogCreateWithoutCampaignInput = {
    id?: string
    recipientEmail: string
    recipientName?: string | null
    status?: string
    errorMessage?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailLogUncheckedCreateWithoutCampaignInput = {
    id?: string
    recipientEmail: string
    recipientName?: string | null
    status?: string
    errorMessage?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailLogCreateOrConnectWithoutCampaignInput = {
    where: EmailLogWhereUniqueInput
    create: XOR<EmailLogCreateWithoutCampaignInput, EmailLogUncheckedCreateWithoutCampaignInput>
  }

  export type EmailLogCreateManyCampaignInputEnvelope = {
    data: EmailLogCreateManyCampaignInput | EmailLogCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithoutEmailCampaignsInput = {
    update: XOR<EventUpdateWithoutEmailCampaignsInput, EventUncheckedUpdateWithoutEmailCampaignsInput>
    create: XOR<EventCreateWithoutEmailCampaignsInput, EventUncheckedCreateWithoutEmailCampaignsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEmailCampaignsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEmailCampaignsInput, EventUncheckedUpdateWithoutEmailCampaignsInput>
  }

  export type EventUpdateWithoutEmailCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutEmailCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EmailLogUpsertWithWhereUniqueWithoutCampaignInput = {
    where: EmailLogWhereUniqueInput
    update: XOR<EmailLogUpdateWithoutCampaignInput, EmailLogUncheckedUpdateWithoutCampaignInput>
    create: XOR<EmailLogCreateWithoutCampaignInput, EmailLogUncheckedCreateWithoutCampaignInput>
  }

  export type EmailLogUpdateWithWhereUniqueWithoutCampaignInput = {
    where: EmailLogWhereUniqueInput
    data: XOR<EmailLogUpdateWithoutCampaignInput, EmailLogUncheckedUpdateWithoutCampaignInput>
  }

  export type EmailLogUpdateManyWithWhereWithoutCampaignInput = {
    where: EmailLogScalarWhereInput
    data: XOR<EmailLogUpdateManyMutationInput, EmailLogUncheckedUpdateManyWithoutCampaignInput>
  }

  export type EmailLogScalarWhereInput = {
    AND?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
    OR?: EmailLogScalarWhereInput[]
    NOT?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
    id?: StringFilter<"EmailLog"> | string
    campaignId?: StringFilter<"EmailLog"> | string
    recipientEmail?: StringFilter<"EmailLog"> | string
    recipientName?: StringNullableFilter<"EmailLog"> | string | null
    status?: StringFilter<"EmailLog"> | string
    errorMessage?: StringNullableFilter<"EmailLog"> | string | null
    sentAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    openedAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    clickedAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    createdAt?: DateTimeFilter<"EmailLog"> | Date | string
    updatedAt?: DateTimeFilter<"EmailLog"> | Date | string
  }

  export type EventCreateWithoutEmailTemplatesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutEmailTemplatesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutEmailTemplatesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEmailTemplatesInput, EventUncheckedCreateWithoutEmailTemplatesInput>
  }

  export type EventUpsertWithoutEmailTemplatesInput = {
    update: XOR<EventUpdateWithoutEmailTemplatesInput, EventUncheckedUpdateWithoutEmailTemplatesInput>
    create: XOR<EventCreateWithoutEmailTemplatesInput, EventUncheckedCreateWithoutEmailTemplatesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEmailTemplatesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEmailTemplatesInput, EventUncheckedUpdateWithoutEmailTemplatesInput>
  }

  export type EventUpdateWithoutEmailTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutEmailTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EmailCampaignCreateWithoutEmailLogsInput = {
    id?: string
    name: string
    description?: string | null
    type?: string
    recipientType?: string
    subject: string
    htmlContent: string
    textContent?: string | null
    status?: string
    scheduledAt?: Date | string | null
    sentAt?: Date | string | null
    totalRecipients?: number | null
    successCount?: number | null
    failureCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    event: EventCreateNestedOneWithoutEmailCampaignsInput
  }

  export type EmailCampaignUncheckedCreateWithoutEmailLogsInput = {
    id?: string
    eventId: string
    name: string
    description?: string | null
    type?: string
    recipientType?: string
    subject: string
    htmlContent: string
    textContent?: string | null
    status?: string
    scheduledAt?: Date | string | null
    sentAt?: Date | string | null
    totalRecipients?: number | null
    successCount?: number | null
    failureCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailCampaignCreateOrConnectWithoutEmailLogsInput = {
    where: EmailCampaignWhereUniqueInput
    create: XOR<EmailCampaignCreateWithoutEmailLogsInput, EmailCampaignUncheckedCreateWithoutEmailLogsInput>
  }

  export type EmailCampaignUpsertWithoutEmailLogsInput = {
    update: XOR<EmailCampaignUpdateWithoutEmailLogsInput, EmailCampaignUncheckedUpdateWithoutEmailLogsInput>
    create: XOR<EmailCampaignCreateWithoutEmailLogsInput, EmailCampaignUncheckedCreateWithoutEmailLogsInput>
    where?: EmailCampaignWhereInput
  }

  export type EmailCampaignUpdateToOneWithWhereWithoutEmailLogsInput = {
    where?: EmailCampaignWhereInput
    data: XOR<EmailCampaignUpdateWithoutEmailLogsInput, EmailCampaignUncheckedUpdateWithoutEmailLogsInput>
  }

  export type EmailCampaignUpdateWithoutEmailLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalRecipients?: NullableIntFieldUpdateOperationsInput | number | null
    successCount?: NullableIntFieldUpdateOperationsInput | number | null
    failureCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutEmailCampaignsNestedInput
  }

  export type EmailCampaignUncheckedUpdateWithoutEmailLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalRecipients?: NullableIntFieldUpdateOperationsInput | number | null
    successCount?: NullableIntFieldUpdateOperationsInput | number | null
    failureCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateWithoutGamesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutGamesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutGamesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutGamesInput, EventUncheckedCreateWithoutGamesInput>
  }

  export type RegistrationCreateWithoutGamesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentCreateNestedManyWithoutRequesterInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutRegistrationInput
    event: EventCreateNestedOneWithoutRegistrationsInput
    ticket?: TicketCreateNestedOneWithoutRegistrationsInput
    sessions?: SessionParticipantCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationUncheckedCreateWithoutGamesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    eventId: string
    ticketId?: string | null
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentUncheckedCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentUncheckedCreateNestedManyWithoutRequesterInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutRegistrationInput
    sessions?: SessionParticipantUncheckedCreateNestedManyWithoutParticipantInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationCreateOrConnectWithoutGamesInput = {
    where: RegistrationWhereUniqueInput
    create: XOR<RegistrationCreateWithoutGamesInput, RegistrationUncheckedCreateWithoutGamesInput>
  }

  export type EventUpsertWithoutGamesInput = {
    update: XOR<EventUpdateWithoutGamesInput, EventUncheckedUpdateWithoutGamesInput>
    create: XOR<EventCreateWithoutGamesInput, EventUncheckedCreateWithoutGamesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutGamesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutGamesInput, EventUncheckedUpdateWithoutGamesInput>
  }

  export type EventUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type RegistrationUpsertWithoutGamesInput = {
    update: XOR<RegistrationUpdateWithoutGamesInput, RegistrationUncheckedUpdateWithoutGamesInput>
    create: XOR<RegistrationCreateWithoutGamesInput, RegistrationUncheckedCreateWithoutGamesInput>
    where?: RegistrationWhereInput
  }

  export type RegistrationUpdateToOneWithWhereWithoutGamesInput = {
    where?: RegistrationWhereInput
    data: XOR<RegistrationUpdateWithoutGamesInput, RegistrationUncheckedUpdateWithoutGamesInput>
  }

  export type RegistrationUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUpdateManyWithoutRequesterNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutRegistrationNestedInput
    event?: EventUpdateOneRequiredWithoutRegistrationsNestedInput
    ticket?: TicketUpdateOneWithoutRegistrationsNestedInput
    sessions?: SessionParticipantUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    ticketId?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUncheckedUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUncheckedUpdateManyWithoutRequesterNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutRegistrationNestedInput
    sessions?: SessionParticipantUncheckedUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type EventCreateWithoutUserEventScoresInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutUserEventScoresInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutUserEventScoresInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutUserEventScoresInput, EventUncheckedCreateWithoutUserEventScoresInput>
  }

  export type RegistrationCreateWithoutUserEventScoresInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentCreateNestedManyWithoutRequesterInput
    games?: GameCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutRegistrationInput
    event: EventCreateNestedOneWithoutRegistrationsInput
    ticket?: TicketCreateNestedOneWithoutRegistrationsInput
    sessions?: SessionParticipantCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationUncheckedCreateWithoutUserEventScoresInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    eventId: string
    ticketId?: string | null
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
    receivedAppointments?: AppointmentUncheckedCreateNestedManyWithoutRecipientInput
    sentAppointments?: AppointmentUncheckedCreateNestedManyWithoutRequesterInput
    games?: GameUncheckedCreateNestedManyWithoutParticipantInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutRegistrationInput
    sessions?: SessionParticipantUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type RegistrationCreateOrConnectWithoutUserEventScoresInput = {
    where: RegistrationWhereUniqueInput
    create: XOR<RegistrationCreateWithoutUserEventScoresInput, RegistrationUncheckedCreateWithoutUserEventScoresInput>
  }

  export type EventUpsertWithoutUserEventScoresInput = {
    update: XOR<EventUpdateWithoutUserEventScoresInput, EventUncheckedUpdateWithoutUserEventScoresInput>
    create: XOR<EventCreateWithoutUserEventScoresInput, EventUncheckedCreateWithoutUserEventScoresInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutUserEventScoresInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutUserEventScoresInput, EventUncheckedUpdateWithoutUserEventScoresInput>
  }

  export type EventUpdateWithoutUserEventScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutUserEventScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type RegistrationUpsertWithoutUserEventScoresInput = {
    update: XOR<RegistrationUpdateWithoutUserEventScoresInput, RegistrationUncheckedUpdateWithoutUserEventScoresInput>
    create: XOR<RegistrationCreateWithoutUserEventScoresInput, RegistrationUncheckedCreateWithoutUserEventScoresInput>
    where?: RegistrationWhereInput
  }

  export type RegistrationUpdateToOneWithWhereWithoutUserEventScoresInput = {
    where?: RegistrationWhereInput
    data: XOR<RegistrationUpdateWithoutUserEventScoresInput, RegistrationUncheckedUpdateWithoutUserEventScoresInput>
  }

  export type RegistrationUpdateWithoutUserEventScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUpdateManyWithoutRequesterNestedInput
    games?: GameUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutRegistrationNestedInput
    event?: EventUpdateOneRequiredWithoutRegistrationsNestedInput
    ticket?: TicketUpdateOneWithoutRegistrationsNestedInput
    sessions?: SessionParticipantUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUncheckedUpdateWithoutUserEventScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    ticketId?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUncheckedUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUncheckedUpdateManyWithoutRequesterNestedInput
    games?: GameUncheckedUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutRegistrationNestedInput
    sessions?: SessionParticipantUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type EventCreateWithoutMatchProfilesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutMatchProfilesInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    matchSuggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutMatchProfilesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutMatchProfilesInput, EventUncheckedCreateWithoutMatchProfilesInput>
  }

  export type UserCreateWithoutMatchProfilesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionCreateNestedManyWithoutSuggestedInput
    suggestions?: MatchSuggestionCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMatchProfilesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionUncheckedCreateNestedManyWithoutSuggestedInput
    suggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMatchProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchProfilesInput, UserUncheckedCreateWithoutMatchProfilesInput>
  }

  export type EventUpsertWithoutMatchProfilesInput = {
    update: XOR<EventUpdateWithoutMatchProfilesInput, EventUncheckedUpdateWithoutMatchProfilesInput>
    create: XOR<EventCreateWithoutMatchProfilesInput, EventUncheckedCreateWithoutMatchProfilesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutMatchProfilesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutMatchProfilesInput, EventUncheckedUpdateWithoutMatchProfilesInput>
  }

  export type EventUpdateWithoutMatchProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutMatchProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserUpsertWithoutMatchProfilesInput = {
    update: XOR<UserUpdateWithoutMatchProfilesInput, UserUncheckedUpdateWithoutMatchProfilesInput>
    create: XOR<UserCreateWithoutMatchProfilesInput, UserUncheckedCreateWithoutMatchProfilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchProfilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchProfilesInput, UserUncheckedUpdateWithoutMatchProfilesInput>
  }

  export type UserUpdateWithoutMatchProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUpdateManyWithoutSuggestedNestedInput
    suggestions?: MatchSuggestionUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUncheckedUpdateManyWithoutSuggestedNestedInput
    suggestions?: MatchSuggestionUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EventCreateWithoutMatchSuggestionsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateCreateNestedManyWithoutEventInput
    badges?: BadgeCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsCreateNestedManyWithoutEventsInput
    user: UserCreateNestedOneWithoutEventsInput
    games?: GameCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeCreateNestedManyWithoutEventInput
    registrations?: RegistrationCreateNestedManyWithoutEventInput
    sponsors?: SponsorCreateNestedManyWithoutEventInput
    tickets?: TicketCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutMatchSuggestionsInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
    appointments?: AppointmentUncheckedCreateNestedManyWithoutEventInput
    badgeTemplates?: BadgeTemplateUncheckedCreateNestedManyWithoutEventInput
    badges?: BadgeUncheckedCreateNestedManyWithoutEventInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutEventInput
    emailTemplates?: EmailTemplateUncheckedCreateNestedManyWithoutEventInput
    event_sessions?: event_sessionsUncheckedCreateNestedManyWithoutEventsInput
    games?: GameUncheckedCreateNestedManyWithoutEventInput
    participantBadges?: ParticipantBadgeUncheckedCreateNestedManyWithoutEventInput
    registrations?: RegistrationUncheckedCreateNestedManyWithoutEventInput
    sponsors?: SponsorUncheckedCreateNestedManyWithoutEventInput
    tickets?: TicketUncheckedCreateNestedManyWithoutEventInput
    userEventScores?: UserEventScoreUncheckedCreateNestedManyWithoutEventInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutMatchSuggestionsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutMatchSuggestionsInput, EventUncheckedCreateWithoutMatchSuggestionsInput>
  }

  export type UserCreateWithoutSuggestedForInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    suggestions?: MatchSuggestionCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSuggestedForInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    suggestions?: MatchSuggestionUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSuggestedForInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSuggestedForInput, UserUncheckedCreateWithoutSuggestedForInput>
  }

  export type UserCreateWithoutSuggestionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionCreateNestedManyWithoutSuggestedInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSuggestionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: UserCreatepermissionsInput | string[]
    role?: string
    lastLogin?: Date | string | null
    phone?: string | null
    plan?: string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    suggestedFor?: MatchSuggestionUncheckedCreateNestedManyWithoutSuggestedInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    matchProfiles?: UserMatchProfileUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSuggestionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSuggestionsInput, UserUncheckedCreateWithoutSuggestionsInput>
  }

  export type EventUpsertWithoutMatchSuggestionsInput = {
    update: XOR<EventUpdateWithoutMatchSuggestionsInput, EventUncheckedUpdateWithoutMatchSuggestionsInput>
    create: XOR<EventCreateWithoutMatchSuggestionsInput, EventUncheckedCreateWithoutMatchSuggestionsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutMatchSuggestionsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutMatchSuggestionsInput, EventUncheckedUpdateWithoutMatchSuggestionsInput>
  }

  export type EventUpdateWithoutMatchSuggestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutMatchSuggestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserUpsertWithoutSuggestedForInput = {
    update: XOR<UserUpdateWithoutSuggestedForInput, UserUncheckedUpdateWithoutSuggestedForInput>
    create: XOR<UserCreateWithoutSuggestedForInput, UserUncheckedCreateWithoutSuggestedForInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSuggestedForInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSuggestedForInput, UserUncheckedUpdateWithoutSuggestedForInput>
  }

  export type UserUpdateWithoutSuggestedForInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    suggestions?: MatchSuggestionUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSuggestedForInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    suggestions?: MatchSuggestionUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutSuggestionsInput = {
    update: XOR<UserUpdateWithoutSuggestionsInput, UserUncheckedUpdateWithoutSuggestionsInput>
    create: XOR<UserCreateWithoutSuggestionsInput, UserUncheckedCreateWithoutSuggestionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSuggestionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSuggestionsInput, UserUncheckedUpdateWithoutSuggestionsInput>
  }

  export type UserUpdateWithoutSuggestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUpdateManyWithoutSuggestedNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSuggestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: UserUpdatepermissionsInput | string[]
    role?: StringFieldUpdateOperationsInput | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    plan?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    suggestedFor?: MatchSuggestionUncheckedUpdateManyWithoutSuggestedNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type EventCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    location: string
    slug: string
    banner?: string | null
    startDate: Date | string
    endDate: Date | string
    startTime?: string | null
    endTime?: string | null
    sector?: string | null
    type?: string | null
    format?: string | null
    timezone?: string | null
    videoUrl?: string | null
    supportEmail?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    logo?: string | null
    archived?: boolean
    archivedAt?: Date | string | null
  }

  export type MatchSuggestionCreateManySuggestedInput = {
    id?: string
    userId: string
    eventId: string
    score: number
    reason?: string | null
    createdAt?: Date | string
  }

  export type MatchSuggestionCreateManyUserInput = {
    id?: string
    suggestedId: string
    eventId: string
    score: number
    reason?: string | null
    createdAt?: Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type UserMatchProfileCreateManyUserInput = {
    id?: string
    eventId: string
    headline?: string | null
    bio?: string | null
    jobTitle?: string | null
    company?: string | null
    interests?: UserMatchProfileCreateinterestsInput | string[]
    goals?: UserMatchProfileCreategoalsInput | string[]
    availability?: UserMatchProfileCreateavailabilityInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUpdateManyWithoutEventNestedInput
    badges?: BadgeUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUpdateManyWithoutEventsNestedInput
    games?: GameUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUpdateManyWithoutEventNestedInput
    tickets?: TicketUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    appointments?: AppointmentUncheckedUpdateManyWithoutEventNestedInput
    badgeTemplates?: BadgeTemplateUncheckedUpdateManyWithoutEventNestedInput
    badges?: BadgeUncheckedUpdateManyWithoutEventNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutEventNestedInput
    emailTemplates?: EmailTemplateUncheckedUpdateManyWithoutEventNestedInput
    event_sessions?: event_sessionsUncheckedUpdateManyWithoutEventsNestedInput
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
    matchSuggestions?: MatchSuggestionUncheckedUpdateManyWithoutEventNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutEventNestedInput
    registrations?: RegistrationUncheckedUpdateManyWithoutEventNestedInput
    sponsors?: SponsorUncheckedUpdateManyWithoutEventNestedInput
    tickets?: TicketUncheckedUpdateManyWithoutEventNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutEventNestedInput
    matchProfiles?: UserMatchProfileUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    sector?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    supportEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    archived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MatchSuggestionUpdateWithoutSuggestedInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutMatchSuggestionsNestedInput
    user?: UserUpdateOneRequiredWithoutSuggestionsNestedInput
  }

  export type MatchSuggestionUncheckedUpdateWithoutSuggestedInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchSuggestionUncheckedUpdateManyWithoutSuggestedInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchSuggestionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutMatchSuggestionsNestedInput
    suggested?: UserUpdateOneRequiredWithoutSuggestedForNestedInput
  }

  export type MatchSuggestionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    suggestedId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchSuggestionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    suggestedId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    headline?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: UserMatchProfileUpdateinterestsInput | string[]
    goals?: UserMatchProfileUpdategoalsInput | string[]
    availability?: UserMatchProfileUpdateavailabilityInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutMatchProfilesNestedInput
  }

  export type UserMatchProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    headline?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: UserMatchProfileUpdateinterestsInput | string[]
    goals?: UserMatchProfileUpdategoalsInput | string[]
    availability?: UserMatchProfileUpdateavailabilityInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchProfileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    headline?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: UserMatchProfileUpdateinterestsInput | string[]
    goals?: UserMatchProfileUpdategoalsInput | string[]
    availability?: UserMatchProfileUpdateavailabilityInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyEventInput = {
    id?: string
    requesterId: string
    recipientId: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BadgeTemplateCreateManyEventInput = {
    id?: string
    name: string
    description?: string | null
    canvasData: string
    isGlobal?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BadgeCreateManyEventInput = {
    id?: string
    name?: string | null
    canvasData?: string | null
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailCampaignCreateManyEventInput = {
    id?: string
    name: string
    description?: string | null
    type?: string
    recipientType?: string
    subject: string
    htmlContent: string
    textContent?: string | null
    status?: string
    scheduledAt?: Date | string | null
    sentAt?: Date | string | null
    totalRecipients?: number | null
    successCount?: number | null
    failureCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTemplateCreateManyEventInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    htmlContent: string
    textContent?: string | null
    type?: string
    category?: string | null
    isGlobal?: boolean
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type event_sessionsCreateManyEventsInput = {
    id: string
    title: string
    description?: string | null
    start_date: Date | string
    end_date: Date | string
    start_time: string
    end_time: string
    location?: string | null
    speaker?: string | null
    capacity?: number | null
    created_at?: Date | string
    updated_at: Date | string
    banner?: string | null
    format?: string | null
    video_url?: string | null
  }

  export type GameCreateManyEventInput = {
    id?: string
    participantId: string
    action: string
    points: number
    actionDetails?: string | null
    relatedEntityId?: string | null
    createdAt?: Date | string
  }

  export type MatchSuggestionCreateManyEventInput = {
    id?: string
    userId: string
    suggestedId: string
    score: number
    reason?: string | null
    createdAt?: Date | string
  }

  export type ParticipantBadgeCreateManyEventInput = {
    id?: string
    registrationId: string
    templateId: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegistrationCreateManyEventInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    ticketId?: string | null
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
  }

  export type SponsorCreateManyEventInput = {
    id?: string
    name: string
    description?: string | null
    logo?: string | null
    website?: string | null
    level?: string
    visible?: boolean
    location?: string | null
    address?: string | null
    phone?: string | null
    mobile?: string | null
    email?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    facebookUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TicketCreateManyEventInput = {
    id?: string
    name: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string
    currency?: string
    quantity?: number | null
    sold?: number
    status?: string
    visibility?: string
    validFrom: Date | string
    validUntil: Date | string
    group?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserEventScoreCreateManyEventInput = {
    id?: string
    participantId: string
    totalPoints?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type UserMatchProfileCreateManyEventInput = {
    id?: string
    userId: string
    headline?: string | null
    bio?: string | null
    jobTitle?: string | null
    company?: string | null
    interests?: UserMatchProfileCreateinterestsInput | string[]
    goals?: UserMatchProfileCreategoalsInput | string[]
    availability?: UserMatchProfileCreateavailabilityInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipient?: RegistrationUpdateOneRequiredWithoutReceivedAppointmentsNestedInput
    requester?: RegistrationUpdateOneRequiredWithoutSentAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeTemplateUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: StringFieldUpdateOperationsInput | string
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participantBadges?: ParticipantBadgeUpdateManyWithoutTemplateNestedInput
  }

  export type BadgeTemplateUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: StringFieldUpdateOperationsInput | string
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type BadgeTemplateUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: StringFieldUpdateOperationsInput | string
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    canvasData?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailCampaignUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalRecipients?: NullableIntFieldUpdateOperationsInput | number | null
    successCount?: NullableIntFieldUpdateOperationsInput | number | null
    failureCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailLogs?: EmailLogUpdateManyWithoutCampaignNestedInput
  }

  export type EmailCampaignUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalRecipients?: NullableIntFieldUpdateOperationsInput | number | null
    successCount?: NullableIntFieldUpdateOperationsInput | number | null
    failureCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailLogs?: EmailLogUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type EmailCampaignUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recipientType?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalRecipients?: NullableIntFieldUpdateOperationsInput | number | null
    successCount?: NullableIntFieldUpdateOperationsInput | number | null
    failureCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTemplateUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    htmlContent?: StringFieldUpdateOperationsInput | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    isGlobal?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type event_sessionsUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: SessionParticipantUpdateManyWithoutSessionNestedInput
  }

  export type event_sessionsUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: SessionParticipantUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type event_sessionsUncheckedUpdateManyWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_time?: StringFieldUpdateOperationsInput | string
    end_time?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    speaker?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    banner?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    video_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    actionDetails?: NullableStringFieldUpdateOperationsInput | string | null
    relatedEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participant?: RegistrationUpdateOneRequiredWithoutGamesNestedInput
  }

  export type GameUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    actionDetails?: NullableStringFieldUpdateOperationsInput | string | null
    relatedEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    actionDetails?: NullableStringFieldUpdateOperationsInput | string | null
    relatedEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchSuggestionUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    suggested?: UserUpdateOneRequiredWithoutSuggestedForNestedInput
    user?: UserUpdateOneRequiredWithoutSuggestionsNestedInput
  }

  export type MatchSuggestionUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    suggestedId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchSuggestionUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    suggestedId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParticipantBadgeUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registration?: RegistrationUpdateOneRequiredWithoutParticipantBadgesNestedInput
    template?: BadgeTemplateUpdateOneRequiredWithoutParticipantBadgesNestedInput
  }

  export type ParticipantBadgeUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParticipantBadgeUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUpdateManyWithoutRequesterNestedInput
    games?: GameUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutRegistrationNestedInput
    ticket?: TicketUpdateOneWithoutRegistrationsNestedInput
    sessions?: SessionParticipantUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    ticketId?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUncheckedUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUncheckedUpdateManyWithoutRequesterNestedInput
    games?: GameUncheckedUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutRegistrationNestedInput
    sessions?: SessionParticipantUncheckedUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    ticketId?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SponsorUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    level?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SponsorUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    level?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SponsorUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    level?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    location?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    sold?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrations?: RegistrationUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    sold?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registrations?: RegistrationUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    sold?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    group?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserEventScoreUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPoints?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participant?: RegistrationUpdateOneRequiredWithoutUserEventScoresNestedInput
  }

  export type UserEventScoreUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    totalPoints?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserEventScoreUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    totalPoints?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchProfileUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    headline?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: UserMatchProfileUpdateinterestsInput | string[]
    goals?: UserMatchProfileUpdategoalsInput | string[]
    availability?: UserMatchProfileUpdateavailabilityInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMatchProfilesNestedInput
  }

  export type UserMatchProfileUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    headline?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: UserMatchProfileUpdateinterestsInput | string[]
    goals?: UserMatchProfileUpdategoalsInput | string[]
    availability?: UserMatchProfileUpdateavailabilityInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMatchProfileUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    headline?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: UserMatchProfileUpdateinterestsInput | string[]
    goals?: UserMatchProfileUpdategoalsInput | string[]
    availability?: UserMatchProfileUpdateavailabilityInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyRecipientInput = {
    id?: string
    eventId: string
    requesterId: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyRequesterInput = {
    id?: string
    eventId: string
    recipientId: string
    status?: string
    message?: string | null
    proposedTime?: Date | string | null
    confirmedTime?: Date | string | null
    location?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameCreateManyParticipantInput = {
    id?: string
    eventId: string
    action: string
    points: number
    actionDetails?: string | null
    relatedEntityId?: string | null
    createdAt?: Date | string
  }

  export type ParticipantBadgeCreateManyRegistrationInput = {
    id?: string
    eventId: string
    templateId: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionParticipantCreateManyParticipantInput = {
    id?: string
    sessionId: string
    registeredAt?: Date | string
    attendedSession?: boolean
    attendanceTime?: Date | string | null
  }

  export type UserEventScoreCreateManyParticipantInput = {
    id?: string
    eventId: string
    totalPoints?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type AppointmentUpdateWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAppointmentsNestedInput
    requester?: RegistrationUpdateOneRequiredWithoutSentAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutAppointmentsNestedInput
    recipient?: RegistrationUpdateOneRequiredWithoutReceivedAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyWithoutRequesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    proposedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    confirmedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    actionDetails?: NullableStringFieldUpdateOperationsInput | string | null
    relatedEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutGamesNestedInput
  }

  export type GameUncheckedUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    actionDetails?: NullableStringFieldUpdateOperationsInput | string | null
    relatedEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    actionDetails?: NullableStringFieldUpdateOperationsInput | string | null
    relatedEntityId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParticipantBadgeUpdateWithoutRegistrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutParticipantBadgesNestedInput
    template?: BadgeTemplateUpdateOneRequiredWithoutParticipantBadgesNestedInput
  }

  export type ParticipantBadgeUncheckedUpdateWithoutRegistrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParticipantBadgeUncheckedUpdateManyWithoutRegistrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionParticipantUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendedSession?: BoolFieldUpdateOperationsInput | boolean
    attendanceTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    session?: event_sessionsUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type SessionParticipantUncheckedUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendedSession?: BoolFieldUpdateOperationsInput | boolean
    attendanceTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionParticipantUncheckedUpdateManyWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendedSession?: BoolFieldUpdateOperationsInput | boolean
    attendanceTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserEventScoreUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalPoints?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutUserEventScoresNestedInput
  }

  export type UserEventScoreUncheckedUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    totalPoints?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserEventScoreUncheckedUpdateManyWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    totalPoints?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationCreateManyTicketInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phone: string
    type?: string
    eventId: string
    qrCode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    checkedIn?: boolean
    checkInTime?: Date | string | null
    shortCode?: string | null
    company?: string | null
    jobTitle?: string | null
  }

  export type RegistrationUpdateWithoutTicketInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUpdateManyWithoutRequesterNestedInput
    games?: GameUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUpdateManyWithoutRegistrationNestedInput
    event?: EventUpdateOneRequiredWithoutRegistrationsNestedInput
    sessions?: SessionParticipantUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUncheckedUpdateWithoutTicketInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    receivedAppointments?: AppointmentUncheckedUpdateManyWithoutRecipientNestedInput
    sentAppointments?: AppointmentUncheckedUpdateManyWithoutRequesterNestedInput
    games?: GameUncheckedUpdateManyWithoutParticipantNestedInput
    participantBadges?: ParticipantBadgeUncheckedUpdateManyWithoutRegistrationNestedInput
    sessions?: SessionParticipantUncheckedUpdateManyWithoutParticipantNestedInput
    userEventScores?: UserEventScoreUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type RegistrationUncheckedUpdateManyWithoutTicketInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkedIn?: BoolFieldUpdateOperationsInput | boolean
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shortCode?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionParticipantCreateManySessionInput = {
    id?: string
    participantId: string
    registeredAt?: Date | string
    attendedSession?: boolean
    attendanceTime?: Date | string | null
  }

  export type SessionParticipantUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendedSession?: BoolFieldUpdateOperationsInput | boolean
    attendanceTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    participant?: RegistrationUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionParticipantUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendedSession?: BoolFieldUpdateOperationsInput | boolean
    attendanceTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionParticipantUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    participantId?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendedSession?: BoolFieldUpdateOperationsInput | boolean
    attendanceTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ParticipantBadgeCreateManyTemplateInput = {
    id?: string
    registrationId: string
    eventId: string
    status?: string
    generatedAt?: Date | string
    printedAt?: Date | string | null
    deliveredAt?: Date | string | null
    customData?: string | null
    qrCodeData?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParticipantBadgeUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutParticipantBadgesNestedInput
    registration?: RegistrationUpdateOneRequiredWithoutParticipantBadgesNestedInput
  }

  export type ParticipantBadgeUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParticipantBadgeUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    printedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customData?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogCreateManyCampaignInput = {
    id?: string
    recipientEmail: string
    recipientName?: string | null
    status?: string
    errorMessage?: string | null
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    openedAt?: Date | string | null
    clickedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailLogUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUncheckedUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUncheckedUpdateManyWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clickedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}