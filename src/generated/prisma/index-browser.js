
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  permissions: 'permissions',
  role: 'role',
  lastLogin: 'lastLogin',
  phone: 'phone',
  plan: 'plan'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  location: 'location',
  slug: 'slug',
  banner: 'banner',
  startDate: 'startDate',
  endDate: 'endDate',
  startTime: 'startTime',
  endTime: 'endTime',
  sector: 'sector',
  type: 'type',
  format: 'format',
  timezone: 'timezone',
  videoUrl: 'videoUrl',
  supportEmail: 'supportEmail',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  logo: 'logo',
  archived: 'archived',
  archivedAt: 'archivedAt'
};

exports.Prisma.RegistrationScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  type: 'type',
  eventId: 'eventId',
  ticketId: 'ticketId',
  qrCode: 'qrCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  checkedIn: 'checkedIn',
  checkInTime: 'checkInTime',
  shortCode: 'shortCode',
  company: 'company',
  jobTitle: 'jobTitle'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  currency: 'currency',
  quantity: 'quantity',
  sold: 'sold',
  status: 'status',
  visibility: 'visibility',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  group: 'group',
  eventId: 'eventId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Event_sessionsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  start_date: 'start_date',
  end_date: 'end_date',
  start_time: 'start_time',
  end_time: 'end_time',
  location: 'location',
  speaker: 'speaker',
  capacity: 'capacity',
  event_id: 'event_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  banner: 'banner',
  format: 'format',
  video_url: 'video_url'
};

exports.Prisma.SponsorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  logo: 'logo',
  website: 'website',
  level: 'level',
  visible: 'visible',
  eventId: 'eventId',
  location: 'location',
  address: 'address',
  phone: 'phone',
  mobile: 'mobile',
  email: 'email',
  linkedinUrl: 'linkedinUrl',
  twitterUrl: 'twitterUrl',
  facebookUrl: 'facebookUrl',
  documents: 'documents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionParticipantScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  participantId: 'participantId',
  registeredAt: 'registeredAt',
  attendedSession: 'attendedSession',
  attendanceTime: 'attendanceTime'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  requesterId: 'requesterId',
  recipientId: 'recipientId',
  status: 'status',
  message: 'message',
  proposedTime: 'proposedTime',
  confirmedTime: 'confirmedTime',
  location: 'location',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OtpCodeScalarFieldEnum = {
  id: 'id',
  email: 'email',
  code: 'code',
  event_id: 'event_id',
  expires_at: 'expires_at',
  used: 'used',
  created_at: 'created_at'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  name: 'name',
  canvasData: 'canvasData',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BadgeTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  canvasData: 'canvasData',
  isGlobal: 'isGlobal',
  eventId: 'eventId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParticipantBadgeScalarFieldEnum = {
  id: 'id',
  registrationId: 'registrationId',
  eventId: 'eventId',
  templateId: 'templateId',
  status: 'status',
  generatedAt: 'generatedAt',
  printedAt: 'printedAt',
  deliveredAt: 'deliveredAt',
  customData: 'customData',
  qrCodeData: 'qrCodeData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailCampaignScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  name: 'name',
  description: 'description',
  type: 'type',
  recipientType: 'recipientType',
  subject: 'subject',
  htmlContent: 'htmlContent',
  textContent: 'textContent',
  status: 'status',
  scheduledAt: 'scheduledAt',
  sentAt: 'sentAt',
  totalRecipients: 'totalRecipients',
  successCount: 'successCount',
  failureCount: 'failureCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  subject: 'subject',
  htmlContent: 'htmlContent',
  textContent: 'textContent',
  type: 'type',
  category: 'category',
  isGlobal: 'isGlobal',
  eventId: 'eventId',
  isActive: 'isActive',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailLogScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  recipientEmail: 'recipientEmail',
  recipientName: 'recipientName',
  status: 'status',
  errorMessage: 'errorMessage',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  openedAt: 'openedAt',
  clickedAt: 'clickedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  participantId: 'participantId',
  action: 'action',
  points: 'points',
  actionDetails: 'actionDetails',
  relatedEntityId: 'relatedEntityId',
  createdAt: 'createdAt'
};

exports.Prisma.UserEventScoreScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  participantId: 'participantId',
  totalPoints: 'totalPoints',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt'
};

exports.Prisma.UserMatchProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  headline: 'headline',
  bio: 'bio',
  jobTitle: 'jobTitle',
  company: 'company',
  interests: 'interests',
  goals: 'goals',
  availability: 'availability',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchSuggestionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  suggestedId: 'suggestedId',
  eventId: 'eventId',
  score: 'score',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Event: 'Event',
  Registration: 'Registration',
  Ticket: 'Ticket',
  event_sessions: 'event_sessions',
  Sponsor: 'Sponsor',
  SessionParticipant: 'SessionParticipant',
  Appointment: 'Appointment',
  OtpCode: 'OtpCode',
  Badge: 'Badge',
  BadgeTemplate: 'BadgeTemplate',
  ParticipantBadge: 'ParticipantBadge',
  EmailCampaign: 'EmailCampaign',
  EmailTemplate: 'EmailTemplate',
  EmailLog: 'EmailLog',
  Game: 'Game',
  UserEventScore: 'UserEventScore',
  UserMatchProfile: 'UserMatchProfile',
  MatchSuggestion: 'MatchSuggestion'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
