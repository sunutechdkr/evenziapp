generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?          @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  permissions   String[]           @default([])
  role          String             @default("USER")
  lastLogin     DateTime?          @map("last_login")
  phone         String?
  plan          String             @default("STARTER")
  accounts      Account[]
  events        Event[]
  suggestedFor  MatchSuggestion[]  @relation("SuggestedUsers")
  suggestions   MatchSuggestion[]  @relation("UserSuggestions")
  sessions      Session[]
  matchProfiles UserMatchProfile[]

  @@index([email], map: "idx_users_email")
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "idx_accounts_user_id")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId], map: "idx_sessions_user_id")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id                String             @id @default(cuid())
  name              String
  description       String?
  location          String
  slug              String             @unique
  banner            String?
  startDate         DateTime           @map("start_date")
  endDate           DateTime           @map("end_date")
  startTime         String?            @map("start_time")
  endTime           String?            @map("end_time")
  sector            String?
  type              String?
  format            String?
  timezone          String?
  videoUrl          String?            @map("video_url")
  supportEmail      String?            @map("support_email")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  userId            String             @map("user_id")
  logo              String?            @map("logo")
  archived          Boolean            @default(false) @map("archived")
  archivedAt        DateTime?          @map("archived_at")
  appointments      Appointment[]
  badgeTemplates    BadgeTemplate[]
  badges            Badge[]
  emailCampaigns    EmailCampaign[]
  emailTemplates    EmailTemplate[]
  event_sessions    event_sessions[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  games             Game[]
  matchSuggestions  MatchSuggestion[]
  participantBadges ParticipantBadge[]
  registrations     Registration[]
  sponsors          Sponsor[]
  tickets           Ticket[]
  userEventScores   UserEventScore[]
  matchProfiles     UserMatchProfile[]

  @@index([slug], map: "idx_events_slug")
  @@map("events")
}

model Registration {
  id                   String               @id @default(cuid())
  firstName            String               @map("first_name")
  lastName             String               @map("last_name")
  email                String
  phone                String
  type                 String               @default("PARTICIPANT")
  eventId              String               @map("event_id")
  ticketId             String?              @map("ticket_id")
  qrCode               String               @unique @map("qr_code")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  checkedIn            Boolean              @default(false) @map("checked_in")
  checkInTime          DateTime?            @map("check_in_time")
  shortCode            String?              @unique @map("short_code")
  company              String?              @map("company")
  jobTitle             String?              @map("job_title")
  receivedAppointments Appointment[]        @relation("RecipientRelation")
  sentAppointments     Appointment[]        @relation("RequesterRelation")
  games                Game[]
  participantBadges    ParticipantBadge[]
  event                Event                @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ticket               Ticket?              @relation(fields: [ticketId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sessions             SessionParticipant[]
  userEventScores      UserEventScore[]

  @@index([eventId], map: "idx_registrations_event_id")
  @@index([qrCode], map: "idx_registrations_qr_code")
  @@map("registrations")
}

model Ticket {
  id            String         @id @default(cuid())
  name          String
  description   String?
  price         Decimal        @default(0)
  currency      String         @default("XOF")
  quantity      Int?
  sold          Int            @default(0)
  status        String         @default("ACTIVE")
  visibility    String         @default("VISIBLE")
  validFrom     DateTime       @map("valid_from")
  validUntil    DateTime       @map("valid_until")
  group         String         @default("Attendees")
  eventId       String         @map("event_id")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  registrations Registration[]
  event         Event          @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("tickets")
}

model event_sessions {
  id           String               @id
  title        String
  description  String?
  start_date   DateTime
  end_date     DateTime
  start_time   String
  end_time     String
  location     String?
  speaker      String?
  capacity     Int?
  event_id     String
  created_at   DateTime             @default(now())
  updated_at   DateTime
  banner       String?
  format       String?
  video_url    String?
  events       Event                @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  participants SessionParticipant[]
}

model Sponsor {
  id          String   @id @default(cuid())
  name        String
  description String?
  logo        String?
  website     String?
  level       String   @default("GOLD")
  visible     Boolean  @default(true)
  eventId     String   @map("event_id")
  location    String?
  address     String?
  phone       String?
  mobile      String?
  email       String?
  linkedinUrl String?  @map("linkedin_url")
  twitterUrl  String?  @map("twitter_url")
  facebookUrl String?  @map("facebook_url")
  documents   Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("sponsors")
}

model SessionParticipant {
  id              String         @id @default(cuid())
  sessionId       String         @map("session_id")
  participantId   String         @map("participant_id")
  registeredAt    DateTime       @default(now()) @map("registered_at")
  attendedSession Boolean        @default(false) @map("attended_session")
  attendanceTime  DateTime?      @map("attendance_time")
  participant     Registration   @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  session         event_sessions @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([sessionId, participantId])
  @@map("session_participants")
}

model Appointment {
  id            String       @id @default(cuid())
  eventId       String       @map("event_id")
  requesterId   String       @map("requester_id")
  recipientId   String       @map("recipient_id")
  status        String       @default("PENDING")
  message       String?
  proposedTime  DateTime?    @map("proposed_time")
  confirmedTime DateTime?    @map("confirmed_time")
  location      String?
  notes         String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recipient     Registration @relation("RecipientRelation", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  requester     Registration @relation("RequesterRelation", fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("appointments")
}

model OtpCode {
  id         String   @id @default(cuid())
  email      String
  code       String
  event_id   String?
  expires_at DateTime
  used       Boolean  @default(false)
  created_at DateTime @default(now())

  @@map("otp_codes")
}

model Badge {
  id         String   @id @default(cuid())
  eventId    String   @map("event_id")
  name       String?
  canvasData String?  @map("canvas_data")
  isDefault  Boolean  @default(false) @map("is_default")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("badges")
}

model BadgeTemplate {
  id                String             @id @default(cuid())
  name              String
  description       String?
  canvasData        String             @map("canvas_data")
  isGlobal          Boolean            @default(false) @map("is_global")
  eventId           String?            @map("event_id")
  isActive          Boolean            @default(true) @map("is_active")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  event             Event?             @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  participantBadges ParticipantBadge[]

  @@map("badge_templates")
}

model ParticipantBadge {
  id             String        @id @default(cuid())
  registrationId String        @map("registration_id")
  eventId        String        @map("event_id")
  templateId     String        @map("template_id")
  status         String        @default("GENERATED")
  generatedAt    DateTime      @default(now()) @map("generated_at")
  printedAt      DateTime?     @map("printed_at")
  deliveredAt    DateTime?     @map("delivered_at")
  customData     String?       @map("custom_data")
  qrCodeData     String?       @map("qr_code_data")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  event          Event         @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  registration   Registration  @relation(fields: [registrationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  template       BadgeTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([registrationId, eventId])
  @@map("participant_badges")
}

model EmailCampaign {
  id              String     @id @default(cuid())
  eventId         String     @map("event_id")
  name            String
  description     String?
  type            String     @default("CUSTOM")
  recipientType   String     @default("ALL_PARTICIPANTS") @map("recipient_type")
  subject         String
  htmlContent     String     @map("html_content")
  textContent     String?    @map("text_content")
  status          String     @default("DRAFT")
  scheduledAt     DateTime?  @map("scheduled_at")
  sentAt          DateTime?  @map("sent_at")
  totalRecipients Int?       @map("total_recipients")
  successCount    Int?       @map("success_count")
  failureCount    Int?       @map("failure_count")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  event           Event      @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  emailLogs       EmailLog[]

  @@map("email_campaigns")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  subject     String
  htmlContent String   @map("html_content")
  textContent String?  @map("text_content")
  type        String   @default("CUSTOM")
  category    String?
  isGlobal    Boolean  @default(false) @map("is_global")
  eventId     String?  @map("event_id")
  isActive    Boolean  @default(true) @map("is_active")
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  event       Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("email_templates")
}

model EmailLog {
  id             String        @id @default(cuid())
  campaignId     String        @map("campaign_id")
  recipientEmail String        @map("recipient_email")
  recipientName  String?       @map("recipient_name")
  status         String        @default("PENDING")
  errorMessage   String?       @map("error_message")
  sentAt         DateTime?     @map("sent_at")
  deliveredAt    DateTime?     @map("delivered_at")
  openedAt       DateTime?     @map("opened_at")
  clickedAt      DateTime?     @map("clicked_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  campaign       EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("email_logs")
}

model Game {
  id              String       @id @default(cuid())
  eventId         String       @map("event_id")
  participantId   String       @map("participant_id")
  action          String
  points          Int
  actionDetails   String?      @map("action_details")
  relatedEntityId String?      @map("related_entity_id")
  createdAt       DateTime     @default(now()) @map("created_at")
  event           Event        @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  participant     Registration @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("games")
}

model UserEventScore {
  id            String       @id @default(cuid())
  eventId       String       @map("event_id")
  participantId String       @map("participant_id")
  totalPoints   Int          @default(0) @map("total_points")
  lastUpdated   DateTime     @default(now()) @map("last_updated")
  createdAt     DateTime     @default(now()) @map("created_at")
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  participant   Registration @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([eventId, participantId])
  @@map("user_event_scores")
}

model UserMatchProfile {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  eventId      String   @map("event_id")
  headline     String?
  bio          String?
  jobTitle     String?  @map("job_title")
  company      String?
  interests    String[] @default([])
  goals        String[] @default([])
  availability String[] @default([])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, eventId])
  @@map("user_match_profiles")
}

model MatchSuggestion {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  suggestedId String   @map("suggested_id")
  eventId     String   @map("event_id")
  score       Float
  reason      String?
  createdAt   DateTime @default(now()) @map("created_at")
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  suggested   User     @relation("SuggestedUsers", fields: [suggestedId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User     @relation("UserSuggestions", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, suggestedId, eventId])
  @@map("match_suggestions")
}
